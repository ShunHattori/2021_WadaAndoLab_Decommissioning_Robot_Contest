
MOTORDRIVER_STMF303K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068c0  080068c0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080068c0  080068c0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068c0  080068c0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c0  080068c0  000168c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068c4  080068c4  000168c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080068c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000080  08006948  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08006948  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001083b  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c5  00000000  00000000  000308eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00032db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00033c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc41  00000000  00000000  00034a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff5f  00000000  00000000  00051659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8c08  00000000  00000000  000615b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a1c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046bc  00000000  00000000  0010a214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800674c 	.word	0x0800674c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800674c 	.word	0x0800674c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a78:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d013      	beq.n	8000aac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a88:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000a8c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00b      	beq.n	8000aac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a94:	e000      	b.n	8000a98 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a96:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f9      	beq.n	8000a96 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000aa2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <uart_putc>:
	char buf[1];
	HAL_UART_Receive(&huart1, (uint8_t*) buf, sizeof(buf), 0xFFFF);
	c = buf[0];
	return c;
}
void uart_putc(uint8_t c) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0] = c;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, sizeof(buf), 0xFFFF);
 8000aca:	f107 010c 	add.w	r1, r7, #12
 8000ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <uart_putc+0x28>)
 8000ad6:	f004 fb7f 	bl	80051d8 <HAL_UART_Transmit>
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000150 	.word	0x20000150

08000ae8 <_write>:
static void WS2812_Applyment(int, int);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e009      	b.n	8000b12 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	60ba      	str	r2, [r7, #8]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ffb0 	bl	8000a6c <ITM_SendChar>
	for (i = 0; i < len; i++)
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	dbf1      	blt.n	8000afe <_write+0x16>
	return len;
 8000b1a:	687b      	ldr	r3, [r7, #4]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <WS2812_write_PA8>:

void WS2812_write_PA8(register uint8_t byte) {
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
	__disable_irq();
	for (int i = 0; i < 8; i++) {
 8000b30:	2200      	movs	r2, #0
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	e076      	b.n	8000c24 <WS2812_write_PA8+0x100>
		GPIOA->BSRR = (uint32_t) GPIO_PIN_8;
 8000b36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3e:	6191      	str	r1, [r2, #24]
		if (byte & 0x80) {
 8000b40:	b25a      	sxtb	r2, r3
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	da35      	bge.n	8000bb2 <WS2812_write_PA8+0x8e>
			__NOP(); // 800 +- 150 sample 14
 8000b46:	bf00      	nop
			__NOP();
 8000b48:	bf00      	nop
			__NOP();
 8000b4a:	bf00      	nop
			__NOP();
 8000b4c:	bf00      	nop
			__NOP();
 8000b4e:	bf00      	nop
			__NOP();
 8000b50:	bf00      	nop
			__NOP();
 8000b52:	bf00      	nop
			__NOP();
 8000b54:	bf00      	nop
			__NOP();
 8000b56:	bf00      	nop
			__NOP();
 8000b58:	bf00      	nop
			__NOP();
 8000b5a:	bf00      	nop
			__NOP();
 8000b5c:	bf00      	nop
			__NOP();
 8000b5e:	bf00      	nop
			__NOP();
 8000b60:	bf00      	nop
			__NOP();
 8000b62:	bf00      	nop
			__NOP();
 8000b64:	bf00      	nop
			__NOP();
 8000b66:	bf00      	nop
			__NOP();
 8000b68:	bf00      	nop
			__NOP();
 8000b6a:	bf00      	nop
			__NOP();
 8000b6c:	bf00      	nop
			__NOP();
 8000b6e:	bf00      	nop
			__NOP();
 8000b70:	bf00      	nop
			__NOP();
 8000b72:	bf00      	nop
			__NOP();
 8000b74:	bf00      	nop
			__NOP();
 8000b76:	bf00      	nop
			__NOP();
 8000b78:	bf00      	nop
			__NOP();
 8000b7a:	bf00      	nop
			__NOP();
 8000b7c:	bf00      	nop
			__NOP();
 8000b7e:	bf00      	nop
			__NOP();
 8000b80:	bf00      	nop
			__NOP();
 8000b82:	bf00      	nop
			__NOP();
 8000b84:	bf00      	nop
			__NOP();
 8000b86:	bf00      	nop
			__NOP();
 8000b88:	bf00      	nop
			__NOP();
 8000b8a:	bf00      	nop
			__NOP();
 8000b8c:	bf00      	nop
			__NOP();
 8000b8e:	bf00      	nop
			__NOP();
 8000b90:	bf00      	nop
			__NOP();
 8000b92:	bf00      	nop
			__NOP();
 8000b94:	bf00      	nop
			__NOP();
 8000b96:	bf00      	nop
			__NOP();
 8000b98:	bf00      	nop
			GPIOA->BRR = (uint32_t) GPIO_PIN_8;
 8000b9a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba2:	6291      	str	r1, [r2, #40]	; 0x28
			__NOP(); // 450 +- 150 sample 7
 8000ba4:	bf00      	nop
			__NOP();
 8000ba6:	bf00      	nop
			__NOP();
 8000ba8:	bf00      	nop
			__NOP();
 8000baa:	bf00      	nop
			__NOP();
 8000bac:	bf00      	nop
			__NOP();
 8000bae:	bf00      	nop
 8000bb0:	e033      	b.n	8000c1a <WS2812_write_PA8+0xf6>
		} else {
			__NOP(); // 400 +- 150 sample 6
 8000bb2:	bf00      	nop
			__NOP();
 8000bb4:	bf00      	nop
			__NOP();
 8000bb6:	bf00      	nop
			__NOP();
 8000bb8:	bf00      	nop
			__NOP();
 8000bba:	bf00      	nop
			__NOP();
 8000bbc:	bf00      	nop
			__NOP();
 8000bbe:	bf00      	nop
			__NOP();
 8000bc0:	bf00      	nop
			__NOP();
 8000bc2:	bf00      	nop
			__NOP();
 8000bc4:	bf00      	nop
			__NOP();
 8000bc6:	bf00      	nop
			__NOP();
 8000bc8:	bf00      	nop
			__NOP();
 8000bca:	bf00      	nop
			__NOP();
 8000bcc:	bf00      	nop
			GPIOA->BRR = (uint32_t) GPIO_PIN_8;
 8000bce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd6:	6291      	str	r1, [r2, #40]	; 0x28
			__NOP(); // 850 +- 150 sample 15
 8000bd8:	bf00      	nop
			__NOP();
 8000bda:	bf00      	nop
			__NOP();
 8000bdc:	bf00      	nop
			__NOP();
 8000bde:	bf00      	nop
			__NOP();
 8000be0:	bf00      	nop
			__NOP();
 8000be2:	bf00      	nop
			__NOP();
 8000be4:	bf00      	nop
			__NOP();
 8000be6:	bf00      	nop
			__NOP();
 8000be8:	bf00      	nop
			__NOP();
 8000bea:	bf00      	nop
			__NOP();
 8000bec:	bf00      	nop
			__NOP();
 8000bee:	bf00      	nop
			__NOP();
 8000bf0:	bf00      	nop
			__NOP();
 8000bf2:	bf00      	nop
			__NOP();
 8000bf4:	bf00      	nop
			__NOP();
 8000bf6:	bf00      	nop
			__NOP();
 8000bf8:	bf00      	nop
			__NOP();
 8000bfa:	bf00      	nop
			__NOP();
 8000bfc:	bf00      	nop
			__NOP();
 8000bfe:	bf00      	nop
			__NOP();
 8000c00:	bf00      	nop
			__NOP();
 8000c02:	bf00      	nop
			__NOP();
 8000c04:	bf00      	nop
			__NOP();
 8000c06:	bf00      	nop
			__NOP();
 8000c08:	bf00      	nop
			__NOP();
 8000c0a:	bf00      	nop
			__NOP();
 8000c0c:	bf00      	nop
			__NOP();
 8000c0e:	bf00      	nop
			__NOP();
 8000c10:	bf00      	nop
			__NOP();
 8000c12:	bf00      	nop
			__NOP();
 8000c14:	bf00      	nop
			__NOP();
 8000c16:	bf00      	nop
			__NOP();
 8000c18:	bf00      	nop
		}
		byte = byte << 1;
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	b2db      	uxtb	r3, r3
	for (int i = 0; i < 8; i++) {
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	3201      	adds	r2, #1
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	2a07      	cmp	r2, #7
 8000c28:	dd85      	ble.n	8000b36 <WS2812_write_PA8+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c2a:	b662      	cpsie	i
}
 8000c2c:	bf00      	nop
	}
	__enable_irq();
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <WS2812_apply_color>:

void WS2812_apply_color(register uint32_t byte) {
 8000c3a:	b598      	push	{r3, r4, r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4604      	mov	r4, r0
	//	for (int i = 3; i > 0; i--) {
	//		WS2812_write_PA5((byte >> ((i - 1) * 8)) & 0xFF);
	//	}
	// G7 G6 G5 G4 G3 G2 G1 G0 R7 R6 R5 R4 R3 R2 R1 R0 B7 B6 B5 B4 B3 B2 B1 B0
	WS2812_write_PA8((byte >> 8) & 0xFF);  // RED 8bit
 8000c40:	0a23      	lsrs	r3, r4, #8
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff6d 	bl	8000b24 <WS2812_write_PA8>
	WS2812_write_PA8((byte >> 16) & 0xFF); // GREEN 8bit
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ff68 	bl	8000b24 <WS2812_write_PA8>
	WS2812_write_PA8((byte >> 0) & 0xFF);  // BLUE 8bit
 8000c54:	b2e3      	uxtb	r3, r4
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff64 	bl	8000b24 <WS2812_write_PA8>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd98      	pop	{r3, r4, r7, pc}

08000c60 <WS2812_Applyment>:

static void WS2812_Applyment(int index, int _pattern) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d81f      	bhi.n	8000cb0 <WS2812_Applyment+0x50>
 8000c70:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <WS2812_Applyment+0x18>)
 8000c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c76:	bf00      	nop
 8000c78:	08000c8d 	.word	0x08000c8d
 8000c7c:	08000c95 	.word	0x08000c95
 8000c80:	08000cb1 	.word	0x08000cb1
 8000c84:	08000c9f 	.word	0x08000c9f
 8000c88:	08000ca7 	.word	0x08000ca7
	switch (_pattern) {
	case WAIT:
		WS2812_apply_color(PURPLE);
 8000c8c:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <WS2812_Applyment+0x58>)
 8000c8e:	f7ff ffd4 	bl	8000c3a <WS2812_apply_color>
		break;
 8000c92:	e00d      	b.n	8000cb0 <WS2812_Applyment+0x50>
	case CAN_OUT_ZERO:
		WS2812_apply_color(GREEN);
 8000c94:	f245 6002 	movw	r0, #22018	; 0x5602
 8000c98:	f7ff ffcf 	bl	8000c3a <WS2812_apply_color>
		break;
 8000c9c:	e008      	b.n	8000cb0 <WS2812_Applyment+0x50>
	case CAN_OUT_HIGHSIDE:
		WS2812_apply_color(ORANGE);
 8000c9e:	4807      	ldr	r0, [pc, #28]	; (8000cbc <WS2812_Applyment+0x5c>)
 8000ca0:	f7ff ffcb 	bl	8000c3a <WS2812_apply_color>
		break;
 8000ca4:	e004      	b.n	8000cb0 <WS2812_Applyment+0x50>
	case CAN_OUT_LOWSIDE:
		WS2812_apply_color(BLUE);
 8000ca6:	f642 0056 	movw	r0, #10326	; 0x2856
 8000caa:	f7ff ffc6 	bl	8000c3a <WS2812_apply_color>
		break;
 8000cae:	bf00      	nop
	}
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	00260533 	.word	0x00260533
 8000cbc:	003a1700 	.word	0x003a1700

08000cc0 <PWM_Generation>:

static void PWM_Generation(TIM_HandleTypeDef _htim, int channel_set, int _PWM) {
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	b5b0      	push	{r4, r5, r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	f107 0418 	add.w	r4, r7, #24
 8000ccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//wrapping value within htim2.Init.Period*0.95
	//CANデータ�?�2byteフル�?�使�?��?�値�?�飛ん�?��??る。　�??れをhtim2.Init.Period�?�スケール�?�変�?��?��?�利用
	//上�?値�?�固定�?��?�プログラムを�?��?�る。周波数を変更�?��?��?��?��?�も自動的�?�変更�?��?�応�?�れる。（ベンリー）
	int16_t pwm = _PWM / (256.0 * 256.0 / 2.0 / _htim.Init.Period);
 8000cd0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000cd2:	f7ff fc27 	bl	8000524 <__aeabi_i2d>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	460d      	mov	r5, r1
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fc11 	bl	8000504 <__aeabi_ui2d>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	f04f 0000 	mov.w	r0, #0
 8000cea:	4949      	ldr	r1, [pc, #292]	; (8000e10 <PWM_Generation+0x150>)
 8000cec:	f7ff fdae 	bl	800084c <__aeabi_ddiv>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	4629      	mov	r1, r5
 8000cf8:	f7ff fda8 	bl	800084c <__aeabi_ddiv>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4610      	mov	r0, r2
 8000d02:	4619      	mov	r1, r3
 8000d04:	f7ff fe8a 	bl	8000a1c <__aeabi_d2iz>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	80fb      	strh	r3, [r7, #6]
	int16_t Period_95perc = (_htim.Init.Period * 0.95);
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fbf8 	bl	8000504 <__aeabi_ui2d>
 8000d14:	a33c      	add	r3, pc, #240	; (adr r3, 8000e08 <PWM_Generation+0x148>)
 8000d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1a:	f7ff fc6d 	bl	80005f8 <__aeabi_dmul>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f7ff fe79 	bl	8000a1c <__aeabi_d2iz>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	80bb      	strh	r3, [r7, #4]
	static int16_t HIGH_SIDE = 0, LOW_SIDE = 0;
	if (pwm < -Period_95perc) {
 8000d2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d36:	425b      	negs	r3, r3
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	da03      	bge.n	8000d44 <PWM_Generation+0x84>
		pwm = -Period_95perc;
 8000d3c:	88bb      	ldrh	r3, [r7, #4]
 8000d3e:	425b      	negs	r3, r3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	80fb      	strh	r3, [r7, #6]
	}
	if (Period_95perc < pwm) {
 8000d44:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	da01      	bge.n	8000d54 <PWM_Generation+0x94>
		pwm = Period_95perc;
 8000d50:	88bb      	ldrh	r3, [r7, #4]
 8000d52:	80fb      	strh	r3, [r7, #6]
	}
	if (pwm < 0) {
 8000d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	da09      	bge.n	8000d70 <PWM_Generation+0xb0>
		HIGH_SIDE = 0;
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <PWM_Generation+0x154>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	801a      	strh	r2, [r3, #0]
		LOW_SIDE = -pwm;
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	425b      	negs	r3, r3
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	b21a      	sxth	r2, r3
 8000d6a:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <PWM_Generation+0x158>)
 8000d6c:	801a      	strh	r2, [r3, #0]
 8000d6e:	e010      	b.n	8000d92 <PWM_Generation+0xd2>
	} else if (0 < pwm) {
 8000d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	dd06      	ble.n	8000d86 <PWM_Generation+0xc6>
		HIGH_SIDE = pwm;
 8000d78:	4a26      	ldr	r2, [pc, #152]	; (8000e14 <PWM_Generation+0x154>)
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	8013      	strh	r3, [r2, #0]
		LOW_SIDE = 0;
 8000d7e:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <PWM_Generation+0x158>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	801a      	strh	r2, [r3, #0]
 8000d84:	e005      	b.n	8000d92 <PWM_Generation+0xd2>
	} else {
		HIGH_SIDE = 0;
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <PWM_Generation+0x154>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	801a      	strh	r2, [r3, #0]
		LOW_SIDE = 0;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <PWM_Generation+0x158>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	801a      	strh	r2, [r3, #0]
	}
	//回路設計�?�都�?�上1�?ート�?��?�HIGH　LOW�?��??転�?��?��?�る�?��?��?ート�?�よ�?��?��?ャン�?ルを切り替�?�れるよ�?��?��?��?��?�る
	if (channel_set == 1) { //�?��?��?ート�?��?�周り�?��?�れ�?��?�る
 8000d92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d109      	bne.n	8000dac <PWM_Generation+0xec>
		__HAL_TIM_SET_COMPARE(&_htim, TIM_CHANNEL_2, HIGH_SIDE);
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <PWM_Generation+0x154>)
 8000d9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&_htim, TIM_CHANNEL_1, LOW_SIDE);
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <PWM_Generation+0x158>)
 8000da4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (channel_set == 2) {
 8000dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d109      	bne.n	8000dc6 <PWM_Generation+0x106>
		__HAL_TIM_SET_COMPARE(&_htim, TIM_CHANNEL_3, HIGH_SIDE);
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <PWM_Generation+0x154>)
 8000db4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&_htim, TIM_CHANNEL_4, LOW_SIDE);
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <PWM_Generation+0x158>)
 8000dbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	641a      	str	r2, [r3, #64]	; 0x40
	}
	if (channel_set == 3) {
 8000dc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d109      	bne.n	8000de0 <PWM_Generation+0x120>
		__HAL_TIM_SET_COMPARE(&_htim, TIM_CHANNEL_1, HIGH_SIDE);
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <PWM_Generation+0x154>)
 8000dce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&_htim, TIM_CHANNEL_2, LOW_SIDE);
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <PWM_Generation+0x158>)
 8000dd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (channel_set == 4) {
 8000de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d109      	bne.n	8000dfa <PWM_Generation+0x13a>
		__HAL_TIM_SET_COMPARE(&_htim, TIM_CHANNEL_3, HIGH_SIDE);
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <PWM_Generation+0x154>)
 8000de8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&_htim, TIM_CHANNEL_4, LOW_SIDE);
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <PWM_Generation+0x158>)
 8000df2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
	}

}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000e04:	b004      	add	sp, #16
 8000e06:	4770      	bx	lr
 8000e08:	66666666 	.word	0x66666666
 8000e0c:	3fee6666 	.word	0x3fee6666
 8000e10:	40e00000 	.word	0x40e00000
 8000e14:	200000a0 	.word	0x200000a0
 8000e18:	200000a2 	.word	0x200000a2

08000e1c <PARSE_CAN_FRAME>:

//フィルタ�?�設定�?�る�?��?��?�よ�?��?�ソフト的�?�ID�?�別�?��?��??�?�も�?��?�
//#define CAN_Identifer 0x001

static void PARSE_CAN_FRAME(void) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
//	if (RxHeader.StdId != CAN_Identifer) {
//		return;
//	}

	static int16_t latest[4];
	for (int i = 0; i < 4; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	e014      	b.n	8000e52 <PARSE_CAN_FRAME+0x36>
		latest[i] = (int16_t) ((int16_t) (RxData[i * 2 + 1] << 8)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <PARSE_CAN_FRAME+0xd0>)
 8000e30:	5cd3      	ldrb	r3, [r2, r3]
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	b21a      	sxth	r2, r3
				| RxData[i * 2]);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	492c      	ldr	r1, [pc, #176]	; (8000eec <PARSE_CAN_FRAME+0xd0>)
 8000e3c:	5ccb      	ldrb	r3, [r1, r3]
 8000e3e:	b21b      	sxth	r3, r3
		latest[i] = (int16_t) ((int16_t) (RxData[i * 2 + 1] << 8)
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b219      	sxth	r1, r3
 8000e44:	4a2a      	ldr	r2, [pc, #168]	; (8000ef0 <PARSE_CAN_FRAME+0xd4>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	dde7      	ble.n	8000e28 <PARSE_CAN_FRAME+0xc>
	}
	motor1_output = latest[0];
 8000e58:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <PARSE_CAN_FRAME+0xd4>)
 8000e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <PARSE_CAN_FRAME+0xd8>)
 8000e62:	601a      	str	r2, [r3, #0]
	motor2_output = latest[3];
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <PARSE_CAN_FRAME+0xd4>)
 8000e66:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <PARSE_CAN_FRAME+0xdc>)
 8000e6e:	601a      	str	r2, [r3, #0]
	motor3_output = latest[1];
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <PARSE_CAN_FRAME+0xd4>)
 8000e72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <PARSE_CAN_FRAME+0xe0>)
 8000e7a:	601a      	str	r2, [r3, #0]
	motor4_output = latest[2];
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <PARSE_CAN_FRAME+0xd4>)
 8000e7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <PARSE_CAN_FRAME+0xe4>)
 8000e86:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 4; i++) {
 8000e88:	2300      	movs	r3, #0
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	e025      	b.n	8000eda <PARSE_CAN_FRAME+0xbe>
		if (latest[i] == 0) {
 8000e8e:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <PARSE_CAN_FRAME+0xd4>)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d105      	bne.n	8000ea6 <PARSE_CAN_FRAME+0x8a>
			pattern[i] = CAN_OUT_ZERO;
 8000e9a:	4a1a      	ldr	r2, [pc, #104]	; (8000f04 <PARSE_CAN_FRAME+0xe8>)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ea4:	e016      	b.n	8000ed4 <PARSE_CAN_FRAME+0xb8>
		} else if (latest[i] > 0) {
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <PARSE_CAN_FRAME+0xd4>)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	dd05      	ble.n	8000ebe <PARSE_CAN_FRAME+0xa2>
			pattern[i] = CAN_OUT_HIGHSIDE;
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <PARSE_CAN_FRAME+0xe8>)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ebc:	e00a      	b.n	8000ed4 <PARSE_CAN_FRAME+0xb8>
		} else if (latest[i] < 0) {
 8000ebe:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <PARSE_CAN_FRAME+0xd4>)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da04      	bge.n	8000ed4 <PARSE_CAN_FRAME+0xb8>
			pattern[i] = CAN_OUT_LOWSIDE;
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <PARSE_CAN_FRAME+0xe8>)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2104      	movs	r1, #4
 8000ed0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	ddd6      	ble.n	8000e8e <PARSE_CAN_FRAME+0x72>
		}
	}

	return;
 8000ee0:	bf00      	nop
}
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	200001ec 	.word	0x200001ec
 8000ef0:	200000a4 	.word	0x200000a4
 8000ef4:	200001d8 	.word	0x200001d8
 8000ef8:	20000278 	.word	0x20000278
 8000efc:	2000014c 	.word	0x2000014c
 8000f00:	20000240 	.word	0x20000240
 8000f04:	2000013c 	.word	0x2000013c

08000f08 <CAN_Polling>:

static int CAN_Polling(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	static int idle_counter = 0;
	idle_counter++;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <CAN_Polling+0x80>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <CAN_Polling+0x80>)
 8000f14:	6013      	str	r3, [r2, #0]
	if (idle_counter > 200) {
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <CAN_Polling+0x80>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2bc8      	cmp	r3, #200	; 0xc8
 8000f1c:	dd17      	ble.n	8000f4e <CAN_Polling+0x46>
		pattern[0] = WAIT;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <CAN_Polling+0x84>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
		pattern[1] = WAIT;
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <CAN_Polling+0x84>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
		pattern[2] = WAIT;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <CAN_Polling+0x84>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
		pattern[3] = WAIT;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <CAN_Polling+0x84>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
		motor1_output = 0;
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <CAN_Polling+0x88>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
		motor2_output = 0;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <CAN_Polling+0x8c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
		motor3_output = 0;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <CAN_Polling+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
		motor4_output = 0;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <CAN_Polling+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
	}

	if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0) {
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4813      	ldr	r0, [pc, #76]	; (8000fa0 <CAN_Polling+0x98>)
 8000f52:	f001 fc2e 	bl	80027b2 <HAL_CAN_GetRxFifoFillLevel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <CAN_Polling+0x58>
		/* Reception Missing */
		return 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e011      	b.n	8000f84 <CAN_Polling+0x7c>
	}
	idle_counter = 0;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <CAN_Polling+0x80>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
	xprintf("CAN PACKET RECEIVED\r\n");
 8000f66:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <CAN_Polling+0x9c>)
 8000f68:	f001 f860 	bl	800202c <xprintf>
#ifdef DEBUGMODE
	xprintf("fill level:%d\r\n",
			HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0));
#endif

	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData)
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <CAN_Polling+0xa0>)
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <CAN_Polling+0xa4>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <CAN_Polling+0x98>)
 8000f74:	f001 fb0b 	bl	800258e <HAL_CAN_GetRxMessage>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <CAN_Polling+0x7a>
			!= HAL_OK) {
		/* Reception Error */
		return 2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	e000      	b.n	8000f84 <CAN_Polling+0x7c>
#ifdef DEBUGMODE
	xprintf("id:%d,data[0]:%d\r\n", RxHeader.StdId, RxData[0]);
#endif

	//success receiving
	return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200000ac 	.word	0x200000ac
 8000f8c:	2000013c 	.word	0x2000013c
 8000f90:	200001d8 	.word	0x200001d8
 8000f94:	20000278 	.word	0x20000278
 8000f98:	2000014c 	.word	0x2000014c
 8000f9c:	20000240 	.word	0x20000240
 8000fa0:	200000c4 	.word	0x200000c4
 8000fa4:	08006764 	.word	0x08006764
 8000fa8:	200001ec 	.word	0x200001ec
 8000fac:	2000025c 	.word	0x2000025c

08000fb0 <CAN_Filter_Init>:

// フィルタモード　設定�?�考
// https://hsdev.co.jp/stm32-can/
static void CAN_Filter_Init(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08e      	sub	sp, #56	; 0x38
 8000fb4:	af00      	add	r7, sp, #0
//setting CAN filters
	uint32_t fId1 = 0x005 << 5; // フィルターID1
 8000fb6:	23a0      	movs	r3, #160	; 0xa0
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t fId2 = 0x000 << 5; // フィルターID2
 8000fba:	2300      	movs	r3, #0
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t fId3 = 0x000 << 5; // フィルターID3
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fId4 = 0x000 << 5; // フィルターID4
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterIdHigh = fId1;                  // フィルターID1
 8000fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = fId2;                  // フィルターID2
 8000fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fcc:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = fId3;                  // フィルターID3
 8000fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = fId4;                  // フィルターID4
 8000fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // 16モード
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // FIFO0�?�格�?
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterBank = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST; // IDリストモード
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000fe6:	230e      	movs	r3, #14
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterActivation = ENABLE;
 8000fea:	2301      	movs	r3, #1
 8000fec:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <CAN_Filter_Init+0x5c>)
 8000ff4:	f001 f9bd 	bl	8002372 <HAL_CAN_ConfigFilter>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <CAN_Filter_Init+0x52>
		/* Filter configuration Error */
		Error_Handler();
 8000ffe:	f000 fbb7 	bl	8001770 <Error_Handler>
	}
}
 8001002:	bf00      	nop
 8001004:	3738      	adds	r7, #56	; 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000c4 	.word	0x200000c4

08001010 <Timer_Start>:

static void Timer_Start(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
//Initialize timers for PWM generation
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001014:	2100      	movs	r1, #0
 8001016:	4810      	ldr	r0, [pc, #64]	; (8001058 <Timer_Start+0x48>)
 8001018:	f003 f982 	bl	8004320 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800101c:	2104      	movs	r1, #4
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <Timer_Start+0x48>)
 8001020:	f003 f97e 	bl	8004320 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001024:	2108      	movs	r1, #8
 8001026:	480c      	ldr	r0, [pc, #48]	; (8001058 <Timer_Start+0x48>)
 8001028:	f003 f97a 	bl	8004320 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800102c:	210c      	movs	r1, #12
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <Timer_Start+0x48>)
 8001030:	f003 f976 	bl	8004320 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001034:	2100      	movs	r1, #0
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <Timer_Start+0x4c>)
 8001038:	f003 f972 	bl	8004320 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800103c:	2104      	movs	r1, #4
 800103e:	4807      	ldr	r0, [pc, #28]	; (800105c <Timer_Start+0x4c>)
 8001040:	f003 f96e 	bl	8004320 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001044:	2108      	movs	r1, #8
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <Timer_Start+0x4c>)
 8001048:	f003 f96a 	bl	8004320 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800104c:	210c      	movs	r1, #12
 800104e:	4803      	ldr	r0, [pc, #12]	; (800105c <Timer_Start+0x4c>)
 8001050:	f003 f966 	bl	8004320 <HAL_TIM_PWM_Start>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200001f4 	.word	0x200001f4
 800105c:	200000ec 	.word	0x200000ec

08001060 <GPIO_Start>:

static void GPIO_Start(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
//Activate GATE DRIVER SHUTDOWN PIN to HIGH LEVEL(ENABLE)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	2104      	movs	r1, #4
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f001 fe22 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2108      	movs	r1, #8
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f001 fe1c 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2120      	movs	r1, #32
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f001 fe16 	bl	8002cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f001 fe10 	bl	8002cb4 <HAL_GPIO_WritePin>
//Set PWM duty to ZERO (for safety)
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <GPIO_Start+0x78>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <GPIO_Start+0x78>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2200      	movs	r2, #0
 80010a2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <GPIO_Start+0x78>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <GPIO_Start+0x78>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2200      	movs	r2, #0
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <GPIO_Start+0x7c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2200      	movs	r2, #0
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <GPIO_Start+0x7c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2200      	movs	r2, #0
 80010c2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <GPIO_Start+0x7c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <GPIO_Start+0x7c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001f4 	.word	0x200001f4
 80010dc:	200000ec 	.word	0x200000ec

080010e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	b099      	sub	sp, #100	; 0x64
 80010e4:	af12      	add	r7, sp, #72	; 0x48
	/* USER CODE BEGIN 1 */
	//provide function logic to xprint source
	xdev_out(uart_putc);
 80010e6:	4b72      	ldr	r3, [pc, #456]	; (80012b0 <main+0x1d0>)
 80010e8:	4a72      	ldr	r2, [pc, #456]	; (80012b4 <main+0x1d4>)
 80010ea:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010ec:	f000 ffe0 	bl	80020b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010f0:	f000 f900 	bl	80012f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010f4:	f000 faf0 	bl	80016d8 <MX_GPIO_Init>
	MX_CAN_Init();
 80010f8:	f000 f958 	bl	80013ac <MX_CAN_Init>
	MX_TIM2_Init();
 80010fc:	f000 f98c 	bl	8001418 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001100:	f000 fa22 	bl	8001548 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001104:	f000 fab8 	bl	8001678 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	xprintf("--MotorDriver Historia V1 2021/03/08--\r\n");
 8001108:	486b      	ldr	r0, [pc, #428]	; (80012b8 <main+0x1d8>)
 800110a:	f000 ff8f 	bl	800202c <xprintf>
	xprintf("Starting up...\r\n");
 800110e:	486b      	ldr	r0, [pc, #428]	; (80012bc <main+0x1dc>)
 8001110:	f000 ff8c 	bl	800202c <xprintf>
	Timer_Start();
 8001114:	f7ff ff7c 	bl	8001010 <Timer_Start>
	GPIO_Start();
 8001118:	f7ff ffa2 	bl	8001060 <GPIO_Start>
	CAN_Filter_Init();
 800111c:	f7ff ff48 	bl	8000fb0 <CAN_Filter_Init>
	HAL_CAN_Start(&hcan);
 8001120:	4867      	ldr	r0, [pc, #412]	; (80012c0 <main+0x1e0>)
 8001122:	f001 f9f0 	bl	8002506 <HAL_CAN_Start>
	xprintf("Started up successfully.\r\n");
 8001126:	4867      	ldr	r0, [pc, #412]	; (80012c4 <main+0x1e4>)
 8001128:	f000 ff80 	bl	800202c <xprintf>

	while (1) {
		if (CAN_Polling() == HAL_OK) {
 800112c:	f7ff feec 	bl	8000f08 <CAN_Polling>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <main+0x5a>
			PARSE_CAN_FRAME();
 8001136:	f7ff fe71 	bl	8000e1c <PARSE_CAN_FRAME>
		}

		xprintf("current output:%d \r\n", output);
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <main+0x1e8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4619      	mov	r1, r3
 8001140:	4862      	ldr	r0, [pc, #392]	; (80012cc <main+0x1ec>)
 8001142:	f000 ff73 	bl	800202c <xprintf>
		printf("current output:%d \r\n", output);
 8001146:	4b60      	ldr	r3, [pc, #384]	; (80012c8 <main+0x1e8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	485f      	ldr	r0, [pc, #380]	; (80012cc <main+0x1ec>)
 800114e:	f004 fba7 	bl	80058a0 <iprintf>

		PWM_Generation(htim2, 1, motor1_output);
 8001152:	4b5f      	ldr	r3, [pc, #380]	; (80012d0 <main+0x1f0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4e5f      	ldr	r6, [pc, #380]	; (80012d4 <main+0x1f4>)
 8001158:	9310      	str	r3, [sp, #64]	; 0x40
 800115a:	2301      	movs	r3, #1
 800115c:	930f      	str	r3, [sp, #60]	; 0x3c
 800115e:	466d      	mov	r5, sp
 8001160:	f106 0410 	add.w	r4, r6, #16
 8001164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001170:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001174:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001178:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800117c:	f7ff fda0 	bl	8000cc0 <PWM_Generation>
		PWM_Generation(htim2, 2, motor2_output);
 8001180:	4b55      	ldr	r3, [pc, #340]	; (80012d8 <main+0x1f8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4e53      	ldr	r6, [pc, #332]	; (80012d4 <main+0x1f4>)
 8001186:	9310      	str	r3, [sp, #64]	; 0x40
 8001188:	2302      	movs	r3, #2
 800118a:	930f      	str	r3, [sp, #60]	; 0x3c
 800118c:	466d      	mov	r5, sp
 800118e:	f106 0410 	add.w	r4, r6, #16
 8001192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011aa:	f7ff fd89 	bl	8000cc0 <PWM_Generation>
		PWM_Generation(htim3, 3, motor3_output);
 80011ae:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <main+0x1fc>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4e4b      	ldr	r6, [pc, #300]	; (80012e0 <main+0x200>)
 80011b4:	9310      	str	r3, [sp, #64]	; 0x40
 80011b6:	2303      	movs	r3, #3
 80011b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80011ba:	466d      	mov	r5, sp
 80011bc:	f106 0410 	add.w	r4, r6, #16
 80011c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011cc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011d4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011d8:	f7ff fd72 	bl	8000cc0 <PWM_Generation>
		PWM_Generation(htim3, 4, motor4_output);
 80011dc:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <main+0x204>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4e3f      	ldr	r6, [pc, #252]	; (80012e0 <main+0x200>)
 80011e2:	9310      	str	r3, [sp, #64]	; 0x40
 80011e4:	2304      	movs	r3, #4
 80011e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80011e8:	466d      	mov	r5, sp
 80011ea:	f106 0410 	add.w	r4, r6, #16
 80011ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001202:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001206:	f7ff fd5b 	bl	8000cc0 <PWM_Generation>

		//LED update
		uint8_t is_eligible_to_update = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	75fb      	strb	r3, [r7, #23]
		for (int i = 0; i < 4; i++) {
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	e024      	b.n	800125e <main+0x17e>
			static int previous_pattern[4] = { 999, 999, 999, 999 };
			static int token = 0;
			token++;
 8001214:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <main+0x208>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	4a33      	ldr	r2, [pc, #204]	; (80012e8 <main+0x208>)
 800121c:	6013      	str	r3, [r2, #0]
			if (previous_pattern[i] == pattern[i] && token < 100)
 800121e:	4a33      	ldr	r2, [pc, #204]	; (80012ec <main+0x20c>)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001226:	4932      	ldr	r1, [pc, #200]	; (80012f0 <main+0x210>)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800122e:	429a      	cmp	r2, r3
 8001230:	d103      	bne.n	800123a <main+0x15a>
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <main+0x208>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b63      	cmp	r3, #99	; 0x63
 8001238:	dd0d      	ble.n	8001256 <main+0x176>
				continue;
			token = 0;
 800123a:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <main+0x208>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
			previous_pattern[i] = pattern[i];
 8001240:	4a2b      	ldr	r2, [pc, #172]	; (80012f0 <main+0x210>)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001248:	4928      	ldr	r1, [pc, #160]	; (80012ec <main+0x20c>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			is_eligible_to_update = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	75fb      	strb	r3, [r7, #23]
 8001254:	e000      	b.n	8001258 <main+0x178>
				continue;
 8001256:	bf00      	nop
		for (int i = 0; i < 4; i++) {
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	3301      	adds	r3, #1
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	2b03      	cmp	r3, #3
 8001262:	ddd7      	ble.n	8001214 <main+0x134>
		}
		if (is_eligible_to_update) {
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b00      	cmp	r3, #0
 8001268:	f43f af60 	beq.w	800112c <main+0x4c>
			is_eligible_to_update = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]
			for (int i = 0; i < 4; i++) {
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e00a      	b.n	800128c <main+0x1ac>
				WS2812_Applyment(i, pattern[i]);
 8001276:	4a1e      	ldr	r2, [pc, #120]	; (80012f0 <main+0x210>)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	4619      	mov	r1, r3
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f7ff fced 	bl	8000c60 <WS2812_Applyment>
			for (int i = 0; i < 4; i++) {
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b03      	cmp	r3, #3
 8001290:	ddf1      	ble.n	8001276 <main+0x196>
			}
			uint32_t tickstart = HAL_GetTick();
 8001292:	f000 ff67 	bl	8002164 <HAL_GetTick>
 8001296:	60b8      	str	r0, [r7, #8]
			uint32_t wait = 1;
 8001298:	2301      	movs	r3, #1
 800129a:	607b      	str	r3, [r7, #4]
			while ((HAL_GetTick() - tickstart) < wait) {
 800129c:	bf00      	nop
 800129e:	f000 ff61 	bl	8002164 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d8f7      	bhi.n	800129e <main+0x1be>
	while (1) {
 80012ae:	e73d      	b.n	800112c <main+0x4c>
 80012b0:	2000027c 	.word	0x2000027c
 80012b4:	08000abd 	.word	0x08000abd
 80012b8:	0800677c 	.word	0x0800677c
 80012bc:	080067a8 	.word	0x080067a8
 80012c0:	200000c4 	.word	0x200000c4
 80012c4:	080067bc 	.word	0x080067bc
 80012c8:	2000009c 	.word	0x2000009c
 80012cc:	080067d8 	.word	0x080067d8
 80012d0:	200001d8 	.word	0x200001d8
 80012d4:	200001f4 	.word	0x200001f4
 80012d8:	20000278 	.word	0x20000278
 80012dc:	2000014c 	.word	0x2000014c
 80012e0:	200000ec 	.word	0x200000ec
 80012e4:	20000240 	.word	0x20000240
 80012e8:	200000b0 	.word	0x200000b0
 80012ec:	20000000 	.word	0x20000000
 80012f0:	2000013c 	.word	0x2000013c

080012f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b096      	sub	sp, #88	; 0x58
 80012f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fe:	2228      	movs	r2, #40	; 0x28
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f004 fac4 	bl	8005890 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001328:	2301      	movs	r3, #1
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800132c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001332:	2301      	movs	r3, #1
 8001334:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001336:	2301      	movs	r3, #1
 8001338:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133a:	2302      	movs	r3, #2
 800133c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001342:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001344:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001348:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800134a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800134e:	4618      	mov	r0, r3
 8001350:	f001 fcc8 	bl	8002ce4 <HAL_RCC_OscConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0x6a>
		Error_Handler();
 800135a:	f000 fa09 	bl	8001770 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800135e:	230f      	movs	r3, #15
 8001360:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001362:	2302      	movs	r3, #2
 8001364:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	2102      	movs	r1, #2
 800137a:	4618      	mov	r0, r3
 800137c:	f002 fbba 	bl	8003af4 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x96>
		Error_Handler();
 8001386:	f000 f9f3 	bl	8001770 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800138a:	2301      	movs	r3, #1
 800138c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4618      	mov	r0, r3
 8001396:	f002 fde5 	bl	8003f64 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0xb0>
		Error_Handler();
 80013a0:	f000 f9e6 	bl	8001770 <Error_Handler>
	}
}
 80013a4:	bf00      	nop
 80013a6:	3758      	adds	r7, #88	; 0x58
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_CAN_Init+0x64>)
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <MX_CAN_Init+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 2;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_CAN_Init+0x64>)
 80013b8:	2202      	movs	r2, #2
 80013ba:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_CAN_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_CAN_Init+0x64>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_CAN_Init+0x64>)
 80013ca:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80013ce:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_CAN_Init+0x64>)
 80013d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013d6:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <MX_CAN_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_CAN_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_CAN_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_CAN_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_CAN_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_CAN_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_CAN_Init+0x64>)
 80013fe:	f000 febd 	bl	800217c <HAL_CAN_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_CAN_Init+0x60>
		Error_Handler();
 8001408:	f000 f9b2 	bl	8001770 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200000c4 	.word	0x200000c4
 8001414:	40006400 	.word	0x40006400

08001418 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800141e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001438:	463b      	mov	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <MX_TIM2_Init+0x12c>)
 800144c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001450:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001452:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <MX_TIM2_Init+0x12c>)
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <MX_TIM2_Init+0x12c>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 2399;
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <MX_TIM2_Init+0x12c>)
 8001460:	f640 125f 	movw	r2, #2399	; 0x95f
 8001464:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b37      	ldr	r3, [pc, #220]	; (8001544 <MX_TIM2_Init+0x12c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <MX_TIM2_Init+0x12c>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001472:	4834      	ldr	r0, [pc, #208]	; (8001544 <MX_TIM2_Init+0x12c>)
 8001474:	f002 fe9c 	bl	80041b0 <HAL_TIM_Base_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0x6a>
		Error_Handler();
 800147e:	f000 f977 	bl	8001770 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001488:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148c:	4619      	mov	r1, r3
 800148e:	482d      	ldr	r0, [pc, #180]	; (8001544 <MX_TIM2_Init+0x12c>)
 8001490:	f003 f942 	bl	8004718 <HAL_TIM_ConfigClockSource>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0x86>
		Error_Handler();
 800149a:	f000 f969 	bl	8001770 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800149e:	4829      	ldr	r0, [pc, #164]	; (8001544 <MX_TIM2_Init+0x12c>)
 80014a0:	f002 fedd 	bl	800425e <HAL_TIM_PWM_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0x96>
		Error_Handler();
 80014aa:	f000 f961 	bl	8001770 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	4821      	ldr	r0, [pc, #132]	; (8001544 <MX_TIM2_Init+0x12c>)
 80014be:	f003 fdcf 	bl	8005060 <HAL_TIMEx_MasterConfigSynchronization>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80014c8:	f000 f952 	bl	8001770 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014cc:	2360      	movs	r3, #96	; 0x60
 80014ce:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80014dc:	463b      	mov	r3, r7
 80014de:	2200      	movs	r2, #0
 80014e0:	4619      	mov	r1, r3
 80014e2:	4818      	ldr	r0, [pc, #96]	; (8001544 <MX_TIM2_Init+0x12c>)
 80014e4:	f003 f808 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80014ee:	f000 f93f 	bl	8001770 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80014f2:	463b      	mov	r3, r7
 80014f4:	2204      	movs	r2, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	4812      	ldr	r0, [pc, #72]	; (8001544 <MX_TIM2_Init+0x12c>)
 80014fa:	f002 fffd 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8001504:	f000 f934 	bl	8001770 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001508:	463b      	mov	r3, r7
 800150a:	2208      	movs	r2, #8
 800150c:	4619      	mov	r1, r3
 800150e:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_TIM2_Init+0x12c>)
 8001510:	f002 fff2 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM2_Init+0x106>
			!= HAL_OK) {
		Error_Handler();
 800151a:	f000 f929 	bl	8001770 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 800151e:	463b      	mov	r3, r7
 8001520:	220c      	movs	r2, #12
 8001522:	4619      	mov	r1, r3
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <MX_TIM2_Init+0x12c>)
 8001526:	f002 ffe7 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x11c>
			!= HAL_OK) {
		Error_Handler();
 8001530:	f000 f91e 	bl	8001770 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <MX_TIM2_Init+0x12c>)
 8001536:	f000 f9bb 	bl	80018b0 <HAL_TIM_MspPostInit>

}
 800153a:	bf00      	nop
 800153c:	3738      	adds	r7, #56	; 0x38
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200001f4 	.word	0x200001f4

08001548 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	; 0x38
 800154c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800154e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001568:	463b      	mov	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800157a:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <MX_TIM3_Init+0x128>)
 800157c:	4a3d      	ldr	r2, [pc, #244]	; (8001674 <MX_TIM3_Init+0x12c>)
 800157e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001580:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <MX_TIM3_Init+0x128>)
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <MX_TIM3_Init+0x128>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 2399;
 800158c:	4b38      	ldr	r3, [pc, #224]	; (8001670 <MX_TIM3_Init+0x128>)
 800158e:	f640 125f 	movw	r2, #2399	; 0x95f
 8001592:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b36      	ldr	r3, [pc, #216]	; (8001670 <MX_TIM3_Init+0x128>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b35      	ldr	r3, [pc, #212]	; (8001670 <MX_TIM3_Init+0x128>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80015a0:	4833      	ldr	r0, [pc, #204]	; (8001670 <MX_TIM3_Init+0x128>)
 80015a2:	f002 fe05 	bl	80041b0 <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM3_Init+0x68>
		Error_Handler();
 80015ac:	f000 f8e0 	bl	8001770 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80015b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ba:	4619      	mov	r1, r3
 80015bc:	482c      	ldr	r0, [pc, #176]	; (8001670 <MX_TIM3_Init+0x128>)
 80015be:	f003 f8ab 	bl	8004718 <HAL_TIM_ConfigClockSource>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM3_Init+0x84>
		Error_Handler();
 80015c8:	f000 f8d2 	bl	8001770 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80015cc:	4828      	ldr	r0, [pc, #160]	; (8001670 <MX_TIM3_Init+0x128>)
 80015ce:	f002 fe46 	bl	800425e <HAL_TIM_PWM_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0x94>
		Error_Handler();
 80015d8:	f000 f8ca 	bl	8001770 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4821      	ldr	r0, [pc, #132]	; (8001670 <MX_TIM3_Init+0x128>)
 80015ec:	f003 fd38 	bl	8005060 <HAL_TIMEx_MasterConfigSynchronization>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80015f6:	f000 f8bb 	bl	8001770 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fa:	2360      	movs	r3, #96	; 0x60
 80015fc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	4817      	ldr	r0, [pc, #92]	; (8001670 <MX_TIM3_Init+0x128>)
 8001612:	f002 ff71 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 800161c:	f000 f8a8 	bl	8001770 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001620:	463b      	mov	r3, r7
 8001622:	2204      	movs	r2, #4
 8001624:	4619      	mov	r1, r3
 8001626:	4812      	ldr	r0, [pc, #72]	; (8001670 <MX_TIM3_Init+0x128>)
 8001628:	f002 ff66 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8001632:	f000 f89d 	bl	8001770 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8001636:	463b      	mov	r3, r7
 8001638:	2208      	movs	r2, #8
 800163a:	4619      	mov	r1, r3
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_TIM3_Init+0x128>)
 800163e:	f002 ff5b 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM3_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8001648:	f000 f892 	bl	8001770 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 800164c:	463b      	mov	r3, r7
 800164e:	220c      	movs	r2, #12
 8001650:	4619      	mov	r1, r3
 8001652:	4807      	ldr	r0, [pc, #28]	; (8001670 <MX_TIM3_Init+0x128>)
 8001654:	f002 ff50 	bl	80044f8 <HAL_TIM_PWM_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0x11a>
			!= HAL_OK) {
		Error_Handler();
 800165e:	f000 f887 	bl	8001770 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001662:	4803      	ldr	r0, [pc, #12]	; (8001670 <MX_TIM3_Init+0x128>)
 8001664:	f000 f924 	bl	80018b0 <HAL_TIM_MspPostInit>

}
 8001668:	bf00      	nop
 800166a:	3738      	adds	r7, #56	; 0x38
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200000ec 	.word	0x200000ec
 8001674:	40000400 	.word	0x40000400

08001678 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_USART1_UART_Init+0x58>)
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <MX_USART1_UART_Init+0x5c>)
 8001680:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 230400;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_USART1_UART_Init+0x58>)
 8001684:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001688:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART1_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_USART1_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART1_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART1_UART_Init+0x58>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART1_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART1_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART1_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART1_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART1_UART_Init+0x58>)
 80016bc:	f003 fd3e 	bl	800513c <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80016c6:	f000 f853 	bl	8001770 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000150 	.word	0x20000150
 80016d4:	40013800 	.word	0x40013800

080016d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_GPIO_Init+0x94>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	4a1e      	ldr	r2, [pc, #120]	; (800176c <MX_GPIO_Init+0x94>)
 80016f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f8:	6153      	str	r3, [r2, #20]
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_GPIO_Init+0x94>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_GPIO_Init+0x94>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	4a18      	ldr	r2, [pc, #96]	; (800176c <MX_GPIO_Init+0x94>)
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	6153      	str	r3, [r2, #20]
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_GPIO_Init+0x94>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_GPIO_Init+0x94>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <MX_GPIO_Init+0x94>)
 8001724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001728:	6153      	str	r3, [r2, #20]
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <MX_GPIO_Init+0x94>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800173c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001740:	f001 fab8 	bl	8002cb4 <HAL_GPIO_WritePin>
	GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PA2 PA3 PA5 PA7
	 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_7
 8001744:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 8001748:	60fb      	str	r3, [r7, #12]
			| GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001760:	f001 f936 	bl	80029d0 <HAL_GPIO_Init>

}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000

08001770 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001778:	e7fe      	b.n	8001778 <Error_Handler+0x8>
	...

0800177c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_MspInit+0x44>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_MspInit+0x44>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6193      	str	r3, [r2, #24]
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_MspInit+0x44>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_MspInit+0x44>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_MspInit+0x44>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	61d3      	str	r3, [r2, #28]
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_MspInit+0x44>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a18      	ldr	r2, [pc, #96]	; (8001844 <HAL_CAN_MspInit+0x80>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d129      	bne.n	800183a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <HAL_CAN_MspInit+0x84>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a17      	ldr	r2, [pc, #92]	; (8001848 <HAL_CAN_MspInit+0x84>)
 80017ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_CAN_MspInit+0x84>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_CAN_MspInit+0x84>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_CAN_MspInit+0x84>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	6153      	str	r3, [r2, #20]
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_CAN_MspInit+0x84>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001816:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001828:	2309      	movs	r3, #9
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f001 f8cb 	bl	80029d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3728      	adds	r7, #40	; 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40006400 	.word	0x40006400
 8001848:	40021000 	.word	0x40021000

0800184c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185c:	d10c      	bne.n	8001878 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_TIM_Base_MspInit+0x5c>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <HAL_TIM_Base_MspInit+0x5c>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_TIM_Base_MspInit+0x5c>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001876:	e010      	b.n	800189a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <HAL_TIM_Base_MspInit+0x60>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10b      	bne.n	800189a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_TIM_Base_MspInit+0x5c>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_TIM_Base_MspInit+0x5c>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_TIM_Base_MspInit+0x5c>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40000400 	.word	0x40000400

080018b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d0:	d12f      	bne.n	8001932 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <HAL_TIM_MspPostInit+0x108>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	4a38      	ldr	r2, [pc, #224]	; (80019b8 <HAL_TIM_MspPostInit+0x108>)
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018dc:	6153      	str	r3, [r2, #20]
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_TIM_MspPostInit+0x108>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA9     ------> TIM2_CH3
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018ea:	2303      	movs	r3, #3
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018fa:	2301      	movs	r3, #1
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001908:	f001 f862 	bl	80029d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800190c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800191e:	230a      	movs	r3, #10
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f001 f850 	bl	80029d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001930:	e03d      	b.n	80019ae <HAL_TIM_MspPostInit+0xfe>
  else if(htim->Instance==TIM3)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	; (80019bc <HAL_TIM_MspPostInit+0x10c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d138      	bne.n	80019ae <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_TIM_MspPostInit+0x108>)
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <HAL_TIM_MspPostInit+0x108>)
 8001942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001946:	6153      	str	r3, [r2, #20]
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_TIM_MspPostInit+0x108>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_TIM_MspPostInit+0x108>)
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <HAL_TIM_MspPostInit+0x108>)
 800195a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800195e:	6153      	str	r3, [r2, #20]
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_TIM_MspPostInit+0x108>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800196c:	2350      	movs	r3, #80	; 0x50
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800197c:	2302      	movs	r3, #2
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198a:	f001 f821 	bl	80029d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800198e:	2303      	movs	r3, #3
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800199e:	2302      	movs	r3, #2
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4805      	ldr	r0, [pc, #20]	; (80019c0 <HAL_TIM_MspPostInit+0x110>)
 80019aa:	f001 f811 	bl	80029d0 <HAL_GPIO_Init>
}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	; 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40000400 	.word	0x40000400
 80019c0:	48000400 	.word	0x48000400

080019c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_UART_MspInit+0x7c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d127      	bne.n	8001a36 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_UART_MspInit+0x80>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	4a16      	ldr	r2, [pc, #88]	; (8001a44 <HAL_UART_MspInit+0x80>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6193      	str	r3, [r2, #24]
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_UART_MspInit+0x80>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_UART_MspInit+0x80>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_UART_MspInit+0x80>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a08:	6153      	str	r3, [r2, #20]
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_UART_MspInit+0x80>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a16:	23c0      	movs	r3, #192	; 0xc0
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a26:	2307      	movs	r3, #7
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <HAL_UART_MspInit+0x84>)
 8001a32:	f000 ffcd 	bl	80029d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	; 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40013800 	.word	0x40013800
 8001a44:	40021000 	.word	0x40021000
 8001a48:	48000400 	.word	0x48000400

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <NMI_Handler+0x4>

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <MemManage_Handler+0x4>

08001a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <BusFault_Handler+0x4>

08001a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <UsageFault_Handler+0x4>

08001a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a98:	f000 fb50 	bl	800213c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	e00a      	b.n	8001ac8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ab2:	f3af 8000 	nop.w
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	60ba      	str	r2, [r7, #8]
 8001abe:	b2ca      	uxtb	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbf0      	blt.n	8001ab2 <_read+0x12>
	}

return len;
 8001ad0:	687b      	ldr	r3, [r7, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b02:	605a      	str	r2, [r3, #4]
	return 0;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_isatty>:

int _isatty(int file)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
	return 1;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	return 0;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <_sbrk+0x5c>)
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <_sbrk+0x60>)
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <_sbrk+0x64>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <_sbrk+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d207      	bcs.n	8001b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b74:	f003 fe62 	bl	800583c <__errno>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e009      	b.n	8001b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <_sbrk+0x64>)
 8001b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20003000 	.word	0x20003000
 8001ba4:	00000400 	.word	0x00000400
 8001ba8:	200000b4 	.word	0x200000b4
 8001bac:	20000298 	.word	0x20000298

08001bb0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <SystemInit+0x20>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <SystemInit+0x20>)
 8001bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <xfputc>:

void xfputc (			/* Put a character to the specified device */
	void(*func)(int),	/* Pointer to the output function (null:strptr) */
	int chr				/* Character to be output */
)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
	if (XF_CRLF && chr == '\n') xfputc(func, '\r');	/* CR -> CRLF */
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b0a      	cmp	r3, #10
 8001be2:	d103      	bne.n	8001bec <xfputc+0x18>
 8001be4:	210d      	movs	r1, #13
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fff4 	bl	8001bd4 <xfputc>

	if (func) {
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <xfputc+0x26>
		func(chr);		/* Write a character to the output device */
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6838      	ldr	r0, [r7, #0]
 8001bf6:	4798      	blx	r3
	} else if (strptr) {
		 *strptr++ = chr;	/* Write a character to the memory */
	}
}
 8001bf8:	e00b      	b.n	8001c12 <xfputc+0x3e>
	} else if (strptr) {
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <xfputc+0x48>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <xfputc+0x3e>
		 *strptr++ = chr;	/* Write a character to the memory */
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <xfputc+0x48>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	4904      	ldr	r1, [pc, #16]	; (8001c1c <xfputc+0x48>)
 8001c0a:	600a      	str	r2, [r1, #0]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200000b8 	.word	0x200000b8

08001c20 <xvfprintf>:
static void xvfprintf (
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b098      	sub	sp, #96	; 0x60
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
	long v;
	unsigned long vs;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if (!c) break;				/* End of format? */
 8001c38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 81ee 	beq.w	800201e <xvfprintf+0x3fe>
		if (c != '%') {				/* Pass it through if not a % sequense */
 8001c42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001c46:	2b25      	cmp	r3, #37	; 0x25
 8001c48:	d006      	beq.n	8001c58 <xvfprintf+0x38>
			xfputc(func, c); continue;
 8001c4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001c4e:	4619      	mov	r1, r3
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7ff ffbf 	bl	8001bd4 <xfputc>
 8001c56:	e1e1      	b.n	800201c <xvfprintf+0x3fc>
		}
		f = w = 0;			 		/* Clear parms */
 8001c58:	2300      	movs	r3, #0
 8001c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8001c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
		pad = ' '; prec = -1;
 8001c60:	2320      	movs	r3, #32
 8001c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	647b      	str	r3, [r7, #68]	; 0x44
		c = *fmt++;					/* Get first char of the sequense */
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	60ba      	str	r2, [r7, #8]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if (c == '0') {				/* Flag: left '0' padded */
 8001c78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001c7c:	2b30      	cmp	r3, #48	; 0x30
 8001c7e:	d109      	bne.n	8001c94 <xvfprintf+0x74>
			pad = '0'; c = *fmt++;
 8001c80:	2330      	movs	r3, #48	; 0x30
 8001c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	60ba      	str	r2, [r7, #8]
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001c92:	e00b      	b.n	8001cac <xvfprintf+0x8c>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8001c94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001c98:	2b2d      	cmp	r3, #45	; 0x2d
 8001c9a:	d107      	bne.n	8001cac <xvfprintf+0x8c>
				f = 2; c = *fmt++;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60ba      	str	r2, [r7, #8]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 8001cac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8001cb2:	d126      	bne.n	8001d02 <xvfprintf+0xe2>
			n = va_arg(arp, int);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	1d1a      	adds	r2, r3, #4
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	64bb      	str	r3, [r7, #72]	; 0x48
			if (n < 0) {			/* Flag: left justified */
 8001cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da04      	bge.n	8001cce <xvfprintf+0xae>
				n = 0 - n; f = 2;
 8001cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cc6:	425b      	negs	r3, r3
 8001cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cca:	2302      	movs	r3, #2
 8001ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			w = n; c = *fmt++;
 8001cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	60ba      	str	r2, [r7, #8]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001cde:	e018      	b.n	8001d12 <xvfprintf+0xf2>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 8001ce0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	461a      	mov	r2, r3
 8001cec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3b30      	subs	r3, #48	; 0x30
 8001cf4:	653b      	str	r3, [r7, #80]	; 0x50
				c = *fmt++;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	60ba      	str	r2, [r7, #8]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			while (c >= '0' && c <= '9') {	/* Minimum width */
 8001d02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d06:	2b2f      	cmp	r3, #47	; 0x2f
 8001d08:	d903      	bls.n	8001d12 <xvfprintf+0xf2>
 8001d0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d0e:	2b39      	cmp	r3, #57	; 0x39
 8001d10:	d9e6      	bls.n	8001ce0 <xvfprintf+0xc0>
			}
		}
		if (c == '.') {				/* Precision */
 8001d12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d16:	2b2e      	cmp	r3, #46	; 0x2e
 8001d18:	d131      	bne.n	8001d7e <xvfprintf+0x15e>
			c = *fmt++;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	60ba      	str	r2, [r7, #8]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			if (c == '*') {				/* Precision from an argument */
 8001d26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8001d2c:	d10b      	bne.n	8001d46 <xvfprintf+0x126>
				prec = va_arg(arp, int);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	1d1a      	adds	r2, r3, #4
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	647b      	str	r3, [r7, #68]	; 0x44
				c = *fmt++;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	60ba      	str	r2, [r7, #8]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001d44:	e01b      	b.n	8001d7e <xvfprintf+0x15e>
			} else {
				prec = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	647b      	str	r3, [r7, #68]	; 0x44
				while (c >= '0' && c <= '9') {
 8001d4a:	e010      	b.n	8001d6e <xvfprintf+0x14e>
					prec = prec * 10 + c - '0';
 8001d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	461a      	mov	r2, r3
 8001d58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b30      	subs	r3, #48	; 0x30
 8001d60:	647b      	str	r3, [r7, #68]	; 0x44
					c = *fmt++;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	60ba      	str	r2, [r7, #8]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				while (c >= '0' && c <= '9') {
 8001d6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d72:	2b2f      	cmp	r3, #47	; 0x2f
 8001d74:	d903      	bls.n	8001d7e <xvfprintf+0x15e>
 8001d76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d7a:	2b39      	cmp	r3, #57	; 0x39
 8001d7c:	d9e6      	bls.n	8001d4c <xvfprintf+0x12c>
				}
			}
		}
		if (c == 'l') {		/* Prefix: Size is long */
 8001d7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d82:	2b6c      	cmp	r3, #108	; 0x6c
 8001d84:	d109      	bne.n	8001d9a <xvfprintf+0x17a>
			f |= 4; c = *fmt++;
 8001d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	60ba      	str	r2, [r7, #8]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			if (c == 'l') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 8001d9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 813f 	beq.w	8002022 <xvfprintf+0x402>
		switch (c) {				/* Type is... */
 8001da4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001da8:	3b58      	subs	r3, #88	; 0x58
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	f200 8096 	bhi.w	8001edc <xvfprintf+0x2bc>
 8001db0:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <xvfprintf+0x198>)
 8001db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db6:	bf00      	nop
 8001db8:	08001e4f 	.word	0x08001e4f
 8001dbc:	08001edd 	.word	0x08001edd
 8001dc0:	08001edd 	.word	0x08001edd
 8001dc4:	08001edd 	.word	0x08001edd
 8001dc8:	08001edd 	.word	0x08001edd
 8001dcc:	08001edd 	.word	0x08001edd
 8001dd0:	08001edd 	.word	0x08001edd
 8001dd4:	08001edd 	.word	0x08001edd
 8001dd8:	08001edd 	.word	0x08001edd
 8001ddc:	08001edd 	.word	0x08001edd
 8001de0:	08001e3d 	.word	0x08001e3d
 8001de4:	08001e55 	.word	0x08001e55
 8001de8:	08001e49 	.word	0x08001e49
 8001dec:	08001edd 	.word	0x08001edd
 8001df0:	08001edd 	.word	0x08001edd
 8001df4:	08001edd 	.word	0x08001edd
 8001df8:	08001edd 	.word	0x08001edd
 8001dfc:	08001edd 	.word	0x08001edd
 8001e00:	08001edd 	.word	0x08001edd
 8001e04:	08001edd 	.word	0x08001edd
 8001e08:	08001edd 	.word	0x08001edd
 8001e0c:	08001edd 	.word	0x08001edd
 8001e10:	08001edd 	.word	0x08001edd
 8001e14:	08001e43 	.word	0x08001e43
 8001e18:	08001edd 	.word	0x08001edd
 8001e1c:	08001edd 	.word	0x08001edd
 8001e20:	08001edd 	.word	0x08001edd
 8001e24:	08001e69 	.word	0x08001e69
 8001e28:	08001edd 	.word	0x08001edd
 8001e2c:	08001e49 	.word	0x08001e49
 8001e30:	08001edd 	.word	0x08001edd
 8001e34:	08001edd 	.word	0x08001edd
 8001e38:	08001e4f 	.word	0x08001e4f
		case 'b':					/* Unsigned binary */
			r = 2; break;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e40:	e053      	b.n	8001eea <xvfprintf+0x2ca>
		case 'o':					/* Unsigned octal */
			r = 8; break;
 8001e42:	2308      	movs	r3, #8
 8001e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e46:	e050      	b.n	8001eea <xvfprintf+0x2ca>
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
 8001e48:	230a      	movs	r3, #10
 8001e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e4c:	e04d      	b.n	8001eea <xvfprintf+0x2ca>
		case 'x':					/* Hexdecimal (abc) */
		case 'X':					/* Hexdecimal (ABC) */
			r = 16; break;
 8001e4e:	2310      	movs	r3, #16
 8001e50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e52:	e04a      	b.n	8001eea <xvfprintf+0x2ca>
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	1d1a      	adds	r2, r3, #4
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	4619      	mov	r1, r3
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f7ff feb7 	bl	8001bd4 <xfputc>
 8001e66:	e0d9      	b.n	800201c <xvfprintf+0x3fc>
		case 's':					/* String */
			p = va_arg(arp, char*);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	1d1a      	adds	r2, r3, #4
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	63fb      	str	r3, [r7, #60]	; 0x3c
			for (j = strlen(p); !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 8001e72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e74:	f7fe f9ac 	bl	80001d0 <strlen>
 8001e78:	6578      	str	r0, [r7, #84]	; 0x54
 8001e7a:	e008      	b.n	8001e8e <xvfprintf+0x26e>
 8001e7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e80:	4619      	mov	r1, r3
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f7ff fea6 	bl	8001bd4 <xfputc>
 8001e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	657b      	str	r3, [r7, #84]	; 0x54
 8001e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10c      	bne.n	8001eb2 <xvfprintf+0x292>
 8001e98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d3ed      	bcc.n	8001e7c <xvfprintf+0x25c>
			while (*p && prec--) xfputc(func, *p++);/* String */
 8001ea0:	e007      	b.n	8001eb2 <xvfprintf+0x292>
 8001ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fe91 	bl	8001bd4 <xfputc>
 8001eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <xvfprintf+0x2ae>
 8001eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ebc:	1e5a      	subs	r2, r3, #1
 8001ebe:	647a      	str	r2, [r7, #68]	; 0x44
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ee      	bne.n	8001ea2 <xvfprintf+0x282>
			while (j++ < w) xfputc(func, ' ');		/* Right pads */
 8001ec4:	e003      	b.n	8001ece <xvfprintf+0x2ae>
 8001ec6:	2120      	movs	r1, #32
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f7ff fe83 	bl	8001bd4 <xfputc>
 8001ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	657a      	str	r2, [r7, #84]	; 0x54
 8001ed4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d8f5      	bhi.n	8001ec6 <xvfprintf+0x2a6>
			continue;
 8001eda:	e09f      	b.n	800201c <xvfprintf+0x3fc>
			do xfputc(func, *p++); while (*p);	/* Value */
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
			continue;
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
 8001edc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7ff fe76 	bl	8001bd4 <xfputc>
 8001ee8:	e098      	b.n	800201c <xvfprintf+0x3fc>
			} else {		/* int/short/char argument */
				v = (c == 'd') ? (XF_LLI_t)va_arg(arp, int) : (XF_LLI_t)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 8001eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <xvfprintf+0x2e0>
			v = va_arg(arp, long);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	1d1a      	adds	r2, r3, #4
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34
 8001efe:	e00d      	b.n	8001f1c <xvfprintf+0x2fc>
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 8001f00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001f04:	2b64      	cmp	r3, #100	; 0x64
 8001f06:	d104      	bne.n	8001f12 <xvfprintf+0x2f2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	1d1a      	adds	r2, r3, #4
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	e003      	b.n	8001f1a <xvfprintf+0x2fa>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	1d1a      	adds	r2, r3, #4
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	637b      	str	r3, [r7, #52]	; 0x34
		}
#endif
		if (c == 'd' && v < 0) {	/* Negative value? */
 8001f1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001f20:	2b64      	cmp	r3, #100	; 0x64
 8001f22:	d109      	bne.n	8001f38 <xvfprintf+0x318>
 8001f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	da06      	bge.n	8001f38 <xvfprintf+0x318>
			v = 0 - v; f |= 1;
 8001f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2c:	425b      	negs	r3, r3
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		i = 0; vs = v;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
		do {	/* Make value string */
			d = (char)(vs % r); vs /= r;
 8001f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f44:	fbb3 f2f2 	udiv	r2, r3, r2
 8001f48:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001f4a:	fb01 f202 	mul.w	r2, r1, r2
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8001f5e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001f62:	2b09      	cmp	r3, #9
 8001f64:	d90b      	bls.n	8001f7e <xvfprintf+0x35e>
 8001f66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001f6a:	2b78      	cmp	r3, #120	; 0x78
 8001f6c:	d101      	bne.n	8001f72 <xvfprintf+0x352>
 8001f6e:	2227      	movs	r2, #39	; 0x27
 8001f70:	e000      	b.n	8001f74 <xvfprintf+0x354>
 8001f72:	2207      	movs	r2, #7
 8001f74:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001f78:	4413      	add	r3, r2
 8001f7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			str[i++] = d + '0';
 8001f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f84:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8001f88:	3230      	adds	r2, #48	; 0x30
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001f90:	440b      	add	r3, r1
 8001f92:	f803 2c50 	strb.w	r2, [r3, #-80]
		} while (vs != 0 && i < sizeof str);
 8001f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <xvfprintf+0x382>
 8001f9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f9e:	2b1f      	cmp	r3, #31
 8001fa0:	d9ce      	bls.n	8001f40 <xvfprintf+0x320>
		if (f & 1) str[i++] = '-';				/* Sign */
 8001fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <xvfprintf+0x39e>
 8001fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fb2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fb6:	4413      	add	r3, r2
 8001fb8:	222d      	movs	r2, #45	; 0x2d
 8001fba:	f803 2c50 	strb.w	r2, [r3, #-80]
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 8001fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc0:	657b      	str	r3, [r7, #84]	; 0x54
 8001fc2:	e008      	b.n	8001fd6 <xvfprintf+0x3b6>
 8001fc4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001fc8:	4619      	mov	r1, r3
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff fe02 	bl	8001bd4 <xfputc>
 8001fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	657b      	str	r3, [r7, #84]	; 0x54
 8001fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <xvfprintf+0x3c8>
 8001fe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d3ed      	bcc.n	8001fc4 <xvfprintf+0x3a4>
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
 8001fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fea:	3b01      	subs	r3, #1
 8001fec:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fee:	f107 0210 	add.w	r2, r7, #16
 8001ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff4:	4413      	add	r3, r2
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f7ff fdea 	bl	8001bd4 <xfputc>
 8002000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <xvfprintf+0x3c8>
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
 8002006:	e003      	b.n	8002010 <xvfprintf+0x3f0>
 8002008:	2120      	movs	r1, #32
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff fde2 	bl	8001bd4 <xfputc>
 8002010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	657a      	str	r2, [r7, #84]	; 0x54
 8002016:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002018:	429a      	cmp	r2, r3
 800201a:	d8f5      	bhi.n	8002008 <xvfprintf+0x3e8>
		c = *fmt++;					/* Get a format character */
 800201c:	e606      	b.n	8001c2c <xvfprintf+0xc>
		if (!c) break;				/* End of format? */
 800201e:	bf00      	nop
 8002020:	e000      	b.n	8002024 <xvfprintf+0x404>
		if (!c) break;				/* End of format? */
 8002022:	bf00      	nop
	}
}
 8002024:	bf00      	nop
 8002026:	3760      	adds	r7, #96	; 0x60
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 800202c:	b40f      	push	{r0, r1, r2, r3}
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	607b      	str	r3, [r7, #4]
	xvfprintf(xfunc_output, fmt, arp);
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <xprintf+0x2c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6939      	ldr	r1, [r7, #16]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fdec 	bl	8001c20 <xvfprintf>
	va_end(arp);
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002052:	b004      	add	sp, #16
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000027c 	.word	0x2000027c

0800205c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800205c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002094 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002060:	480d      	ldr	r0, [pc, #52]	; (8002098 <LoopForever+0x6>)
  ldr r1, =_edata
 8002062:	490e      	ldr	r1, [pc, #56]	; (800209c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <LoopForever+0xe>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002078:	4c0b      	ldr	r4, [pc, #44]	; (80020a8 <LoopForever+0x16>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002086:	f7ff fd93 	bl	8001bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208a:	f003 fbdd 	bl	8005848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800208e:	f7ff f827 	bl	80010e0 <main>

08002092 <LoopForever>:

LoopForever:
    b LoopForever
 8002092:	e7fe      	b.n	8002092 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002094:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800209c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80020a0:	080068c8 	.word	0x080068c8
  ldr r2, =_sbss
 80020a4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80020a8:	20000294 	.word	0x20000294

080020ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <ADC1_2_IRQHandler>
	...

080020b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <HAL_Init+0x28>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a07      	ldr	r2, [pc, #28]	; (80020d8 <HAL_Init+0x28>)
 80020ba:	f043 0310 	orr.w	r3, r3, #16
 80020be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c0:	2003      	movs	r0, #3
 80020c2:	f000 fc51 	bl	8002968 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 f808 	bl	80020dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020cc:	f7ff fb56 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40022000 	.word	0x40022000

080020dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_InitTick+0x54>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_InitTick+0x58>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fc5b 	bl	80029b6 <HAL_SYSTICK_Config>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e00e      	b.n	8002128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0f      	cmp	r3, #15
 800210e:	d80a      	bhi.n	8002126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002110:	2200      	movs	r2, #0
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f000 fc31 	bl	800297e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <HAL_InitTick+0x5c>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e000      	b.n	8002128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000010 	.word	0x20000010
 8002134:	20000018 	.word	0x20000018
 8002138:	20000014 	.word	0x20000014

0800213c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_IncTick+0x20>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_IncTick+0x24>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4413      	add	r3, r2
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_IncTick+0x24>)
 800214e:	6013      	str	r3, [r2, #0]
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000018 	.word	0x20000018
 8002160:	20000280 	.word	0x20000280

08002164 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return uwTick;  
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_GetTick+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000280 	.word	0x20000280

0800217c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0ed      	b.n	800236a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fb12 	bl	80017c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0202 	bic.w	r2, r2, #2
 80021ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021b0:	f7ff ffd8 	bl	8002164 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021b6:	e012      	b.n	80021de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021b8:	f7ff ffd4 	bl	8002164 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b0a      	cmp	r3, #10
 80021c4:	d90b      	bls.n	80021de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2205      	movs	r2, #5
 80021d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0c5      	b.n	800236a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e5      	bne.n	80021b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021fc:	f7ff ffb2 	bl	8002164 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002202:	e012      	b.n	800222a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002204:	f7ff ffae 	bl	8002164 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b0a      	cmp	r3, #10
 8002210:	d90b      	bls.n	800222a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2205      	movs	r2, #5
 8002222:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e09f      	b.n	800236a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0e5      	beq.n	8002204 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7e1b      	ldrb	r3, [r3, #24]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d108      	bne.n	8002252 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e007      	b.n	8002262 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002260:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7e5b      	ldrb	r3, [r3, #25]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d108      	bne.n	800227c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e007      	b.n	800228c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7e9b      	ldrb	r3, [r3, #26]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d108      	bne.n	80022a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0220 	orr.w	r2, r2, #32
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e007      	b.n	80022b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0220 	bic.w	r2, r2, #32
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7edb      	ldrb	r3, [r3, #27]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d108      	bne.n	80022d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0210 	bic.w	r2, r2, #16
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e007      	b.n	80022e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0210 	orr.w	r2, r2, #16
 80022de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7f1b      	ldrb	r3, [r3, #28]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d108      	bne.n	80022fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0208 	orr.w	r2, r2, #8
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e007      	b.n	800230a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0208 	bic.w	r2, r2, #8
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7f5b      	ldrb	r3, [r3, #29]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d108      	bne.n	8002324 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0204 	orr.w	r2, r2, #4
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	e007      	b.n	8002334 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	ea42 0103 	orr.w	r1, r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	1e5a      	subs	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002372:	b480      	push	{r7}
 8002374:	b087      	sub	sp, #28
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002388:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800238a:	7cfb      	ldrb	r3, [r7, #19]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d003      	beq.n	8002398 <HAL_CAN_ConfigFilter+0x26>
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b02      	cmp	r3, #2
 8002394:	f040 80aa 	bne.w	80024ec <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	2201      	movs	r2, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d123      	bne.n	800241a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	43db      	mvns	r3, r3
 80023dc:	401a      	ands	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3248      	adds	r2, #72	; 0x48
 80023fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800240e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002410:	6979      	ldr	r1, [r7, #20]
 8002412:	3348      	adds	r3, #72	; 0x48
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d122      	bne.n	8002468 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	431a      	orrs	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002442:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	3248      	adds	r2, #72	; 0x48
 8002448:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800245c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800245e:	6979      	ldr	r1, [r7, #20]
 8002460:	3348      	adds	r3, #72	; 0x48
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d109      	bne.n	8002484 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	43db      	mvns	r3, r3
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002482:	e007      	b.n	8002494 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	431a      	orrs	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d109      	bne.n	80024b0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80024ae:	e007      	b.n	80024c0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d107      	bne.n	80024d8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024de:	f023 0201 	bic.w	r2, r3, #1
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e006      	b.n	80024fa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
  }
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d12e      	bne.n	8002578 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2202      	movs	r2, #2
 800251e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0201 	bic.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002532:	f7ff fe17 	bl	8002164 <HAL_GetTick>
 8002536:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002538:	e012      	b.n	8002560 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800253a:	f7ff fe13 	bl	8002164 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b0a      	cmp	r3, #10
 8002546:	d90b      	bls.n	8002560 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2205      	movs	r2, #5
 8002558:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e012      	b.n	8002586 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1e5      	bne.n	800253a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	e006      	b.n	8002586 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
  }
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800258e:	b480      	push	{r7}
 8002590:	b087      	sub	sp, #28
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d003      	beq.n	80025b2 <HAL_CAN_GetRxMessage+0x24>
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	f040 80f3 	bne.w	8002798 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10e      	bne.n	80025d6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d116      	bne.n	80025f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0e7      	b.n	80027a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0d8      	b.n	80027a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	331b      	adds	r3, #27
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	4413      	add	r3, r2
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0204 	and.w	r2, r3, #4
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10c      	bne.n	800262c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	331b      	adds	r3, #27
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	4413      	add	r3, r2
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0d5b      	lsrs	r3, r3, #21
 8002622:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e00b      	b.n	8002644 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	331b      	adds	r3, #27
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	4413      	add	r3, r2
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	08db      	lsrs	r3, r3, #3
 800263c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	331b      	adds	r3, #27
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	4413      	add	r3, r2
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0202 	and.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	331b      	adds	r3, #27
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	4413      	add	r3, r2
 8002666:	3304      	adds	r3, #4
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 020f 	and.w	r2, r3, #15
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	331b      	adds	r3, #27
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	4413      	add	r3, r2
 800267e:	3304      	adds	r3, #4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	b2da      	uxtb	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	331b      	adds	r3, #27
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	4413      	add	r3, r2
 8002696:	3304      	adds	r3, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	0c1b      	lsrs	r3, r3, #16
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0a1a      	lsrs	r2, r3, #8
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	4413      	add	r3, r2
 80026dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	0c1a      	lsrs	r2, r3, #16
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	3302      	adds	r3, #2
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0e1a      	lsrs	r2, r3, #24
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	3303      	adds	r3, #3
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	4413      	add	r3, r2
 8002710:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3304      	adds	r3, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	4413      	add	r3, r2
 8002728:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0a1a      	lsrs	r2, r3, #8
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	3305      	adds	r3, #5
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	4413      	add	r3, r2
 8002742:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	0c1a      	lsrs	r2, r3, #16
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	3306      	adds	r3, #6
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	4413      	add	r3, r2
 800275c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0e1a      	lsrs	r2, r3, #24
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	3307      	adds	r3, #7
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0220 	orr.w	r2, r2, #32
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	e007      	b.n	8002794 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0220 	orr.w	r2, r2, #32
 8002792:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e006      	b.n	80027a6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
  }
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027c8:	7afb      	ldrb	r3, [r7, #11]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d002      	beq.n	80027d4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80027ce:	7afb      	ldrb	r3, [r7, #11]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d10f      	bne.n	80027f4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	e005      	b.n	80027f4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80027f4:	68fb      	ldr	r3, [r7, #12]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <__NVIC_SetPriorityGrouping>:
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800282c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	60d3      	str	r3, [r2, #12]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_GetPriorityGrouping>:
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <__NVIC_GetPriorityGrouping+0x18>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0307 	and.w	r3, r3, #7
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_SetPriority>:
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	db0a      	blt.n	8002892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	490c      	ldr	r1, [pc, #48]	; (80028b4 <__NVIC_SetPriority+0x4c>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	440b      	add	r3, r1
 800288c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002890:	e00a      	b.n	80028a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4908      	ldr	r1, [pc, #32]	; (80028b8 <__NVIC_SetPriority+0x50>)
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	3b04      	subs	r3, #4
 80028a0:	0112      	lsls	r2, r2, #4
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	440b      	add	r3, r1
 80028a6:	761a      	strb	r2, [r3, #24]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000e100 	.word	0xe000e100
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <NVIC_EncodePriority>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f1c3 0307 	rsb	r3, r3, #7
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	bf28      	it	cs
 80028da:	2304      	movcs	r3, #4
 80028dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d902      	bls.n	80028ec <NVIC_EncodePriority+0x30>
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3b03      	subs	r3, #3
 80028ea:	e000      	b.n	80028ee <NVIC_EncodePriority+0x32>
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	401a      	ands	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002904:	f04f 31ff 	mov.w	r1, #4294967295
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	43d9      	mvns	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	4313      	orrs	r3, r2
}
 8002916:	4618      	mov	r0, r3
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <SysTick_Config>:
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002934:	d301      	bcc.n	800293a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002936:	2301      	movs	r3, #1
 8002938:	e00f      	b.n	800295a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <SysTick_Config+0x40>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002942:	210f      	movs	r1, #15
 8002944:	f04f 30ff 	mov.w	r0, #4294967295
 8002948:	f7ff ff8e 	bl	8002868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <SysTick_Config+0x40>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002952:	4b04      	ldr	r3, [pc, #16]	; (8002964 <SysTick_Config+0x40>)
 8002954:	2207      	movs	r2, #7
 8002956:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	e000e010 	.word	0xe000e010

08002968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff ff47 	bl	8002804 <__NVIC_SetPriorityGrouping>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002990:	f7ff ff5c 	bl	800284c <__NVIC_GetPriorityGrouping>
 8002994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f7ff ff8e 	bl	80028bc <NVIC_EncodePriority>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff5d 	bl	8002868 <__NVIC_SetPriority>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ffb0 	bl	8002924 <SysTick_Config>
 80029c4:	4603      	mov	r3, r0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029de:	e14e      	b.n	8002c7e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8140 	beq.w	8002c78 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d00b      	beq.n	8002a18 <HAL_GPIO_Init+0x48>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d007      	beq.n	8002a18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a0c:	2b11      	cmp	r3, #17
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b12      	cmp	r3, #18
 8002a16:	d130      	bne.n	8002a7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a4e:	2201      	movs	r2, #1
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	f003 0201 	and.w	r2, r3, #1
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0xea>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b12      	cmp	r3, #18
 8002ab8:	d123      	bne.n	8002b02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	08da      	lsrs	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3208      	adds	r2, #8
 8002ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	220f      	movs	r2, #15
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	08da      	lsrs	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3208      	adds	r2, #8
 8002afc:	6939      	ldr	r1, [r7, #16]
 8002afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0203 	and.w	r2, r3, #3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 809a 	beq.w	8002c78 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b44:	4b55      	ldr	r3, [pc, #340]	; (8002c9c <HAL_GPIO_Init+0x2cc>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	4a54      	ldr	r2, [pc, #336]	; (8002c9c <HAL_GPIO_Init+0x2cc>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	6193      	str	r3, [r2, #24]
 8002b50:	4b52      	ldr	r3, [pc, #328]	; (8002c9c <HAL_GPIO_Init+0x2cc>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b5c:	4a50      	ldr	r2, [pc, #320]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	3302      	adds	r3, #2
 8002b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	220f      	movs	r2, #15
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b86:	d013      	beq.n	8002bb0 <HAL_GPIO_Init+0x1e0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a46      	ldr	r2, [pc, #280]	; (8002ca4 <HAL_GPIO_Init+0x2d4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00d      	beq.n	8002bac <HAL_GPIO_Init+0x1dc>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a45      	ldr	r2, [pc, #276]	; (8002ca8 <HAL_GPIO_Init+0x2d8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <HAL_GPIO_Init+0x1d8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a44      	ldr	r2, [pc, #272]	; (8002cac <HAL_GPIO_Init+0x2dc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d101      	bne.n	8002ba4 <HAL_GPIO_Init+0x1d4>
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e006      	b.n	8002bb2 <HAL_GPIO_Init+0x1e2>
 8002ba4:	2305      	movs	r3, #5
 8002ba6:	e004      	b.n	8002bb2 <HAL_GPIO_Init+0x1e2>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e002      	b.n	8002bb2 <HAL_GPIO_Init+0x1e2>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <HAL_GPIO_Init+0x1e2>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	f002 0203 	and.w	r2, r2, #3
 8002bb8:	0092      	lsls	r2, r2, #2
 8002bba:	4093      	lsls	r3, r2
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bc2:	4937      	ldr	r1, [pc, #220]	; (8002ca0 <HAL_GPIO_Init+0x2d0>)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	3302      	adds	r3, #2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd0:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <HAL_GPIO_Init+0x2e0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bf4:	4a2e      	ldr	r2, [pc, #184]	; (8002cb0 <HAL_GPIO_Init+0x2e0>)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bfa:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_GPIO_Init+0x2e0>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	43db      	mvns	r3, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c1e:	4a24      	ldr	r2, [pc, #144]	; (8002cb0 <HAL_GPIO_Init+0x2e0>)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c24:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <HAL_GPIO_Init+0x2e0>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c48:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <HAL_GPIO_Init+0x2e0>)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_GPIO_Init+0x2e0>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c72:	4a0f      	ldr	r2, [pc, #60]	; (8002cb0 <HAL_GPIO_Init+0x2e0>)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f47f aea9 	bne.w	80029e0 <HAL_GPIO_Init+0x10>
  }
}
 8002c8e:	bf00      	nop
 8002c90:	bf00      	nop
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	48000400 	.word	0x48000400
 8002ca8:	48000800 	.word	0x48000800
 8002cac:	48000c00 	.word	0x48000c00
 8002cb0:	40010400 	.word	0x40010400

08002cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc4:	787b      	ldrb	r3, [r7, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cd0:	e002      	b.n	8002cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf0:	1d3b      	adds	r3, r7, #4
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f000 bef4 	b.w	8003ae6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 816a 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d0e:	4bb3      	ldr	r3, [pc, #716]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d00c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d1a:	4bb0      	ldr	r3, [pc, #704]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d159      	bne.n	8002dda <HAL_RCC_OscConfig+0xf6>
 8002d26:	4bad      	ldr	r3, [pc, #692]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d152      	bne.n	8002dda <HAL_RCC_OscConfig+0xf6>
 8002d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d38:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d102      	bne.n	8002d66 <HAL_RCC_OscConfig+0x82>
 8002d60:	4b9e      	ldr	r3, [pc, #632]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	e015      	b.n	8002d92 <HAL_RCC_OscConfig+0xae>
 8002d66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d6a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d7e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d82:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d8e:	4b93      	ldr	r3, [pc, #588]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d96:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d9a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d9e:	fa92 f2a2 	rbit	r2, r2
 8002da2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002da6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002daa:	fab2 f282 	clz	r2, r2
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	f042 0220 	orr.w	r2, r2, #32
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	f002 021f 	and.w	r2, r2, #31
 8002dba:	2101      	movs	r1, #1
 8002dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 810c 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x2fc>
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f040 8106 	bne.w	8002fe0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f000 be86 	b.w	8003ae6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de4:	d106      	bne.n	8002df4 <HAL_RCC_OscConfig+0x110>
 8002de6:	4b7d      	ldr	r3, [pc, #500]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a7c      	ldr	r2, [pc, #496]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e030      	b.n	8002e56 <HAL_RCC_OscConfig+0x172>
 8002df4:	1d3b      	adds	r3, r7, #4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x134>
 8002dfe:	4b77      	ldr	r3, [pc, #476]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a76      	ldr	r2, [pc, #472]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b74      	ldr	r3, [pc, #464]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a73      	ldr	r2, [pc, #460]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e01e      	b.n	8002e56 <HAL_RCC_OscConfig+0x172>
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e22:	d10c      	bne.n	8002e3e <HAL_RCC_OscConfig+0x15a>
 8002e24:	4b6d      	ldr	r3, [pc, #436]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a6c      	ldr	r2, [pc, #432]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a69      	ldr	r2, [pc, #420]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	e00b      	b.n	8002e56 <HAL_RCC_OscConfig+0x172>
 8002e3e:	4b67      	ldr	r3, [pc, #412]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a66      	ldr	r2, [pc, #408]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b64      	ldr	r3, [pc, #400]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a63      	ldr	r2, [pc, #396]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e56:	4b61      	ldr	r3, [pc, #388]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	f023 020f 	bic.w	r2, r3, #15
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	495d      	ldr	r1, [pc, #372]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d059      	beq.n	8002f28 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7ff f976 	bl	8002164 <HAL_GetTick>
 8002e78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e7e:	f7ff f971 	bl	8002164 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d902      	bls.n	8002e94 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	f000 be29 	b.w	8003ae6 <HAL_RCC_OscConfig+0xe02>
 8002e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e98:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ea8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d102      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x1e2>
 8002ec0:	4b46      	ldr	r3, [pc, #280]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	e015      	b.n	8002ef2 <HAL_RCC_OscConfig+0x20e>
 8002ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ede:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ee2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002eee:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ef6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002efa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002efe:	fa92 f2a2 	rbit	r2, r2
 8002f02:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002f06:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002f0a:	fab2 f282 	clz	r2, r2
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	f042 0220 	orr.w	r2, r2, #32
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f002 021f 	and.w	r2, r2, #31
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0ab      	beq.n	8002e7e <HAL_RCC_OscConfig+0x19a>
 8002f26:	e05c      	b.n	8002fe2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7ff f91c 	bl	8002164 <HAL_GetTick>
 8002f2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f32:	f7ff f917 	bl	8002164 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d902      	bls.n	8002f48 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	f000 bdcf 	b.w	8003ae6 <HAL_RCC_OscConfig+0xe02>
 8002f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f4c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f5c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d102      	bne.n	8002f7a <HAL_RCC_OscConfig+0x296>
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	e015      	b.n	8002fa6 <HAL_RCC_OscConfig+0x2c2>
 8002f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f7e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f92:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f96:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <HAL_RCC_OscConfig+0x2f8>)
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002faa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002fae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002fb2:	fa92 f2a2 	rbit	r2, r2
 8002fb6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002fba:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002fbe:	fab2 f282 	clz	r2, r2
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	f042 0220 	orr.w	r2, r2, #32
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	f002 021f 	and.w	r2, r2, #31
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ab      	bne.n	8002f32 <HAL_RCC_OscConfig+0x24e>
 8002fda:	e002      	b.n	8002fe2 <HAL_RCC_OscConfig+0x2fe>
 8002fdc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 816f 	beq.w	80032d0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ff2:	4bd0      	ldr	r3, [pc, #832]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ffe:	4bcd      	ldr	r3, [pc, #820]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b08      	cmp	r3, #8
 8003008:	d16c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x400>
 800300a:	4bca      	ldr	r3, [pc, #808]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d166      	bne.n	80030e4 <HAL_RCC_OscConfig+0x400>
 8003016:	2302      	movs	r3, #2
 8003018:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003028:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302c:	fab3 f383 	clz	r3, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d102      	bne.n	8003046 <HAL_RCC_OscConfig+0x362>
 8003040:	4bbc      	ldr	r3, [pc, #752]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	e013      	b.n	800306e <HAL_RCC_OscConfig+0x38a>
 8003046:	2302      	movs	r3, #2
 8003048:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003058:	2302      	movs	r3, #2
 800305a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800305e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800306a:	4bb2      	ldr	r3, [pc, #712]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2202      	movs	r2, #2
 8003070:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003074:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003078:	fa92 f2a2 	rbit	r2, r2
 800307c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003080:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003084:	fab2 f282 	clz	r2, r2
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	f042 0220 	orr.w	r2, r2, #32
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	f002 021f 	and.w	r2, r2, #31
 8003094:	2101      	movs	r1, #1
 8003096:	fa01 f202 	lsl.w	r2, r1, r2
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <HAL_RCC_OscConfig+0x3cc>
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d002      	beq.n	80030b0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f000 bd1b 	b.w	8003ae6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4ba0      	ldr	r3, [pc, #640]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	1d3b      	adds	r3, r7, #4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	21f8      	movs	r1, #248	; 0xf8
 80030c0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030c8:	fa91 f1a1 	rbit	r1, r1
 80030cc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80030d0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80030d4:	fab1 f181 	clz	r1, r1
 80030d8:	b2c9      	uxtb	r1, r1
 80030da:	408b      	lsls	r3, r1
 80030dc:	4995      	ldr	r1, [pc, #596]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	e0f5      	b.n	80032d0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e4:	1d3b      	adds	r3, r7, #4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8085 	beq.w	80031fa <HAL_RCC_OscConfig+0x516>
 80030f0:	2301      	movs	r3, #1
 80030f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003102:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003110:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	461a      	mov	r2, r3
 8003118:	2301      	movs	r3, #1
 800311a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311c:	f7ff f822 	bl	8002164 <HAL_GetTick>
 8003120:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003126:	f7ff f81d 	bl	8002164 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d902      	bls.n	800313c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	f000 bcd5 	b.w	8003ae6 <HAL_RCC_OscConfig+0xe02>
 800313c:	2302      	movs	r3, #2
 800313e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800314e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d102      	bne.n	800316c <HAL_RCC_OscConfig+0x488>
 8003166:	4b73      	ldr	r3, [pc, #460]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	e013      	b.n	8003194 <HAL_RCC_OscConfig+0x4b0>
 800316c:	2302      	movs	r3, #2
 800316e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800317e:	2302      	movs	r3, #2
 8003180:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003184:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003188:	fa93 f3a3 	rbit	r3, r3
 800318c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003190:	4b68      	ldr	r3, [pc, #416]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	2202      	movs	r2, #2
 8003196:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800319a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800319e:	fa92 f2a2 	rbit	r2, r2
 80031a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80031a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80031aa:	fab2 f282 	clz	r2, r2
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	f042 0220 	orr.w	r2, r2, #32
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	f002 021f 	and.w	r2, r2, #31
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f202 	lsl.w	r2, r1, r2
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0af      	beq.n	8003126 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c6:	4b5b      	ldr	r3, [pc, #364]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	21f8      	movs	r1, #248	; 0xf8
 80031d6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031de:	fa91 f1a1 	rbit	r1, r1
 80031e2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80031e6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80031ea:	fab1 f181 	clz	r1, r1
 80031ee:	b2c9      	uxtb	r1, r1
 80031f0:	408b      	lsls	r3, r1
 80031f2:	4950      	ldr	r1, [pc, #320]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
 80031f8:	e06a      	b.n	80032d0 <HAL_RCC_OscConfig+0x5ec>
 80031fa:	2301      	movs	r3, #1
 80031fc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800320c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800321a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	461a      	mov	r2, r3
 8003222:	2300      	movs	r3, #0
 8003224:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fe ff9d 	bl	8002164 <HAL_GetTick>
 800322a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003230:	f7fe ff98 	bl	8002164 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d902      	bls.n	8003246 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	f000 bc50 	b.w	8003ae6 <HAL_RCC_OscConfig+0xe02>
 8003246:	2302      	movs	r3, #2
 8003248:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	b2db      	uxtb	r3, r3
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d102      	bne.n	8003276 <HAL_RCC_OscConfig+0x592>
 8003270:	4b30      	ldr	r3, [pc, #192]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	e013      	b.n	800329e <HAL_RCC_OscConfig+0x5ba>
 8003276:	2302      	movs	r3, #2
 8003278:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003288:	2302      	movs	r3, #2
 800328a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800328e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_RCC_OscConfig+0x650>)
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2202      	movs	r2, #2
 80032a0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80032a4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80032a8:	fa92 f2a2 	rbit	r2, r2
 80032ac:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80032b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80032b4:	fab2 f282 	clz	r2, r2
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f042 0220 	orr.w	r2, r2, #32
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	f002 021f 	and.w	r2, r2, #31
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1af      	bne.n	8003230 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80da 	beq.w	8003494 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d069      	beq.n	80033be <HAL_RCC_OscConfig+0x6da>
 80032ea:	2301      	movs	r3, #1
 80032ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80032fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_OscConfig+0x654>)
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	461a      	mov	r2, r3
 8003310:	2301      	movs	r3, #1
 8003312:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003314:	f7fe ff26 	bl	8002164 <HAL_GetTick>
 8003318:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331c:	e00e      	b.n	800333c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331e:	f7fe ff21 	bl	8002164 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d906      	bls.n	800333c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e3d9      	b.n	8003ae6 <HAL_RCC_OscConfig+0xe02>
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
 8003338:	10908120 	.word	0x10908120
 800333c:	2302      	movs	r3, #2
 800333e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800334e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003352:	2202      	movs	r2, #2
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	fa93 f2a3 	rbit	r2, r3
 8003360:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800336a:	2202      	movs	r2, #2
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	fa93 f2a3 	rbit	r2, r3
 8003378:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800337c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337e:	4ba5      	ldr	r3, [pc, #660]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 8003380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003382:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003386:	2102      	movs	r1, #2
 8003388:	6019      	str	r1, [r3, #0]
 800338a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	fa93 f1a3 	rbit	r1, r3
 8003394:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003398:	6019      	str	r1, [r3, #0]
  return result;
 800339a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2101      	movs	r1, #1
 80033b2:	fa01 f303 	lsl.w	r3, r1, r3
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0b0      	beq.n	800331e <HAL_RCC_OscConfig+0x63a>
 80033bc:	e06a      	b.n	8003494 <HAL_RCC_OscConfig+0x7b0>
 80033be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	fa93 f2a3 	rbit	r2, r3
 80033d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033d4:	601a      	str	r2, [r3, #0]
  return result;
 80033d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b8c      	ldr	r3, [pc, #560]	; (8003618 <HAL_RCC_OscConfig+0x934>)
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	461a      	mov	r2, r3
 80033ec:	2300      	movs	r3, #0
 80033ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f0:	f7fe feb8 	bl	8002164 <HAL_GetTick>
 80033f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	e009      	b.n	800340e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fa:	f7fe feb3 	bl	8002164 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e36b      	b.n	8003ae6 <HAL_RCC_OscConfig+0xe02>
 800340e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003412:	2202      	movs	r2, #2
 8003414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	fa93 f2a3 	rbit	r2, r3
 8003420:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800342a:	2202      	movs	r2, #2
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	fa93 f2a3 	rbit	r2, r3
 8003438:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003442:	2202      	movs	r2, #2
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fa93 f2a3 	rbit	r2, r3
 8003450:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003454:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003456:	4b6f      	ldr	r3, [pc, #444]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 8003458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800345a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800345e:	2102      	movs	r1, #2
 8003460:	6019      	str	r1, [r3, #0]
 8003462:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	fa93 f1a3 	rbit	r1, r3
 800346c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003470:	6019      	str	r1, [r3, #0]
  return result;
 8003472:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2101      	movs	r1, #1
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1b2      	bne.n	80033fa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8158 	beq.w	8003754 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034aa:	4b5a      	ldr	r3, [pc, #360]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d112      	bne.n	80034dc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b6:	4b57      	ldr	r3, [pc, #348]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4a56      	ldr	r2, [pc, #344]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 80034bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c0:	61d3      	str	r3, [r2, #28]
 80034c2:	4b54      	ldr	r3, [pc, #336]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034ca:	f107 0308 	add.w	r3, r7, #8
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	f107 0308 	add.w	r3, r7, #8
 80034d4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034dc:	4b4f      	ldr	r3, [pc, #316]	; (800361c <HAL_RCC_OscConfig+0x938>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d11a      	bne.n	800351e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e8:	4b4c      	ldr	r3, [pc, #304]	; (800361c <HAL_RCC_OscConfig+0x938>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a4b      	ldr	r2, [pc, #300]	; (800361c <HAL_RCC_OscConfig+0x938>)
 80034ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f4:	f7fe fe36 	bl	8002164 <HAL_GetTick>
 80034f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fc:	e009      	b.n	8003512 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fe:	f7fe fe31 	bl	8002164 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e2e9      	b.n	8003ae6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003512:	4b42      	ldr	r3, [pc, #264]	; (800361c <HAL_RCC_OscConfig+0x938>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0ef      	beq.n	80034fe <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351e:	1d3b      	adds	r3, r7, #4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x852>
 8003528:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4a39      	ldr	r2, [pc, #228]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6213      	str	r3, [r2, #32]
 8003534:	e02f      	b.n	8003596 <HAL_RCC_OscConfig+0x8b2>
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10c      	bne.n	800355a <HAL_RCC_OscConfig+0x876>
 8003540:	4b34      	ldr	r3, [pc, #208]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	4a33      	ldr	r2, [pc, #204]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	6213      	str	r3, [r2, #32]
 800354c:	4b31      	ldr	r3, [pc, #196]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a30      	ldr	r2, [pc, #192]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 8003552:	f023 0304 	bic.w	r3, r3, #4
 8003556:	6213      	str	r3, [r2, #32]
 8003558:	e01d      	b.n	8003596 <HAL_RCC_OscConfig+0x8b2>
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b05      	cmp	r3, #5
 8003562:	d10c      	bne.n	800357e <HAL_RCC_OscConfig+0x89a>
 8003564:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 800356a:	f043 0304 	orr.w	r3, r3, #4
 800356e:	6213      	str	r3, [r2, #32]
 8003570:	4b28      	ldr	r3, [pc, #160]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a27      	ldr	r2, [pc, #156]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6213      	str	r3, [r2, #32]
 800357c:	e00b      	b.n	8003596 <HAL_RCC_OscConfig+0x8b2>
 800357e:	4b25      	ldr	r3, [pc, #148]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4a24      	ldr	r2, [pc, #144]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	6213      	str	r3, [r2, #32]
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4a21      	ldr	r2, [pc, #132]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 8003590:	f023 0304 	bic.w	r3, r3, #4
 8003594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d06b      	beq.n	8003678 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a0:	f7fe fde0 	bl	8002164 <HAL_GetTick>
 80035a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a8:	e00b      	b.n	80035c2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fe fddb 	bl	8002164 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e291      	b.n	8003ae6 <HAL_RCC_OscConfig+0xe02>
 80035c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80035c6:	2202      	movs	r2, #2
 80035c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	fa93 f2a3 	rbit	r2, r3
 80035d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035de:	2202      	movs	r2, #2
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	fa93 f2a3 	rbit	r2, r3
 80035ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035f0:	601a      	str	r2, [r3, #0]
  return result;
 80035f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d109      	bne.n	8003620 <HAL_RCC_OscConfig+0x93c>
 800360c:	4b01      	ldr	r3, [pc, #4]	; (8003614 <HAL_RCC_OscConfig+0x930>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	e014      	b.n	800363c <HAL_RCC_OscConfig+0x958>
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	10908120 	.word	0x10908120
 800361c:	40007000 	.word	0x40007000
 8003620:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003624:	2202      	movs	r2, #2
 8003626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	fa93 f2a3 	rbit	r2, r3
 8003632:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	4bbb      	ldr	r3, [pc, #748]	; (8003928 <HAL_RCC_OscConfig+0xc44>)
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003640:	2102      	movs	r1, #2
 8003642:	6011      	str	r1, [r2, #0]
 8003644:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	fa92 f1a2 	rbit	r1, r2
 800364e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003652:	6011      	str	r1, [r2, #0]
  return result;
 8003654:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	fab2 f282 	clz	r2, r2
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	f002 021f 	and.w	r2, r2, #31
 800366a:	2101      	movs	r1, #1
 800366c:	fa01 f202 	lsl.w	r2, r1, r2
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d099      	beq.n	80035aa <HAL_RCC_OscConfig+0x8c6>
 8003676:	e063      	b.n	8003740 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003678:	f7fe fd74 	bl	8002164 <HAL_GetTick>
 800367c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003680:	e00b      	b.n	800369a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fe fd6f 	bl	8002164 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e225      	b.n	8003ae6 <HAL_RCC_OscConfig+0xe02>
 800369a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800369e:	2202      	movs	r2, #2
 80036a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	fa93 f2a3 	rbit	r2, r3
 80036ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036b6:	2202      	movs	r2, #2
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	fa93 f2a3 	rbit	r2, r3
 80036c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036c8:	601a      	str	r2, [r3, #0]
  return result;
 80036ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d0:	fab3 f383 	clz	r3, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f043 0302 	orr.w	r3, r3, #2
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d102      	bne.n	80036ea <HAL_RCC_OscConfig+0xa06>
 80036e4:	4b90      	ldr	r3, [pc, #576]	; (8003928 <HAL_RCC_OscConfig+0xc44>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	e00d      	b.n	8003706 <HAL_RCC_OscConfig+0xa22>
 80036ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036ee:	2202      	movs	r2, #2
 80036f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	fa93 f2a3 	rbit	r2, r3
 80036fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	4b89      	ldr	r3, [pc, #548]	; (8003928 <HAL_RCC_OscConfig+0xc44>)
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800370a:	2102      	movs	r1, #2
 800370c:	6011      	str	r1, [r2, #0]
 800370e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	fa92 f1a2 	rbit	r1, r2
 8003718:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800371c:	6011      	str	r1, [r2, #0]
  return result;
 800371e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	fab2 f282 	clz	r2, r2
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	f002 021f 	and.w	r2, r2, #31
 8003734:	2101      	movs	r1, #1
 8003736:	fa01 f202 	lsl.w	r2, r1, r2
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1a0      	bne.n	8003682 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003740:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003744:	2b01      	cmp	r3, #1
 8003746:	d105      	bne.n	8003754 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003748:	4b77      	ldr	r3, [pc, #476]	; (8003928 <HAL_RCC_OscConfig+0xc44>)
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	4a76      	ldr	r2, [pc, #472]	; (8003928 <HAL_RCC_OscConfig+0xc44>)
 800374e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003752:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003754:	1d3b      	adds	r3, r7, #4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 81c2 	beq.w	8003ae4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003760:	4b71      	ldr	r3, [pc, #452]	; (8003928 <HAL_RCC_OscConfig+0xc44>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 030c 	and.w	r3, r3, #12
 8003768:	2b08      	cmp	r3, #8
 800376a:	f000 819c 	beq.w	8003aa6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	2b02      	cmp	r3, #2
 8003776:	f040 8114 	bne.w	80039a2 <HAL_RCC_OscConfig+0xcbe>
 800377a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800377e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	fa93 f2a3 	rbit	r2, r3
 800378e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003792:	601a      	str	r2, [r3, #0]
  return result;
 8003794:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003798:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	fab3 f383 	clz	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	461a      	mov	r2, r3
 80037ac:	2300      	movs	r3, #0
 80037ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe fcd8 	bl	8002164 <HAL_GetTick>
 80037b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b8:	e009      	b.n	80037ce <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fe fcd3 	bl	8002164 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e18b      	b.n	8003ae6 <HAL_RCC_OscConfig+0xe02>
 80037ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	fa93 f2a3 	rbit	r2, r3
 80037e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037e6:	601a      	str	r2, [r3, #0]
  return result;
 80037e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ee:	fab3 f383 	clz	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d102      	bne.n	8003808 <HAL_RCC_OscConfig+0xb24>
 8003802:	4b49      	ldr	r3, [pc, #292]	; (8003928 <HAL_RCC_OscConfig+0xc44>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	e01b      	b.n	8003840 <HAL_RCC_OscConfig+0xb5c>
 8003808:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800380c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	fa93 f2a3 	rbit	r2, r3
 800381c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003826:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	fa93 f2a3 	rbit	r2, r3
 8003836:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	4b3a      	ldr	r3, [pc, #232]	; (8003928 <HAL_RCC_OscConfig+0xc44>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003844:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003848:	6011      	str	r1, [r2, #0]
 800384a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	fa92 f1a2 	rbit	r1, r2
 8003854:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003858:	6011      	str	r1, [r2, #0]
  return result;
 800385a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	fab2 f282 	clz	r2, r2
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	f042 0220 	orr.w	r2, r2, #32
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	f002 021f 	and.w	r2, r2, #31
 8003870:	2101      	movs	r1, #1
 8003872:	fa01 f202 	lsl.w	r2, r1, r2
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d19e      	bne.n	80037ba <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800387c:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <HAL_RCC_OscConfig+0xc44>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003884:	1d3b      	adds	r3, r7, #4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	430b      	orrs	r3, r1
 8003892:	4925      	ldr	r1, [pc, #148]	; (8003928 <HAL_RCC_OscConfig+0xc44>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
 8003898:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800389c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	fa93 f2a3 	rbit	r2, r3
 80038ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038b0:	601a      	str	r2, [r3, #0]
  return result;
 80038b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038b6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b8:	fab3 f383 	clz	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	461a      	mov	r2, r3
 80038ca:	2301      	movs	r3, #1
 80038cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fe fc49 	bl	8002164 <HAL_GetTick>
 80038d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038d6:	e009      	b.n	80038ec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fe fc44 	bl	8002164 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e0fc      	b.n	8003ae6 <HAL_RCC_OscConfig+0xe02>
 80038ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	fa93 f2a3 	rbit	r2, r3
 8003900:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003904:	601a      	str	r2, [r3, #0]
  return result;
 8003906:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800390a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800390c:	fab3 f383 	clz	r3, r3
 8003910:	b2db      	uxtb	r3, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_RCC_OscConfig+0xc48>
 8003920:	4b01      	ldr	r3, [pc, #4]	; (8003928 <HAL_RCC_OscConfig+0xc44>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	e01e      	b.n	8003964 <HAL_RCC_OscConfig+0xc80>
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003930:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	fa93 f2a3 	rbit	r2, r3
 8003940:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800394a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	fa93 f2a3 	rbit	r2, r3
 800395a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	4b63      	ldr	r3, [pc, #396]	; (8003af0 <HAL_RCC_OscConfig+0xe0c>)
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003968:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800396c:	6011      	str	r1, [r2, #0]
 800396e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	fa92 f1a2 	rbit	r1, r2
 8003978:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800397c:	6011      	str	r1, [r2, #0]
  return result;
 800397e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	fab2 f282 	clz	r2, r2
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	f042 0220 	orr.w	r2, r2, #32
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	f002 021f 	and.w	r2, r2, #31
 8003994:	2101      	movs	r1, #1
 8003996:	fa01 f202 	lsl.w	r2, r1, r2
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d09b      	beq.n	80038d8 <HAL_RCC_OscConfig+0xbf4>
 80039a0:	e0a0      	b.n	8003ae4 <HAL_RCC_OscConfig+0xe00>
 80039a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	fa93 f2a3 	rbit	r2, r3
 80039b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ba:	601a      	str	r2, [r3, #0]
  return result;
 80039bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c2:	fab3 f383 	clz	r3, r3
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	461a      	mov	r2, r3
 80039d4:	2300      	movs	r3, #0
 80039d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fe fbc4 	bl	8002164 <HAL_GetTick>
 80039dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e0:	e009      	b.n	80039f6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e2:	f7fe fbbf 	bl	8002164 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e077      	b.n	8003ae6 <HAL_RCC_OscConfig+0xe02>
 80039f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	fa93 f2a3 	rbit	r2, r3
 8003a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a0e:	601a      	str	r2, [r3, #0]
  return result;
 8003a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d102      	bne.n	8003a30 <HAL_RCC_OscConfig+0xd4c>
 8003a2a:	4b31      	ldr	r3, [pc, #196]	; (8003af0 <HAL_RCC_OscConfig+0xe0c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	e01b      	b.n	8003a68 <HAL_RCC_OscConfig+0xd84>
 8003a30:	f107 0320 	add.w	r3, r7, #32
 8003a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	f107 0320 	add.w	r3, r7, #32
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	fa93 f2a3 	rbit	r2, r3
 8003a44:	f107 031c 	add.w	r3, r7, #28
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f107 0318 	add.w	r3, r7, #24
 8003a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f107 0318 	add.w	r3, r7, #24
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	fa93 f2a3 	rbit	r2, r3
 8003a5e:	f107 0314 	add.w	r3, r7, #20
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <HAL_RCC_OscConfig+0xe0c>)
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	f107 0210 	add.w	r2, r7, #16
 8003a6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a70:	6011      	str	r1, [r2, #0]
 8003a72:	f107 0210 	add.w	r2, r7, #16
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	fa92 f1a2 	rbit	r1, r2
 8003a7c:	f107 020c 	add.w	r2, r7, #12
 8003a80:	6011      	str	r1, [r2, #0]
  return result;
 8003a82:	f107 020c 	add.w	r2, r7, #12
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	fab2 f282 	clz	r2, r2
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	f042 0220 	orr.w	r2, r2, #32
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	f002 021f 	and.w	r2, r2, #31
 8003a98:	2101      	movs	r1, #1
 8003a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d19e      	bne.n	80039e2 <HAL_RCC_OscConfig+0xcfe>
 8003aa4:	e01e      	b.n	8003ae4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e018      	b.n	8003ae6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <HAL_RCC_OscConfig+0xe0c>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003abc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ac0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d108      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ace:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ad2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ad6:	1d3b      	adds	r3, r7, #4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40021000 	.word	0x40021000

08003af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b09e      	sub	sp, #120	; 0x78
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e162      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b90      	ldr	r3, [pc, #576]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d910      	bls.n	8003b3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b8d      	ldr	r3, [pc, #564]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 0207 	bic.w	r2, r3, #7
 8003b22:	498b      	ldr	r1, [pc, #556]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b89      	ldr	r3, [pc, #548]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e14a      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b48:	4b82      	ldr	r3, [pc, #520]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	497f      	ldr	r1, [pc, #508]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80dc 	beq.w	8003d20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d13c      	bne.n	8003bea <HAL_RCC_ClockConfig+0xf6>
 8003b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b78:	fa93 f3a3 	rbit	r3, r3
 8003b7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d102      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xa6>
 8003b94:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	e00f      	b.n	8003bba <HAL_RCC_ClockConfig+0xc6>
 8003b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ba2:	fa93 f3a3 	rbit	r3, r3
 8003ba6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ba8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bac:	663b      	str	r3, [r7, #96]	; 0x60
 8003bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bb6:	4b67      	ldr	r3, [pc, #412]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bbe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bc2:	fa92 f2a2 	rbit	r2, r2
 8003bc6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bca:	fab2 f282 	clz	r2, r2
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	f042 0220 	orr.w	r2, r2, #32
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	f002 021f 	and.w	r2, r2, #31
 8003bda:	2101      	movs	r1, #1
 8003bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d17b      	bne.n	8003cde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0f3      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d13c      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x178>
 8003bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d102      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x128>
 8003c16:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	e00f      	b.n	8003c3c <HAL_RCC_ClockConfig+0x148>
 8003c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c24:	fa93 f3a3 	rbit	r3, r3
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
 8003c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c38:	4b46      	ldr	r3, [pc, #280]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c40:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c44:	fa92 f2a2 	rbit	r2, r2
 8003c48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c4c:	fab2 f282 	clz	r2, r2
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	f042 0220 	orr.w	r2, r2, #32
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	f002 021f 	and.w	r2, r2, #31
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d13a      	bne.n	8003cde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0b2      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x1a0>
 8003c8e:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	e00d      	b.n	8003cb0 <HAL_RCC_ClockConfig+0x1bc>
 8003c94:	2302      	movs	r3, #2
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	fa93 f3a3 	rbit	r3, r3
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	61ba      	str	r2, [r7, #24]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	fa92 f2a2 	rbit	r2, r2
 8003cba:	617a      	str	r2, [r7, #20]
  return result;
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	fab2 f282 	clz	r2, r2
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	f042 0220 	orr.w	r2, r2, #32
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	f002 021f 	and.w	r2, r2, #31
 8003cce:	2101      	movs	r1, #1
 8003cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e079      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cde:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f023 0203 	bic.w	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	491a      	ldr	r1, [pc, #104]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf0:	f7fe fa38 	bl	8002164 <HAL_GetTick>
 8003cf4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf8:	f7fe fa34 	bl	8002164 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e061      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_RCC_ClockConfig+0x260>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 020c 	and.w	r2, r3, #12
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d1eb      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d214      	bcs.n	8003d58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 0207 	bic.w	r2, r3, #7
 8003d36:	4906      	ldr	r1, [pc, #24]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_RCC_ClockConfig+0x25c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e040      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x2de>
 8003d50:	40022000 	.word	0x40022000
 8003d54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <HAL_RCC_ClockConfig+0x2e8>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	491a      	ldr	r1, [pc, #104]	; (8003ddc <HAL_RCC_ClockConfig+0x2e8>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <HAL_RCC_ClockConfig+0x2e8>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4912      	ldr	r1, [pc, #72]	; (8003ddc <HAL_RCC_ClockConfig+0x2e8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d96:	f000 f829 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <HAL_RCC_ClockConfig+0x2e8>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da4:	22f0      	movs	r2, #240	; 0xf0
 8003da6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	fa92 f2a2 	rbit	r2, r2
 8003dae:	60fa      	str	r2, [r7, #12]
  return result;
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	fab2 f282 	clz	r2, r2
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	40d3      	lsrs	r3, r2
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <HAL_RCC_ClockConfig+0x2ec>)
 8003dbc:	5cd3      	ldrb	r3, [r2, r3]
 8003dbe:	fa21 f303 	lsr.w	r3, r1, r3
 8003dc2:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <HAL_RCC_ClockConfig+0x2f0>)
 8003dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <HAL_RCC_ClockConfig+0x2f4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe f986 	bl	80020dc <HAL_InitTick>
  
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3778      	adds	r7, #120	; 0x78
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	080067f0 	.word	0x080067f0
 8003de4:	20000010 	.word	0x20000010
 8003de8:	20000014 	.word	0x20000014

08003dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b08b      	sub	sp, #44	; 0x2c
 8003df0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003e06:	4b29      	ldr	r3, [pc, #164]	; (8003eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d002      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x30>
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0x36>
 8003e1a:	e03c      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e1c:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e1e:	623b      	str	r3, [r7, #32]
      break;
 8003e20:	e03c      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	fa92 f2a2 	rbit	r2, r2
 8003e34:	607a      	str	r2, [r7, #4]
  return result;
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	fab2 f282 	clz	r2, r2
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	40d3      	lsrs	r3, r2
 8003e40:	4a1c      	ldr	r2, [pc, #112]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e42:	5cd3      	ldrb	r3, [r2, r3]
 8003e44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e46:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	220f      	movs	r2, #15
 8003e50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	fa92 f2a2 	rbit	r2, r2
 8003e58:	60fa      	str	r2, [r7, #12]
  return result;
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	fab2 f282 	clz	r2, r2
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	40d3      	lsrs	r3, r2
 8003e64:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e66:	5cd3      	ldrb	r3, [r2, r3]
 8003e68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e74:	4a0e      	ldr	r2, [pc, #56]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
 8003e84:	e004      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	623b      	str	r3, [r7, #32]
      break;
 8003e94:	e002      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e96:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003e98:	623b      	str	r3, [r7, #32]
      break;
 8003e9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	372c      	adds	r7, #44	; 0x2c
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	00f42400 	.word	0x00f42400
 8003eb4:	08006808 	.word	0x08006808
 8003eb8:	08006818 	.word	0x08006818
 8003ebc:	003d0900 	.word	0x003d0900
 8003ec0:	007a1200 	.word	0x007a1200

08003ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000010 	.word	0x20000010

08003edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ee2:	f7ff ffef 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003ee6:	4601      	mov	r1, r0
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ef0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ef4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	fa92 f2a2 	rbit	r2, r2
 8003efc:	603a      	str	r2, [r7, #0]
  return result;
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	fab2 f282 	clz	r2, r2
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	40d3      	lsrs	r3, r2
 8003f08:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003f0a:	5cd3      	ldrb	r3, [r2, r3]
 8003f0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	08006800 	.word	0x08006800

08003f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003f26:	f7ff ffcd 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003f2a:	4601      	mov	r1, r0
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003f34:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003f38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	fa92 f2a2 	rbit	r2, r2
 8003f40:	603a      	str	r2, [r7, #0]
  return result;
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	fab2 f282 	clz	r2, r2
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	40d3      	lsrs	r3, r2
 8003f4c:	4a04      	ldr	r2, [pc, #16]	; (8003f60 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f4e:	5cd3      	ldrb	r3, [r2, r3]
 8003f50:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	08006800 	.word	0x08006800

08003f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b092      	sub	sp, #72	; 0x48
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f74:	2300      	movs	r3, #0
 8003f76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80cd 	beq.w	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f88:	4b86      	ldr	r3, [pc, #536]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10e      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f94:	4b83      	ldr	r3, [pc, #524]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	4a82      	ldr	r2, [pc, #520]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	61d3      	str	r3, [r2, #28]
 8003fa0:	4b80      	ldr	r3, [pc, #512]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb2:	4b7d      	ldr	r3, [pc, #500]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d118      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fbe:	4b7a      	ldr	r3, [pc, #488]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a79      	ldr	r2, [pc, #484]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fca:	f7fe f8cb 	bl	8002164 <HAL_GetTick>
 8003fce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fe f8c7 	bl	8002164 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b64      	cmp	r3, #100	; 0x64
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e0db      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe4:	4b70      	ldr	r3, [pc, #448]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d07d      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800400a:	429a      	cmp	r2, r3
 800400c:	d076      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800400e:	4b65      	ldr	r3, [pc, #404]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800401c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004028:	fab3 f383 	clz	r3, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	4b5e      	ldr	r3, [pc, #376]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	461a      	mov	r2, r3
 8004038:	2301      	movs	r3, #1
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800404c:	fab3 f383 	clz	r3, r3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	4b55      	ldr	r3, [pc, #340]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	461a      	mov	r2, r3
 800405c:	2300      	movs	r3, #0
 800405e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004060:	4a50      	ldr	r2, [pc, #320]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004064:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d045      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7fe f878 	bl	8002164 <HAL_GetTick>
 8004074:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004076:	e00a      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fe f874 	bl	8002164 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e086      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800408e:	2302      	movs	r3, #2
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
 800409a:	2302      	movs	r3, #2
 800409c:	623b      	str	r3, [r7, #32]
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	fa93 f3a3 	rbit	r3, r3
 80040a4:	61fb      	str	r3, [r7, #28]
  return result;
 80040a6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a8:	fab3 f383 	clz	r3, r3
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f043 0302 	orr.w	r3, r3, #2
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d102      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80040bc:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	e007      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80040c2:	2302      	movs	r3, #2
 80040c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	4b35      	ldr	r3, [pc, #212]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	2202      	movs	r2, #2
 80040d4:	613a      	str	r2, [r7, #16]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	fa92 f2a2 	rbit	r2, r2
 80040dc:	60fa      	str	r2, [r7, #12]
  return result;
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	fab2 f282 	clz	r2, r2
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	f002 021f 	and.w	r2, r2, #31
 80040f0:	2101      	movs	r1, #1
 80040f2:	fa01 f202 	lsl.w	r2, r1, r2
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0bd      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040fc:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4926      	ldr	r1, [pc, #152]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800410a:	4313      	orrs	r3, r2
 800410c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800410e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004116:	4b23      	ldr	r3, [pc, #140]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	4a22      	ldr	r2, [pc, #136]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800411c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004120:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800412e:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	f023 0203 	bic.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	491a      	ldr	r1, [pc, #104]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800413c:	4313      	orrs	r3, r2
 800413e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800414c:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	f023 0210 	bic.w	r2, r3, #16
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	4912      	ldr	r1, [pc, #72]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800415a:	4313      	orrs	r3, r2
 800415c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800416a:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	490b      	ldr	r1, [pc, #44]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004178:	4313      	orrs	r3, r2
 800417a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	4903      	ldr	r1, [pc, #12]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004196:	4313      	orrs	r3, r2
 8004198:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3748      	adds	r7, #72	; 0x48
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40007000 	.word	0x40007000
 80041ac:	10908100 	.word	0x10908100

080041b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e049      	b.n	8004256 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd fb38 	bl	800184c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4610      	mov	r0, r2
 80041f0:	f000 fb58 	bl	80048a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e049      	b.n	8004304 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f841 	bl	800430c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2202      	movs	r2, #2
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f000 fb01 	bl	80048a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <HAL_TIM_PWM_Start+0x24>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e03c      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b04      	cmp	r3, #4
 8004348:	d109      	bne.n	800435e <HAL_TIM_PWM_Start+0x3e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	bf14      	ite	ne
 8004356:	2301      	movne	r3, #1
 8004358:	2300      	moveq	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	e02f      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b08      	cmp	r3, #8
 8004362:	d109      	bne.n	8004378 <HAL_TIM_PWM_Start+0x58>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e022      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b0c      	cmp	r3, #12
 800437c:	d109      	bne.n	8004392 <HAL_TIM_PWM_Start+0x72>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b01      	cmp	r3, #1
 8004388:	bf14      	ite	ne
 800438a:	2301      	movne	r3, #1
 800438c:	2300      	moveq	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	e015      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b10      	cmp	r3, #16
 8004396:	d109      	bne.n	80043ac <HAL_TIM_PWM_Start+0x8c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e008      	b.n	80043be <HAL_TIM_PWM_Start+0x9e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e088      	b.n	80044d8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <HAL_TIM_PWM_Start+0xb6>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d4:	e023      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_PWM_Start+0xc6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e4:	e01b      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_PWM_Start+0xd6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f4:	e013      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_PWM_Start+0xe6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004404:	e00b      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b10      	cmp	r3, #16
 800440a:	d104      	bne.n	8004416 <HAL_TIM_PWM_Start+0xf6>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004414:	e003      	b.n	800441e <HAL_TIM_PWM_Start+0xfe>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2202      	movs	r2, #2
 800441a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2201      	movs	r2, #1
 8004424:	6839      	ldr	r1, [r7, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fdf4 	bl	8005014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <HAL_TIM_PWM_Start+0x1c0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00e      	beq.n	8004454 <HAL_TIM_PWM_Start+0x134>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <HAL_TIM_PWM_Start+0x1c4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d009      	beq.n	8004454 <HAL_TIM_PWM_Start+0x134>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a28      	ldr	r2, [pc, #160]	; (80044e8 <HAL_TIM_PWM_Start+0x1c8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_TIM_PWM_Start+0x134>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a27      	ldr	r2, [pc, #156]	; (80044ec <HAL_TIM_PWM_Start+0x1cc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d101      	bne.n	8004458 <HAL_TIM_PWM_Start+0x138>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_TIM_PWM_Start+0x13a>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <HAL_TIM_PWM_Start+0x1c0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_TIM_PWM_Start+0x176>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004480:	d009      	beq.n	8004496 <HAL_TIM_PWM_Start+0x176>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1a      	ldr	r2, [pc, #104]	; (80044f0 <HAL_TIM_PWM_Start+0x1d0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_TIM_PWM_Start+0x176>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <HAL_TIM_PWM_Start+0x1c4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d115      	bne.n	80044c2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	4b15      	ldr	r3, [pc, #84]	; (80044f4 <HAL_TIM_PWM_Start+0x1d4>)
 800449e:	4013      	ands	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	d015      	beq.n	80044d4 <HAL_TIM_PWM_Start+0x1b4>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ae:	d011      	beq.n	80044d4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c0:	e008      	b.n	80044d4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e000      	b.n	80044d6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40014000 	.word	0x40014000
 80044e8:	40014400 	.word	0x40014400
 80044ec:	40014800 	.word	0x40014800
 80044f0:	40000400 	.word	0x40000400
 80044f4:	00010007 	.word	0x00010007

080044f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800450e:	2302      	movs	r3, #2
 8004510:	e0fd      	b.n	800470e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b14      	cmp	r3, #20
 800451e:	f200 80f0 	bhi.w	8004702 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004522:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004528:	0800457d 	.word	0x0800457d
 800452c:	08004703 	.word	0x08004703
 8004530:	08004703 	.word	0x08004703
 8004534:	08004703 	.word	0x08004703
 8004538:	080045bd 	.word	0x080045bd
 800453c:	08004703 	.word	0x08004703
 8004540:	08004703 	.word	0x08004703
 8004544:	08004703 	.word	0x08004703
 8004548:	080045ff 	.word	0x080045ff
 800454c:	08004703 	.word	0x08004703
 8004550:	08004703 	.word	0x08004703
 8004554:	08004703 	.word	0x08004703
 8004558:	0800463f 	.word	0x0800463f
 800455c:	08004703 	.word	0x08004703
 8004560:	08004703 	.word	0x08004703
 8004564:	08004703 	.word	0x08004703
 8004568:	08004681 	.word	0x08004681
 800456c:	08004703 	.word	0x08004703
 8004570:	08004703 	.word	0x08004703
 8004574:	08004703 	.word	0x08004703
 8004578:	080046c1 	.word	0x080046c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fa06 	bl	8004994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0208 	orr.w	r2, r2, #8
 8004596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0204 	bic.w	r2, r2, #4
 80045a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6999      	ldr	r1, [r3, #24]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	619a      	str	r2, [r3, #24]
      break;
 80045ba:	e0a3      	b.n	8004704 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fa6c 	bl	8004aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6999      	ldr	r1, [r3, #24]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	021a      	lsls	r2, r3, #8
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	619a      	str	r2, [r3, #24]
      break;
 80045fc:	e082      	b.n	8004704 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 facb 	bl	8004ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0208 	orr.w	r2, r2, #8
 8004618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0204 	bic.w	r2, r2, #4
 8004628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69d9      	ldr	r1, [r3, #28]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	61da      	str	r2, [r3, #28]
      break;
 800463c:	e062      	b.n	8004704 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fb29 	bl	8004c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69d9      	ldr	r1, [r3, #28]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	021a      	lsls	r2, r3, #8
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	61da      	str	r2, [r3, #28]
      break;
 800467e:	e041      	b.n	8004704 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fb6c 	bl	8004d64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0208 	orr.w	r2, r2, #8
 800469a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0204 	bic.w	r2, r2, #4
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046be:	e021      	b.n	8004704 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fbaa 	bl	8004e20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	021a      	lsls	r2, r3, #8
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004700:	e000      	b.n	8004704 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004702:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop

08004718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_TIM_ConfigClockSource+0x18>
 800472c:	2302      	movs	r3, #2
 800472e:	e0b5      	b.n	800489c <HAL_TIM_ConfigClockSource+0x184>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800475a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476c:	d03e      	beq.n	80047ec <HAL_TIM_ConfigClockSource+0xd4>
 800476e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004772:	f200 8087 	bhi.w	8004884 <HAL_TIM_ConfigClockSource+0x16c>
 8004776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477a:	f000 8085 	beq.w	8004888 <HAL_TIM_ConfigClockSource+0x170>
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004782:	d87f      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b70      	cmp	r3, #112	; 0x70
 8004786:	d01a      	beq.n	80047be <HAL_TIM_ConfigClockSource+0xa6>
 8004788:	2b70      	cmp	r3, #112	; 0x70
 800478a:	d87b      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b60      	cmp	r3, #96	; 0x60
 800478e:	d050      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x11a>
 8004790:	2b60      	cmp	r3, #96	; 0x60
 8004792:	d877      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b50      	cmp	r3, #80	; 0x50
 8004796:	d03c      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0xfa>
 8004798:	2b50      	cmp	r3, #80	; 0x50
 800479a:	d873      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d058      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x13a>
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	d86f      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b30      	cmp	r3, #48	; 0x30
 80047a6:	d064      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x15a>
 80047a8:	2b30      	cmp	r3, #48	; 0x30
 80047aa:	d86b      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d060      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x15a>
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d867      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d05c      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x15a>
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d05a      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047bc:	e062      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6899      	ldr	r1, [r3, #8]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f000 fc01 	bl	8004fd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	609a      	str	r2, [r3, #8]
      break;
 80047ea:	e04e      	b.n	800488a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6899      	ldr	r1, [r3, #8]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f000 fbea 	bl	8004fd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800480e:	609a      	str	r2, [r3, #8]
      break;
 8004810:	e03b      	b.n	800488a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	461a      	mov	r2, r3
 8004820:	f000 fb5e 	bl	8004ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2150      	movs	r1, #80	; 0x50
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fbb7 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004830:	e02b      	b.n	800488a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	461a      	mov	r2, r3
 8004840:	f000 fb7d 	bl	8004f3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2160      	movs	r1, #96	; 0x60
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fba7 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004850:	e01b      	b.n	800488a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6859      	ldr	r1, [r3, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	461a      	mov	r2, r3
 8004860:	f000 fb3e 	bl	8004ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2140      	movs	r1, #64	; 0x40
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fb97 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004870:	e00b      	b.n	800488a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4619      	mov	r1, r3
 800487c:	4610      	mov	r0, r2
 800487e:	f000 fb8e 	bl	8004f9e <TIM_ITRx_SetConfig>
        break;
 8004882:	e002      	b.n	800488a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004884:	bf00      	nop
 8004886:	e000      	b.n	800488a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004888:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a32      	ldr	r2, [pc, #200]	; (8004980 <TIM_Base_SetConfig+0xdc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_Base_SetConfig+0x28>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x28>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a2f      	ldr	r2, [pc, #188]	; (8004984 <TIM_Base_SetConfig+0xe0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a27      	ldr	r2, [pc, #156]	; (8004980 <TIM_Base_SetConfig+0xdc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <TIM_Base_SetConfig+0x6a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ec:	d00f      	beq.n	800490e <TIM_Base_SetConfig+0x6a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a24      	ldr	r2, [pc, #144]	; (8004984 <TIM_Base_SetConfig+0xe0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00b      	beq.n	800490e <TIM_Base_SetConfig+0x6a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a23      	ldr	r2, [pc, #140]	; (8004988 <TIM_Base_SetConfig+0xe4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d007      	beq.n	800490e <TIM_Base_SetConfig+0x6a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a22      	ldr	r2, [pc, #136]	; (800498c <TIM_Base_SetConfig+0xe8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d003      	beq.n	800490e <TIM_Base_SetConfig+0x6a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a21      	ldr	r2, [pc, #132]	; (8004990 <TIM_Base_SetConfig+0xec>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d108      	bne.n	8004920 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <TIM_Base_SetConfig+0xdc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00b      	beq.n	8004964 <TIM_Base_SetConfig+0xc0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <TIM_Base_SetConfig+0xe4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d007      	beq.n	8004964 <TIM_Base_SetConfig+0xc0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a0d      	ldr	r2, [pc, #52]	; (800498c <TIM_Base_SetConfig+0xe8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_Base_SetConfig+0xc0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a0c      	ldr	r2, [pc, #48]	; (8004990 <TIM_Base_SetConfig+0xec>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d103      	bne.n	800496c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	615a      	str	r2, [r3, #20]
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40012c00 	.word	0x40012c00
 8004984:	40000400 	.word	0x40000400
 8004988:	40014000 	.word	0x40014000
 800498c:	40014400 	.word	0x40014400
 8004990:	40014800 	.word	0x40014800

08004994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f023 0201 	bic.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f023 0302 	bic.w	r3, r3, #2
 80049e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a28      	ldr	r2, [pc, #160]	; (8004a90 <TIM_OC1_SetConfig+0xfc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00b      	beq.n	8004a0c <TIM_OC1_SetConfig+0x78>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a27      	ldr	r2, [pc, #156]	; (8004a94 <TIM_OC1_SetConfig+0x100>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <TIM_OC1_SetConfig+0x78>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a26      	ldr	r2, [pc, #152]	; (8004a98 <TIM_OC1_SetConfig+0x104>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_OC1_SetConfig+0x78>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a25      	ldr	r2, [pc, #148]	; (8004a9c <TIM_OC1_SetConfig+0x108>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d10c      	bne.n	8004a26 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f023 0308 	bic.w	r3, r3, #8
 8004a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 0304 	bic.w	r3, r3, #4
 8004a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a19      	ldr	r2, [pc, #100]	; (8004a90 <TIM_OC1_SetConfig+0xfc>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00b      	beq.n	8004a46 <TIM_OC1_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a18      	ldr	r2, [pc, #96]	; (8004a94 <TIM_OC1_SetConfig+0x100>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d007      	beq.n	8004a46 <TIM_OC1_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a17      	ldr	r2, [pc, #92]	; (8004a98 <TIM_OC1_SetConfig+0x104>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d003      	beq.n	8004a46 <TIM_OC1_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a16      	ldr	r2, [pc, #88]	; (8004a9c <TIM_OC1_SetConfig+0x108>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d111      	bne.n	8004a6a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	621a      	str	r2, [r3, #32]
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	40014000 	.word	0x40014000
 8004a98:	40014400 	.word	0x40014400
 8004a9c:	40014800 	.word	0x40014800

08004aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	f023 0210 	bic.w	r2, r3, #16
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0320 	bic.w	r3, r3, #32
 8004aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a24      	ldr	r2, [pc, #144]	; (8004b90 <TIM_OC2_SetConfig+0xf0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d10d      	bne.n	8004b20 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <TIM_OC2_SetConfig+0xf0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00b      	beq.n	8004b40 <TIM_OC2_SetConfig+0xa0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <TIM_OC2_SetConfig+0xf4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d007      	beq.n	8004b40 <TIM_OC2_SetConfig+0xa0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <TIM_OC2_SetConfig+0xf8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_OC2_SetConfig+0xa0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <TIM_OC2_SetConfig+0xfc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d113      	bne.n	8004b68 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b46:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b4e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <TIM_OC3_SetConfig+0xec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10d      	bne.n	8004c1e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c1c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1a      	ldr	r2, [pc, #104]	; (8004c8c <TIM_OC3_SetConfig+0xec>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00b      	beq.n	8004c3e <TIM_OC3_SetConfig+0x9e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a19      	ldr	r2, [pc, #100]	; (8004c90 <TIM_OC3_SetConfig+0xf0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d007      	beq.n	8004c3e <TIM_OC3_SetConfig+0x9e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <TIM_OC3_SetConfig+0xf4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d003      	beq.n	8004c3e <TIM_OC3_SetConfig+0x9e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a17      	ldr	r2, [pc, #92]	; (8004c98 <TIM_OC3_SetConfig+0xf8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d113      	bne.n	8004c66 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	621a      	str	r2, [r3, #32]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400
 8004c98:	40014800 	.word	0x40014800

08004c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	031b      	lsls	r3, r3, #12
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a16      	ldr	r2, [pc, #88]	; (8004d54 <TIM_OC4_SetConfig+0xb8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00b      	beq.n	8004d18 <TIM_OC4_SetConfig+0x7c>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <TIM_OC4_SetConfig+0xbc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d007      	beq.n	8004d18 <TIM_OC4_SetConfig+0x7c>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <TIM_OC4_SetConfig+0xc0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_OC4_SetConfig+0x7c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <TIM_OC4_SetConfig+0xc4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d109      	bne.n	8004d2c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	019b      	lsls	r3, r3, #6
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	bf00      	nop
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40014400 	.word	0x40014400
 8004d60:	40014800 	.word	0x40014800

08004d64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004da8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	041b      	lsls	r3, r3, #16
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a15      	ldr	r2, [pc, #84]	; (8004e10 <TIM_OC5_SetConfig+0xac>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00b      	beq.n	8004dd6 <TIM_OC5_SetConfig+0x72>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <TIM_OC5_SetConfig+0xb0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d007      	beq.n	8004dd6 <TIM_OC5_SetConfig+0x72>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <TIM_OC5_SetConfig+0xb4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_OC5_SetConfig+0x72>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a12      	ldr	r2, [pc, #72]	; (8004e1c <TIM_OC5_SetConfig+0xb8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d109      	bne.n	8004dea <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	621a      	str	r2, [r3, #32]
}
 8004e04:	bf00      	nop
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	40012c00 	.word	0x40012c00
 8004e14:	40014000 	.word	0x40014000
 8004e18:	40014400 	.word	0x40014400
 8004e1c:	40014800 	.word	0x40014800

08004e20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	051b      	lsls	r3, r3, #20
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <TIM_OC6_SetConfig+0xb0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <TIM_OC6_SetConfig+0x74>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <TIM_OC6_SetConfig+0xb4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d007      	beq.n	8004e94 <TIM_OC6_SetConfig+0x74>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a14      	ldr	r2, [pc, #80]	; (8004ed8 <TIM_OC6_SetConfig+0xb8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <TIM_OC6_SetConfig+0x74>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <TIM_OC6_SetConfig+0xbc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d109      	bne.n	8004ea8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	029b      	lsls	r3, r3, #10
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800

08004ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f023 0201 	bic.w	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 030a 	bic.w	r3, r3, #10
 8004f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b087      	sub	sp, #28
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f023 0210 	bic.w	r2, r3, #16
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	031b      	lsls	r3, r3, #12
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	621a      	str	r2, [r3, #32]
}
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f043 0307 	orr.w	r3, r3, #7
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	609a      	str	r2, [r3, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	021a      	lsls	r2, r3, #8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	609a      	str	r2, [r3, #8]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	2201      	movs	r2, #1
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a1a      	ldr	r2, [r3, #32]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	43db      	mvns	r3, r3
 8005036:	401a      	ands	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f003 031f 	and.w	r3, r3, #31
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	fa01 f303 	lsl.w	r3, r1, r3
 800504c:	431a      	orrs	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005074:	2302      	movs	r3, #2
 8005076:	e054      	b.n	8005122 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a24      	ldr	r2, [pc, #144]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d108      	bne.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a17      	ldr	r2, [pc, #92]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e0:	d009      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a13      	ldr	r2, [pc, #76]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a11      	ldr	r2, [pc, #68]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10c      	bne.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	4313      	orrs	r3, r2
 8005106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40012c00 	.word	0x40012c00
 8005134:	40000400 	.word	0x40000400
 8005138:	40014000 	.word	0x40014000

0800513c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e040      	b.n	80051d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fc fc30 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2224      	movs	r2, #36	; 0x24
 8005168:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f8c0 	bl	8005300 <UART_SetConfig>
 8005180:	4603      	mov	r3, r0
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e022      	b.n	80051d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9ea 	bl	800556c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fa71 	bl	80056b0 <UART_CheckIdleState>
 80051ce:	4603      	mov	r3, r0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	f040 8082 	bne.w	80052f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <HAL_UART_Transmit+0x26>
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e07a      	b.n	80052f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_UART_Transmit+0x38>
 800520c:	2302      	movs	r3, #2
 800520e:	e073      	b.n	80052f8 <HAL_UART_Transmit+0x120>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2221      	movs	r2, #33	; 0x21
 8005224:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005226:	f7fc ff9d 	bl	8002164 <HAL_GetTick>
 800522a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	88fa      	ldrh	r2, [r7, #6]
 8005230:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	88fa      	ldrh	r2, [r7, #6]
 8005238:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005244:	d108      	bne.n	8005258 <HAL_UART_Transmit+0x80>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	e003      	b.n	8005260 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005268:	e02d      	b.n	80052c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2200      	movs	r2, #0
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fa64 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e039      	b.n	80052f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	881a      	ldrh	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005296:	b292      	uxth	r2, r2
 8005298:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	3302      	adds	r3, #2
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	e008      	b.n	80052b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	781a      	ldrb	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	b292      	uxth	r2, r2
 80052ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	3301      	adds	r3, #1
 80052b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1cb      	bne.n	800526a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2200      	movs	r2, #0
 80052da:	2140      	movs	r1, #64	; 0x40
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 fa30 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e005      	b.n	80052f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e000      	b.n	80052f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80052f6:	2302      	movs	r3, #2
  }
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b8a      	ldr	r3, [pc, #552]	; (8005554 <UART_SetConfig+0x254>)
 800532c:	4013      	ands	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	6979      	ldr	r1, [r7, #20]
 8005334:	430b      	orrs	r3, r1
 8005336:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	430a      	orrs	r2, r1
 8005370:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a78      	ldr	r2, [pc, #480]	; (8005558 <UART_SetConfig+0x258>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d120      	bne.n	80053be <UART_SetConfig+0xbe>
 800537c:	4b77      	ldr	r3, [pc, #476]	; (800555c <UART_SetConfig+0x25c>)
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	2b03      	cmp	r3, #3
 8005386:	d817      	bhi.n	80053b8 <UART_SetConfig+0xb8>
 8005388:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <UART_SetConfig+0x90>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053a1 	.word	0x080053a1
 8005394:	080053ad 	.word	0x080053ad
 8005398:	080053b3 	.word	0x080053b3
 800539c:	080053a7 	.word	0x080053a7
 80053a0:	2300      	movs	r3, #0
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e01d      	b.n	80053e2 <UART_SetConfig+0xe2>
 80053a6:	2302      	movs	r3, #2
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e01a      	b.n	80053e2 <UART_SetConfig+0xe2>
 80053ac:	2304      	movs	r3, #4
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e017      	b.n	80053e2 <UART_SetConfig+0xe2>
 80053b2:	2308      	movs	r3, #8
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e014      	b.n	80053e2 <UART_SetConfig+0xe2>
 80053b8:	2310      	movs	r3, #16
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e011      	b.n	80053e2 <UART_SetConfig+0xe2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a67      	ldr	r2, [pc, #412]	; (8005560 <UART_SetConfig+0x260>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d102      	bne.n	80053ce <UART_SetConfig+0xce>
 80053c8:	2300      	movs	r3, #0
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e009      	b.n	80053e2 <UART_SetConfig+0xe2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a64      	ldr	r2, [pc, #400]	; (8005564 <UART_SetConfig+0x264>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d102      	bne.n	80053de <UART_SetConfig+0xde>
 80053d8:	2300      	movs	r3, #0
 80053da:	77fb      	strb	r3, [r7, #31]
 80053dc:	e001      	b.n	80053e2 <UART_SetConfig+0xe2>
 80053de:	2310      	movs	r3, #16
 80053e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ea:	d15b      	bne.n	80054a4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80053ec:	7ffb      	ldrb	r3, [r7, #31]
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d827      	bhi.n	8005442 <UART_SetConfig+0x142>
 80053f2:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <UART_SetConfig+0xf8>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	0800541d 	.word	0x0800541d
 80053fc:	08005425 	.word	0x08005425
 8005400:	0800542d 	.word	0x0800542d
 8005404:	08005443 	.word	0x08005443
 8005408:	08005433 	.word	0x08005433
 800540c:	08005443 	.word	0x08005443
 8005410:	08005443 	.word	0x08005443
 8005414:	08005443 	.word	0x08005443
 8005418:	0800543b 	.word	0x0800543b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800541c:	f7fe fd5e 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 8005420:	61b8      	str	r0, [r7, #24]
        break;
 8005422:	e013      	b.n	800544c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005424:	f7fe fd7c 	bl	8003f20 <HAL_RCC_GetPCLK2Freq>
 8005428:	61b8      	str	r0, [r7, #24]
        break;
 800542a:	e00f      	b.n	800544c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800542c:	4b4e      	ldr	r3, [pc, #312]	; (8005568 <UART_SetConfig+0x268>)
 800542e:	61bb      	str	r3, [r7, #24]
        break;
 8005430:	e00c      	b.n	800544c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005432:	f7fe fcdb 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8005436:	61b8      	str	r0, [r7, #24]
        break;
 8005438:	e008      	b.n	800544c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543e:	61bb      	str	r3, [r7, #24]
        break;
 8005440:	e004      	b.n	800544c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	77bb      	strb	r3, [r7, #30]
        break;
 800544a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d074      	beq.n	800553c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	005a      	lsls	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	441a      	add	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	fbb2 f3f3 	udiv	r3, r2, r3
 8005466:	b29b      	uxth	r3, r3
 8005468:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b0f      	cmp	r3, #15
 800546e:	d916      	bls.n	800549e <UART_SetConfig+0x19e>
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005476:	d212      	bcs.n	800549e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	b29b      	uxth	r3, r3
 800547c:	f023 030f 	bic.w	r3, r3, #15
 8005480:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	b29b      	uxth	r3, r3
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	b29a      	uxth	r2, r3
 800548e:	89fb      	ldrh	r3, [r7, #14]
 8005490:	4313      	orrs	r3, r2
 8005492:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	89fa      	ldrh	r2, [r7, #14]
 800549a:	60da      	str	r2, [r3, #12]
 800549c:	e04e      	b.n	800553c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	77bb      	strb	r3, [r7, #30]
 80054a2:	e04b      	b.n	800553c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054a4:	7ffb      	ldrb	r3, [r7, #31]
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d827      	bhi.n	80054fa <UART_SetConfig+0x1fa>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <UART_SetConfig+0x1b0>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054d5 	.word	0x080054d5
 80054b4:	080054dd 	.word	0x080054dd
 80054b8:	080054e5 	.word	0x080054e5
 80054bc:	080054fb 	.word	0x080054fb
 80054c0:	080054eb 	.word	0x080054eb
 80054c4:	080054fb 	.word	0x080054fb
 80054c8:	080054fb 	.word	0x080054fb
 80054cc:	080054fb 	.word	0x080054fb
 80054d0:	080054f3 	.word	0x080054f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d4:	f7fe fd02 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 80054d8:	61b8      	str	r0, [r7, #24]
        break;
 80054da:	e013      	b.n	8005504 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054dc:	f7fe fd20 	bl	8003f20 <HAL_RCC_GetPCLK2Freq>
 80054e0:	61b8      	str	r0, [r7, #24]
        break;
 80054e2:	e00f      	b.n	8005504 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e4:	4b20      	ldr	r3, [pc, #128]	; (8005568 <UART_SetConfig+0x268>)
 80054e6:	61bb      	str	r3, [r7, #24]
        break;
 80054e8:	e00c      	b.n	8005504 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ea:	f7fe fc7f 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 80054ee:	61b8      	str	r0, [r7, #24]
        break;
 80054f0:	e008      	b.n	8005504 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f6:	61bb      	str	r3, [r7, #24]
        break;
 80054f8:	e004      	b.n	8005504 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	77bb      	strb	r3, [r7, #30]
        break;
 8005502:	bf00      	nop
    }

    if (pclk != 0U)
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d018      	beq.n	800553c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	085a      	lsrs	r2, r3, #1
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	441a      	add	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	fbb2 f3f3 	udiv	r3, r2, r3
 800551c:	b29b      	uxth	r3, r3
 800551e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b0f      	cmp	r3, #15
 8005524:	d908      	bls.n	8005538 <UART_SetConfig+0x238>
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552c:	d204      	bcs.n	8005538 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	60da      	str	r2, [r3, #12]
 8005536:	e001      	b.n	800553c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005548:	7fbb      	ldrb	r3, [r7, #30]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3720      	adds	r7, #32
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	efff69f3 	.word	0xefff69f3
 8005558:	40013800 	.word	0x40013800
 800555c:	40021000 	.word	0x40021000
 8005560:	40004400 	.word	0x40004400
 8005564:	40004800 	.word	0x40004800
 8005568:	007a1200 	.word	0x007a1200

0800556c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01a      	beq.n	8005682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566a:	d10a      	bne.n	8005682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
  }
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056c0:	f7fc fd50 	bl	8002164 <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d10e      	bne.n	80056f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f82d 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e023      	b.n	800573a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d10e      	bne.n	800571e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f817 	bl	8005742 <UART_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e00d      	b.n	800573a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	603b      	str	r3, [r7, #0]
 800574e:	4613      	mov	r3, r2
 8005750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005752:	e05e      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d05a      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575c:	f7fc fd02 	bl	8002164 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	429a      	cmp	r2, r3
 800576a:	d302      	bcc.n	8005772 <UART_WaitOnFlagUntilTimeout+0x30>
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d11b      	bne.n	80057aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005780:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e043      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d02c      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c6:	d124      	bne.n	8005812 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0201 	bic.w	r2, r2, #1
 80057f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e00f      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	429a      	cmp	r2, r3
 8005820:	bf0c      	ite	eq
 8005822:	2301      	moveq	r3, #1
 8005824:	2300      	movne	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	429a      	cmp	r2, r3
 800582e:	d091      	beq.n	8005754 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <__errno>:
 800583c:	4b01      	ldr	r3, [pc, #4]	; (8005844 <__errno+0x8>)
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000001c 	.word	0x2000001c

08005848 <__libc_init_array>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4d0d      	ldr	r5, [pc, #52]	; (8005880 <__libc_init_array+0x38>)
 800584c:	4c0d      	ldr	r4, [pc, #52]	; (8005884 <__libc_init_array+0x3c>)
 800584e:	1b64      	subs	r4, r4, r5
 8005850:	10a4      	asrs	r4, r4, #2
 8005852:	2600      	movs	r6, #0
 8005854:	42a6      	cmp	r6, r4
 8005856:	d109      	bne.n	800586c <__libc_init_array+0x24>
 8005858:	4d0b      	ldr	r5, [pc, #44]	; (8005888 <__libc_init_array+0x40>)
 800585a:	4c0c      	ldr	r4, [pc, #48]	; (800588c <__libc_init_array+0x44>)
 800585c:	f000 ff76 	bl	800674c <_init>
 8005860:	1b64      	subs	r4, r4, r5
 8005862:	10a4      	asrs	r4, r4, #2
 8005864:	2600      	movs	r6, #0
 8005866:	42a6      	cmp	r6, r4
 8005868:	d105      	bne.n	8005876 <__libc_init_array+0x2e>
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005870:	4798      	blx	r3
 8005872:	3601      	adds	r6, #1
 8005874:	e7ee      	b.n	8005854 <__libc_init_array+0xc>
 8005876:	f855 3b04 	ldr.w	r3, [r5], #4
 800587a:	4798      	blx	r3
 800587c:	3601      	adds	r6, #1
 800587e:	e7f2      	b.n	8005866 <__libc_init_array+0x1e>
 8005880:	080068c0 	.word	0x080068c0
 8005884:	080068c0 	.word	0x080068c0
 8005888:	080068c0 	.word	0x080068c0
 800588c:	080068c4 	.word	0x080068c4

08005890 <memset>:
 8005890:	4402      	add	r2, r0
 8005892:	4603      	mov	r3, r0
 8005894:	4293      	cmp	r3, r2
 8005896:	d100      	bne.n	800589a <memset+0xa>
 8005898:	4770      	bx	lr
 800589a:	f803 1b01 	strb.w	r1, [r3], #1
 800589e:	e7f9      	b.n	8005894 <memset+0x4>

080058a0 <iprintf>:
 80058a0:	b40f      	push	{r0, r1, r2, r3}
 80058a2:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <iprintf+0x2c>)
 80058a4:	b513      	push	{r0, r1, r4, lr}
 80058a6:	681c      	ldr	r4, [r3, #0]
 80058a8:	b124      	cbz	r4, 80058b4 <iprintf+0x14>
 80058aa:	69a3      	ldr	r3, [r4, #24]
 80058ac:	b913      	cbnz	r3, 80058b4 <iprintf+0x14>
 80058ae:	4620      	mov	r0, r4
 80058b0:	f000 f866 	bl	8005980 <__sinit>
 80058b4:	ab05      	add	r3, sp, #20
 80058b6:	9a04      	ldr	r2, [sp, #16]
 80058b8:	68a1      	ldr	r1, [r4, #8]
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 f983 	bl	8005bc8 <_vfiprintf_r>
 80058c2:	b002      	add	sp, #8
 80058c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c8:	b004      	add	sp, #16
 80058ca:	4770      	bx	lr
 80058cc:	2000001c 	.word	0x2000001c

080058d0 <std>:
 80058d0:	2300      	movs	r3, #0
 80058d2:	b510      	push	{r4, lr}
 80058d4:	4604      	mov	r4, r0
 80058d6:	e9c0 3300 	strd	r3, r3, [r0]
 80058da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058de:	6083      	str	r3, [r0, #8]
 80058e0:	8181      	strh	r1, [r0, #12]
 80058e2:	6643      	str	r3, [r0, #100]	; 0x64
 80058e4:	81c2      	strh	r2, [r0, #14]
 80058e6:	6183      	str	r3, [r0, #24]
 80058e8:	4619      	mov	r1, r3
 80058ea:	2208      	movs	r2, #8
 80058ec:	305c      	adds	r0, #92	; 0x5c
 80058ee:	f7ff ffcf 	bl	8005890 <memset>
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <std+0x38>)
 80058f4:	6263      	str	r3, [r4, #36]	; 0x24
 80058f6:	4b05      	ldr	r3, [pc, #20]	; (800590c <std+0x3c>)
 80058f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <std+0x40>)
 80058fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <std+0x44>)
 8005900:	6224      	str	r4, [r4, #32]
 8005902:	6323      	str	r3, [r4, #48]	; 0x30
 8005904:	bd10      	pop	{r4, pc}
 8005906:	bf00      	nop
 8005908:	08006171 	.word	0x08006171
 800590c:	08006193 	.word	0x08006193
 8005910:	080061cb 	.word	0x080061cb
 8005914:	080061ef 	.word	0x080061ef

08005918 <_cleanup_r>:
 8005918:	4901      	ldr	r1, [pc, #4]	; (8005920 <_cleanup_r+0x8>)
 800591a:	f000 b8af 	b.w	8005a7c <_fwalk_reent>
 800591e:	bf00      	nop
 8005920:	080064c9 	.word	0x080064c9

08005924 <__sfmoreglue>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	1e4a      	subs	r2, r1, #1
 8005928:	2568      	movs	r5, #104	; 0x68
 800592a:	4355      	muls	r5, r2
 800592c:	460e      	mov	r6, r1
 800592e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005932:	f000 f8c5 	bl	8005ac0 <_malloc_r>
 8005936:	4604      	mov	r4, r0
 8005938:	b140      	cbz	r0, 800594c <__sfmoreglue+0x28>
 800593a:	2100      	movs	r1, #0
 800593c:	e9c0 1600 	strd	r1, r6, [r0]
 8005940:	300c      	adds	r0, #12
 8005942:	60a0      	str	r0, [r4, #8]
 8005944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005948:	f7ff ffa2 	bl	8005890 <memset>
 800594c:	4620      	mov	r0, r4
 800594e:	bd70      	pop	{r4, r5, r6, pc}

08005950 <__sfp_lock_acquire>:
 8005950:	4801      	ldr	r0, [pc, #4]	; (8005958 <__sfp_lock_acquire+0x8>)
 8005952:	f000 b8b3 	b.w	8005abc <__retarget_lock_acquire_recursive>
 8005956:	bf00      	nop
 8005958:	2000028c 	.word	0x2000028c

0800595c <__sfp_lock_release>:
 800595c:	4801      	ldr	r0, [pc, #4]	; (8005964 <__sfp_lock_release+0x8>)
 800595e:	f000 b8ae 	b.w	8005abe <__retarget_lock_release_recursive>
 8005962:	bf00      	nop
 8005964:	2000028c 	.word	0x2000028c

08005968 <__sinit_lock_acquire>:
 8005968:	4801      	ldr	r0, [pc, #4]	; (8005970 <__sinit_lock_acquire+0x8>)
 800596a:	f000 b8a7 	b.w	8005abc <__retarget_lock_acquire_recursive>
 800596e:	bf00      	nop
 8005970:	20000287 	.word	0x20000287

08005974 <__sinit_lock_release>:
 8005974:	4801      	ldr	r0, [pc, #4]	; (800597c <__sinit_lock_release+0x8>)
 8005976:	f000 b8a2 	b.w	8005abe <__retarget_lock_release_recursive>
 800597a:	bf00      	nop
 800597c:	20000287 	.word	0x20000287

08005980 <__sinit>:
 8005980:	b510      	push	{r4, lr}
 8005982:	4604      	mov	r4, r0
 8005984:	f7ff fff0 	bl	8005968 <__sinit_lock_acquire>
 8005988:	69a3      	ldr	r3, [r4, #24]
 800598a:	b11b      	cbz	r3, 8005994 <__sinit+0x14>
 800598c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005990:	f7ff bff0 	b.w	8005974 <__sinit_lock_release>
 8005994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005998:	6523      	str	r3, [r4, #80]	; 0x50
 800599a:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <__sinit+0x68>)
 800599c:	4a13      	ldr	r2, [pc, #76]	; (80059ec <__sinit+0x6c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80059a2:	42a3      	cmp	r3, r4
 80059a4:	bf04      	itt	eq
 80059a6:	2301      	moveq	r3, #1
 80059a8:	61a3      	streq	r3, [r4, #24]
 80059aa:	4620      	mov	r0, r4
 80059ac:	f000 f820 	bl	80059f0 <__sfp>
 80059b0:	6060      	str	r0, [r4, #4]
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 f81c 	bl	80059f0 <__sfp>
 80059b8:	60a0      	str	r0, [r4, #8]
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 f818 	bl	80059f0 <__sfp>
 80059c0:	2200      	movs	r2, #0
 80059c2:	60e0      	str	r0, [r4, #12]
 80059c4:	2104      	movs	r1, #4
 80059c6:	6860      	ldr	r0, [r4, #4]
 80059c8:	f7ff ff82 	bl	80058d0 <std>
 80059cc:	68a0      	ldr	r0, [r4, #8]
 80059ce:	2201      	movs	r2, #1
 80059d0:	2109      	movs	r1, #9
 80059d2:	f7ff ff7d 	bl	80058d0 <std>
 80059d6:	68e0      	ldr	r0, [r4, #12]
 80059d8:	2202      	movs	r2, #2
 80059da:	2112      	movs	r1, #18
 80059dc:	f7ff ff78 	bl	80058d0 <std>
 80059e0:	2301      	movs	r3, #1
 80059e2:	61a3      	str	r3, [r4, #24]
 80059e4:	e7d2      	b.n	800598c <__sinit+0xc>
 80059e6:	bf00      	nop
 80059e8:	08006828 	.word	0x08006828
 80059ec:	08005919 	.word	0x08005919

080059f0 <__sfp>:
 80059f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f2:	4607      	mov	r7, r0
 80059f4:	f7ff ffac 	bl	8005950 <__sfp_lock_acquire>
 80059f8:	4b1e      	ldr	r3, [pc, #120]	; (8005a74 <__sfp+0x84>)
 80059fa:	681e      	ldr	r6, [r3, #0]
 80059fc:	69b3      	ldr	r3, [r6, #24]
 80059fe:	b913      	cbnz	r3, 8005a06 <__sfp+0x16>
 8005a00:	4630      	mov	r0, r6
 8005a02:	f7ff ffbd 	bl	8005980 <__sinit>
 8005a06:	3648      	adds	r6, #72	; 0x48
 8005a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	d503      	bpl.n	8005a18 <__sfp+0x28>
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	b30b      	cbz	r3, 8005a58 <__sfp+0x68>
 8005a14:	6836      	ldr	r6, [r6, #0]
 8005a16:	e7f7      	b.n	8005a08 <__sfp+0x18>
 8005a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a1c:	b9d5      	cbnz	r5, 8005a54 <__sfp+0x64>
 8005a1e:	4b16      	ldr	r3, [pc, #88]	; (8005a78 <__sfp+0x88>)
 8005a20:	60e3      	str	r3, [r4, #12]
 8005a22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a26:	6665      	str	r5, [r4, #100]	; 0x64
 8005a28:	f000 f847 	bl	8005aba <__retarget_lock_init_recursive>
 8005a2c:	f7ff ff96 	bl	800595c <__sfp_lock_release>
 8005a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a38:	6025      	str	r5, [r4, #0]
 8005a3a:	61a5      	str	r5, [r4, #24]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	4629      	mov	r1, r5
 8005a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a44:	f7ff ff24 	bl	8005890 <memset>
 8005a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a50:	4620      	mov	r0, r4
 8005a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a54:	3468      	adds	r4, #104	; 0x68
 8005a56:	e7d9      	b.n	8005a0c <__sfp+0x1c>
 8005a58:	2104      	movs	r1, #4
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	f7ff ff62 	bl	8005924 <__sfmoreglue>
 8005a60:	4604      	mov	r4, r0
 8005a62:	6030      	str	r0, [r6, #0]
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d1d5      	bne.n	8005a14 <__sfp+0x24>
 8005a68:	f7ff ff78 	bl	800595c <__sfp_lock_release>
 8005a6c:	230c      	movs	r3, #12
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	e7ee      	b.n	8005a50 <__sfp+0x60>
 8005a72:	bf00      	nop
 8005a74:	08006828 	.word	0x08006828
 8005a78:	ffff0001 	.word	0xffff0001

08005a7c <_fwalk_reent>:
 8005a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a80:	4606      	mov	r6, r0
 8005a82:	4688      	mov	r8, r1
 8005a84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a88:	2700      	movs	r7, #0
 8005a8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a8e:	f1b9 0901 	subs.w	r9, r9, #1
 8005a92:	d505      	bpl.n	8005aa0 <_fwalk_reent+0x24>
 8005a94:	6824      	ldr	r4, [r4, #0]
 8005a96:	2c00      	cmp	r4, #0
 8005a98:	d1f7      	bne.n	8005a8a <_fwalk_reent+0xe>
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aa0:	89ab      	ldrh	r3, [r5, #12]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d907      	bls.n	8005ab6 <_fwalk_reent+0x3a>
 8005aa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	d003      	beq.n	8005ab6 <_fwalk_reent+0x3a>
 8005aae:	4629      	mov	r1, r5
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	47c0      	blx	r8
 8005ab4:	4307      	orrs	r7, r0
 8005ab6:	3568      	adds	r5, #104	; 0x68
 8005ab8:	e7e9      	b.n	8005a8e <_fwalk_reent+0x12>

08005aba <__retarget_lock_init_recursive>:
 8005aba:	4770      	bx	lr

08005abc <__retarget_lock_acquire_recursive>:
 8005abc:	4770      	bx	lr

08005abe <__retarget_lock_release_recursive>:
 8005abe:	4770      	bx	lr

08005ac0 <_malloc_r>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	1ccd      	adds	r5, r1, #3
 8005ac4:	f025 0503 	bic.w	r5, r5, #3
 8005ac8:	3508      	adds	r5, #8
 8005aca:	2d0c      	cmp	r5, #12
 8005acc:	bf38      	it	cc
 8005ace:	250c      	movcc	r5, #12
 8005ad0:	2d00      	cmp	r5, #0
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	db01      	blt.n	8005ada <_malloc_r+0x1a>
 8005ad6:	42a9      	cmp	r1, r5
 8005ad8:	d903      	bls.n	8005ae2 <_malloc_r+0x22>
 8005ada:	230c      	movs	r3, #12
 8005adc:	6033      	str	r3, [r6, #0]
 8005ade:	2000      	movs	r0, #0
 8005ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae2:	f000 fda3 	bl	800662c <__malloc_lock>
 8005ae6:	4921      	ldr	r1, [pc, #132]	; (8005b6c <_malloc_r+0xac>)
 8005ae8:	680a      	ldr	r2, [r1, #0]
 8005aea:	4614      	mov	r4, r2
 8005aec:	b99c      	cbnz	r4, 8005b16 <_malloc_r+0x56>
 8005aee:	4f20      	ldr	r7, [pc, #128]	; (8005b70 <_malloc_r+0xb0>)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	b923      	cbnz	r3, 8005afe <_malloc_r+0x3e>
 8005af4:	4621      	mov	r1, r4
 8005af6:	4630      	mov	r0, r6
 8005af8:	f000 fb2a 	bl	8006150 <_sbrk_r>
 8005afc:	6038      	str	r0, [r7, #0]
 8005afe:	4629      	mov	r1, r5
 8005b00:	4630      	mov	r0, r6
 8005b02:	f000 fb25 	bl	8006150 <_sbrk_r>
 8005b06:	1c43      	adds	r3, r0, #1
 8005b08:	d123      	bne.n	8005b52 <_malloc_r+0x92>
 8005b0a:	230c      	movs	r3, #12
 8005b0c:	6033      	str	r3, [r6, #0]
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f000 fd92 	bl	8006638 <__malloc_unlock>
 8005b14:	e7e3      	b.n	8005ade <_malloc_r+0x1e>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	1b5b      	subs	r3, r3, r5
 8005b1a:	d417      	bmi.n	8005b4c <_malloc_r+0x8c>
 8005b1c:	2b0b      	cmp	r3, #11
 8005b1e:	d903      	bls.n	8005b28 <_malloc_r+0x68>
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	441c      	add	r4, r3
 8005b24:	6025      	str	r5, [r4, #0]
 8005b26:	e004      	b.n	8005b32 <_malloc_r+0x72>
 8005b28:	6863      	ldr	r3, [r4, #4]
 8005b2a:	42a2      	cmp	r2, r4
 8005b2c:	bf0c      	ite	eq
 8005b2e:	600b      	streq	r3, [r1, #0]
 8005b30:	6053      	strne	r3, [r2, #4]
 8005b32:	4630      	mov	r0, r6
 8005b34:	f000 fd80 	bl	8006638 <__malloc_unlock>
 8005b38:	f104 000b 	add.w	r0, r4, #11
 8005b3c:	1d23      	adds	r3, r4, #4
 8005b3e:	f020 0007 	bic.w	r0, r0, #7
 8005b42:	1ac2      	subs	r2, r0, r3
 8005b44:	d0cc      	beq.n	8005ae0 <_malloc_r+0x20>
 8005b46:	1a1b      	subs	r3, r3, r0
 8005b48:	50a3      	str	r3, [r4, r2]
 8005b4a:	e7c9      	b.n	8005ae0 <_malloc_r+0x20>
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	6864      	ldr	r4, [r4, #4]
 8005b50:	e7cc      	b.n	8005aec <_malloc_r+0x2c>
 8005b52:	1cc4      	adds	r4, r0, #3
 8005b54:	f024 0403 	bic.w	r4, r4, #3
 8005b58:	42a0      	cmp	r0, r4
 8005b5a:	d0e3      	beq.n	8005b24 <_malloc_r+0x64>
 8005b5c:	1a21      	subs	r1, r4, r0
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f000 faf6 	bl	8006150 <_sbrk_r>
 8005b64:	3001      	adds	r0, #1
 8005b66:	d1dd      	bne.n	8005b24 <_malloc_r+0x64>
 8005b68:	e7cf      	b.n	8005b0a <_malloc_r+0x4a>
 8005b6a:	bf00      	nop
 8005b6c:	200000bc 	.word	0x200000bc
 8005b70:	200000c0 	.word	0x200000c0

08005b74 <__sfputc_r>:
 8005b74:	6893      	ldr	r3, [r2, #8]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	b410      	push	{r4}
 8005b7c:	6093      	str	r3, [r2, #8]
 8005b7e:	da08      	bge.n	8005b92 <__sfputc_r+0x1e>
 8005b80:	6994      	ldr	r4, [r2, #24]
 8005b82:	42a3      	cmp	r3, r4
 8005b84:	db01      	blt.n	8005b8a <__sfputc_r+0x16>
 8005b86:	290a      	cmp	r1, #10
 8005b88:	d103      	bne.n	8005b92 <__sfputc_r+0x1e>
 8005b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b8e:	f000 bb33 	b.w	80061f8 <__swbuf_r>
 8005b92:	6813      	ldr	r3, [r2, #0]
 8005b94:	1c58      	adds	r0, r3, #1
 8005b96:	6010      	str	r0, [r2, #0]
 8005b98:	7019      	strb	r1, [r3, #0]
 8005b9a:	4608      	mov	r0, r1
 8005b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <__sfputs_r>:
 8005ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	460f      	mov	r7, r1
 8005ba8:	4614      	mov	r4, r2
 8005baa:	18d5      	adds	r5, r2, r3
 8005bac:	42ac      	cmp	r4, r5
 8005bae:	d101      	bne.n	8005bb4 <__sfputs_r+0x12>
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	e007      	b.n	8005bc4 <__sfputs_r+0x22>
 8005bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb8:	463a      	mov	r2, r7
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7ff ffda 	bl	8005b74 <__sfputc_r>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d1f3      	bne.n	8005bac <__sfputs_r+0xa>
 8005bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bc8 <_vfiprintf_r>:
 8005bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	460d      	mov	r5, r1
 8005bce:	b09d      	sub	sp, #116	; 0x74
 8005bd0:	4614      	mov	r4, r2
 8005bd2:	4698      	mov	r8, r3
 8005bd4:	4606      	mov	r6, r0
 8005bd6:	b118      	cbz	r0, 8005be0 <_vfiprintf_r+0x18>
 8005bd8:	6983      	ldr	r3, [r0, #24]
 8005bda:	b90b      	cbnz	r3, 8005be0 <_vfiprintf_r+0x18>
 8005bdc:	f7ff fed0 	bl	8005980 <__sinit>
 8005be0:	4b89      	ldr	r3, [pc, #548]	; (8005e08 <_vfiprintf_r+0x240>)
 8005be2:	429d      	cmp	r5, r3
 8005be4:	d11b      	bne.n	8005c1e <_vfiprintf_r+0x56>
 8005be6:	6875      	ldr	r5, [r6, #4]
 8005be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bea:	07d9      	lsls	r1, r3, #31
 8005bec:	d405      	bmi.n	8005bfa <_vfiprintf_r+0x32>
 8005bee:	89ab      	ldrh	r3, [r5, #12]
 8005bf0:	059a      	lsls	r2, r3, #22
 8005bf2:	d402      	bmi.n	8005bfa <_vfiprintf_r+0x32>
 8005bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bf6:	f7ff ff61 	bl	8005abc <__retarget_lock_acquire_recursive>
 8005bfa:	89ab      	ldrh	r3, [r5, #12]
 8005bfc:	071b      	lsls	r3, r3, #28
 8005bfe:	d501      	bpl.n	8005c04 <_vfiprintf_r+0x3c>
 8005c00:	692b      	ldr	r3, [r5, #16]
 8005c02:	b9eb      	cbnz	r3, 8005c40 <_vfiprintf_r+0x78>
 8005c04:	4629      	mov	r1, r5
 8005c06:	4630      	mov	r0, r6
 8005c08:	f000 fb5a 	bl	80062c0 <__swsetup_r>
 8005c0c:	b1c0      	cbz	r0, 8005c40 <_vfiprintf_r+0x78>
 8005c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c10:	07dc      	lsls	r4, r3, #31
 8005c12:	d50e      	bpl.n	8005c32 <_vfiprintf_r+0x6a>
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295
 8005c18:	b01d      	add	sp, #116	; 0x74
 8005c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1e:	4b7b      	ldr	r3, [pc, #492]	; (8005e0c <_vfiprintf_r+0x244>)
 8005c20:	429d      	cmp	r5, r3
 8005c22:	d101      	bne.n	8005c28 <_vfiprintf_r+0x60>
 8005c24:	68b5      	ldr	r5, [r6, #8]
 8005c26:	e7df      	b.n	8005be8 <_vfiprintf_r+0x20>
 8005c28:	4b79      	ldr	r3, [pc, #484]	; (8005e10 <_vfiprintf_r+0x248>)
 8005c2a:	429d      	cmp	r5, r3
 8005c2c:	bf08      	it	eq
 8005c2e:	68f5      	ldreq	r5, [r6, #12]
 8005c30:	e7da      	b.n	8005be8 <_vfiprintf_r+0x20>
 8005c32:	89ab      	ldrh	r3, [r5, #12]
 8005c34:	0598      	lsls	r0, r3, #22
 8005c36:	d4ed      	bmi.n	8005c14 <_vfiprintf_r+0x4c>
 8005c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c3a:	f7ff ff40 	bl	8005abe <__retarget_lock_release_recursive>
 8005c3e:	e7e9      	b.n	8005c14 <_vfiprintf_r+0x4c>
 8005c40:	2300      	movs	r3, #0
 8005c42:	9309      	str	r3, [sp, #36]	; 0x24
 8005c44:	2320      	movs	r3, #32
 8005c46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c4e:	2330      	movs	r3, #48	; 0x30
 8005c50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e14 <_vfiprintf_r+0x24c>
 8005c54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c58:	f04f 0901 	mov.w	r9, #1
 8005c5c:	4623      	mov	r3, r4
 8005c5e:	469a      	mov	sl, r3
 8005c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c64:	b10a      	cbz	r2, 8005c6a <_vfiprintf_r+0xa2>
 8005c66:	2a25      	cmp	r2, #37	; 0x25
 8005c68:	d1f9      	bne.n	8005c5e <_vfiprintf_r+0x96>
 8005c6a:	ebba 0b04 	subs.w	fp, sl, r4
 8005c6e:	d00b      	beq.n	8005c88 <_vfiprintf_r+0xc0>
 8005c70:	465b      	mov	r3, fp
 8005c72:	4622      	mov	r2, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	4630      	mov	r0, r6
 8005c78:	f7ff ff93 	bl	8005ba2 <__sfputs_r>
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	f000 80aa 	beq.w	8005dd6 <_vfiprintf_r+0x20e>
 8005c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c84:	445a      	add	r2, fp
 8005c86:	9209      	str	r2, [sp, #36]	; 0x24
 8005c88:	f89a 3000 	ldrb.w	r3, [sl]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 80a2 	beq.w	8005dd6 <_vfiprintf_r+0x20e>
 8005c92:	2300      	movs	r3, #0
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c9c:	f10a 0a01 	add.w	sl, sl, #1
 8005ca0:	9304      	str	r3, [sp, #16]
 8005ca2:	9307      	str	r3, [sp, #28]
 8005ca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ca8:	931a      	str	r3, [sp, #104]	; 0x68
 8005caa:	4654      	mov	r4, sl
 8005cac:	2205      	movs	r2, #5
 8005cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb2:	4858      	ldr	r0, [pc, #352]	; (8005e14 <_vfiprintf_r+0x24c>)
 8005cb4:	f7fa fa94 	bl	80001e0 <memchr>
 8005cb8:	9a04      	ldr	r2, [sp, #16]
 8005cba:	b9d8      	cbnz	r0, 8005cf4 <_vfiprintf_r+0x12c>
 8005cbc:	06d1      	lsls	r1, r2, #27
 8005cbe:	bf44      	itt	mi
 8005cc0:	2320      	movmi	r3, #32
 8005cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cc6:	0713      	lsls	r3, r2, #28
 8005cc8:	bf44      	itt	mi
 8005cca:	232b      	movmi	r3, #43	; 0x2b
 8005ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8005cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8005cd6:	d015      	beq.n	8005d04 <_vfiprintf_r+0x13c>
 8005cd8:	9a07      	ldr	r2, [sp, #28]
 8005cda:	4654      	mov	r4, sl
 8005cdc:	2000      	movs	r0, #0
 8005cde:	f04f 0c0a 	mov.w	ip, #10
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ce8:	3b30      	subs	r3, #48	; 0x30
 8005cea:	2b09      	cmp	r3, #9
 8005cec:	d94e      	bls.n	8005d8c <_vfiprintf_r+0x1c4>
 8005cee:	b1b0      	cbz	r0, 8005d1e <_vfiprintf_r+0x156>
 8005cf0:	9207      	str	r2, [sp, #28]
 8005cf2:	e014      	b.n	8005d1e <_vfiprintf_r+0x156>
 8005cf4:	eba0 0308 	sub.w	r3, r0, r8
 8005cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	9304      	str	r3, [sp, #16]
 8005d00:	46a2      	mov	sl, r4
 8005d02:	e7d2      	b.n	8005caa <_vfiprintf_r+0xe2>
 8005d04:	9b03      	ldr	r3, [sp, #12]
 8005d06:	1d19      	adds	r1, r3, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	9103      	str	r1, [sp, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	bfbb      	ittet	lt
 8005d10:	425b      	neglt	r3, r3
 8005d12:	f042 0202 	orrlt.w	r2, r2, #2
 8005d16:	9307      	strge	r3, [sp, #28]
 8005d18:	9307      	strlt	r3, [sp, #28]
 8005d1a:	bfb8      	it	lt
 8005d1c:	9204      	strlt	r2, [sp, #16]
 8005d1e:	7823      	ldrb	r3, [r4, #0]
 8005d20:	2b2e      	cmp	r3, #46	; 0x2e
 8005d22:	d10c      	bne.n	8005d3e <_vfiprintf_r+0x176>
 8005d24:	7863      	ldrb	r3, [r4, #1]
 8005d26:	2b2a      	cmp	r3, #42	; 0x2a
 8005d28:	d135      	bne.n	8005d96 <_vfiprintf_r+0x1ce>
 8005d2a:	9b03      	ldr	r3, [sp, #12]
 8005d2c:	1d1a      	adds	r2, r3, #4
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	9203      	str	r2, [sp, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bfb8      	it	lt
 8005d36:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d3a:	3402      	adds	r4, #2
 8005d3c:	9305      	str	r3, [sp, #20]
 8005d3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e24 <_vfiprintf_r+0x25c>
 8005d42:	7821      	ldrb	r1, [r4, #0]
 8005d44:	2203      	movs	r2, #3
 8005d46:	4650      	mov	r0, sl
 8005d48:	f7fa fa4a 	bl	80001e0 <memchr>
 8005d4c:	b140      	cbz	r0, 8005d60 <_vfiprintf_r+0x198>
 8005d4e:	2340      	movs	r3, #64	; 0x40
 8005d50:	eba0 000a 	sub.w	r0, r0, sl
 8005d54:	fa03 f000 	lsl.w	r0, r3, r0
 8005d58:	9b04      	ldr	r3, [sp, #16]
 8005d5a:	4303      	orrs	r3, r0
 8005d5c:	3401      	adds	r4, #1
 8005d5e:	9304      	str	r3, [sp, #16]
 8005d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d64:	482c      	ldr	r0, [pc, #176]	; (8005e18 <_vfiprintf_r+0x250>)
 8005d66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d6a:	2206      	movs	r2, #6
 8005d6c:	f7fa fa38 	bl	80001e0 <memchr>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d03f      	beq.n	8005df4 <_vfiprintf_r+0x22c>
 8005d74:	4b29      	ldr	r3, [pc, #164]	; (8005e1c <_vfiprintf_r+0x254>)
 8005d76:	bb1b      	cbnz	r3, 8005dc0 <_vfiprintf_r+0x1f8>
 8005d78:	9b03      	ldr	r3, [sp, #12]
 8005d7a:	3307      	adds	r3, #7
 8005d7c:	f023 0307 	bic.w	r3, r3, #7
 8005d80:	3308      	adds	r3, #8
 8005d82:	9303      	str	r3, [sp, #12]
 8005d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d86:	443b      	add	r3, r7
 8005d88:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8a:	e767      	b.n	8005c5c <_vfiprintf_r+0x94>
 8005d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d90:	460c      	mov	r4, r1
 8005d92:	2001      	movs	r0, #1
 8005d94:	e7a5      	b.n	8005ce2 <_vfiprintf_r+0x11a>
 8005d96:	2300      	movs	r3, #0
 8005d98:	3401      	adds	r4, #1
 8005d9a:	9305      	str	r3, [sp, #20]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	f04f 0c0a 	mov.w	ip, #10
 8005da2:	4620      	mov	r0, r4
 8005da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005da8:	3a30      	subs	r2, #48	; 0x30
 8005daa:	2a09      	cmp	r2, #9
 8005dac:	d903      	bls.n	8005db6 <_vfiprintf_r+0x1ee>
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0c5      	beq.n	8005d3e <_vfiprintf_r+0x176>
 8005db2:	9105      	str	r1, [sp, #20]
 8005db4:	e7c3      	b.n	8005d3e <_vfiprintf_r+0x176>
 8005db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dba:	4604      	mov	r4, r0
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e7f0      	b.n	8005da2 <_vfiprintf_r+0x1da>
 8005dc0:	ab03      	add	r3, sp, #12
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	462a      	mov	r2, r5
 8005dc6:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <_vfiprintf_r+0x258>)
 8005dc8:	a904      	add	r1, sp, #16
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f3af 8000 	nop.w
 8005dd0:	4607      	mov	r7, r0
 8005dd2:	1c78      	adds	r0, r7, #1
 8005dd4:	d1d6      	bne.n	8005d84 <_vfiprintf_r+0x1bc>
 8005dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dd8:	07d9      	lsls	r1, r3, #31
 8005dda:	d405      	bmi.n	8005de8 <_vfiprintf_r+0x220>
 8005ddc:	89ab      	ldrh	r3, [r5, #12]
 8005dde:	059a      	lsls	r2, r3, #22
 8005de0:	d402      	bmi.n	8005de8 <_vfiprintf_r+0x220>
 8005de2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005de4:	f7ff fe6b 	bl	8005abe <__retarget_lock_release_recursive>
 8005de8:	89ab      	ldrh	r3, [r5, #12]
 8005dea:	065b      	lsls	r3, r3, #25
 8005dec:	f53f af12 	bmi.w	8005c14 <_vfiprintf_r+0x4c>
 8005df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005df2:	e711      	b.n	8005c18 <_vfiprintf_r+0x50>
 8005df4:	ab03      	add	r3, sp, #12
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	462a      	mov	r2, r5
 8005dfa:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <_vfiprintf_r+0x258>)
 8005dfc:	a904      	add	r1, sp, #16
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f000 f880 	bl	8005f04 <_printf_i>
 8005e04:	e7e4      	b.n	8005dd0 <_vfiprintf_r+0x208>
 8005e06:	bf00      	nop
 8005e08:	0800684c 	.word	0x0800684c
 8005e0c:	0800686c 	.word	0x0800686c
 8005e10:	0800682c 	.word	0x0800682c
 8005e14:	0800688c 	.word	0x0800688c
 8005e18:	08006896 	.word	0x08006896
 8005e1c:	00000000 	.word	0x00000000
 8005e20:	08005ba3 	.word	0x08005ba3
 8005e24:	08006892 	.word	0x08006892

08005e28 <_printf_common>:
 8005e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e2c:	4616      	mov	r6, r2
 8005e2e:	4699      	mov	r9, r3
 8005e30:	688a      	ldr	r2, [r1, #8]
 8005e32:	690b      	ldr	r3, [r1, #16]
 8005e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	bfb8      	it	lt
 8005e3c:	4613      	movlt	r3, r2
 8005e3e:	6033      	str	r3, [r6, #0]
 8005e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e44:	4607      	mov	r7, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	b10a      	cbz	r2, 8005e4e <_printf_common+0x26>
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	6033      	str	r3, [r6, #0]
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	0699      	lsls	r1, r3, #26
 8005e52:	bf42      	ittt	mi
 8005e54:	6833      	ldrmi	r3, [r6, #0]
 8005e56:	3302      	addmi	r3, #2
 8005e58:	6033      	strmi	r3, [r6, #0]
 8005e5a:	6825      	ldr	r5, [r4, #0]
 8005e5c:	f015 0506 	ands.w	r5, r5, #6
 8005e60:	d106      	bne.n	8005e70 <_printf_common+0x48>
 8005e62:	f104 0a19 	add.w	sl, r4, #25
 8005e66:	68e3      	ldr	r3, [r4, #12]
 8005e68:	6832      	ldr	r2, [r6, #0]
 8005e6a:	1a9b      	subs	r3, r3, r2
 8005e6c:	42ab      	cmp	r3, r5
 8005e6e:	dc26      	bgt.n	8005ebe <_printf_common+0x96>
 8005e70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e74:	1e13      	subs	r3, r2, #0
 8005e76:	6822      	ldr	r2, [r4, #0]
 8005e78:	bf18      	it	ne
 8005e7a:	2301      	movne	r3, #1
 8005e7c:	0692      	lsls	r2, r2, #26
 8005e7e:	d42b      	bmi.n	8005ed8 <_printf_common+0xb0>
 8005e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e84:	4649      	mov	r1, r9
 8005e86:	4638      	mov	r0, r7
 8005e88:	47c0      	blx	r8
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d01e      	beq.n	8005ecc <_printf_common+0xa4>
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	68e5      	ldr	r5, [r4, #12]
 8005e92:	6832      	ldr	r2, [r6, #0]
 8005e94:	f003 0306 	and.w	r3, r3, #6
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	bf08      	it	eq
 8005e9c:	1aad      	subeq	r5, r5, r2
 8005e9e:	68a3      	ldr	r3, [r4, #8]
 8005ea0:	6922      	ldr	r2, [r4, #16]
 8005ea2:	bf0c      	ite	eq
 8005ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ea8:	2500      	movne	r5, #0
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	bfc4      	itt	gt
 8005eae:	1a9b      	subgt	r3, r3, r2
 8005eb0:	18ed      	addgt	r5, r5, r3
 8005eb2:	2600      	movs	r6, #0
 8005eb4:	341a      	adds	r4, #26
 8005eb6:	42b5      	cmp	r5, r6
 8005eb8:	d11a      	bne.n	8005ef0 <_printf_common+0xc8>
 8005eba:	2000      	movs	r0, #0
 8005ebc:	e008      	b.n	8005ed0 <_printf_common+0xa8>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	4652      	mov	r2, sl
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	47c0      	blx	r8
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d103      	bne.n	8005ed4 <_printf_common+0xac>
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed4:	3501      	adds	r5, #1
 8005ed6:	e7c6      	b.n	8005e66 <_printf_common+0x3e>
 8005ed8:	18e1      	adds	r1, r4, r3
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	2030      	movs	r0, #48	; 0x30
 8005ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ee2:	4422      	add	r2, r4
 8005ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005eec:	3302      	adds	r3, #2
 8005eee:	e7c7      	b.n	8005e80 <_printf_common+0x58>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	47c0      	blx	r8
 8005efa:	3001      	adds	r0, #1
 8005efc:	d0e6      	beq.n	8005ecc <_printf_common+0xa4>
 8005efe:	3601      	adds	r6, #1
 8005f00:	e7d9      	b.n	8005eb6 <_printf_common+0x8e>
	...

08005f04 <_printf_i>:
 8005f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	460c      	mov	r4, r1
 8005f0a:	4691      	mov	r9, r2
 8005f0c:	7e27      	ldrb	r7, [r4, #24]
 8005f0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f10:	2f78      	cmp	r7, #120	; 0x78
 8005f12:	4680      	mov	r8, r0
 8005f14:	469a      	mov	sl, r3
 8005f16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f1a:	d807      	bhi.n	8005f2c <_printf_i+0x28>
 8005f1c:	2f62      	cmp	r7, #98	; 0x62
 8005f1e:	d80a      	bhi.n	8005f36 <_printf_i+0x32>
 8005f20:	2f00      	cmp	r7, #0
 8005f22:	f000 80d8 	beq.w	80060d6 <_printf_i+0x1d2>
 8005f26:	2f58      	cmp	r7, #88	; 0x58
 8005f28:	f000 80a3 	beq.w	8006072 <_printf_i+0x16e>
 8005f2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f34:	e03a      	b.n	8005fac <_printf_i+0xa8>
 8005f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f3a:	2b15      	cmp	r3, #21
 8005f3c:	d8f6      	bhi.n	8005f2c <_printf_i+0x28>
 8005f3e:	a001      	add	r0, pc, #4	; (adr r0, 8005f44 <_printf_i+0x40>)
 8005f40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f44:	08005f9d 	.word	0x08005f9d
 8005f48:	08005fb1 	.word	0x08005fb1
 8005f4c:	08005f2d 	.word	0x08005f2d
 8005f50:	08005f2d 	.word	0x08005f2d
 8005f54:	08005f2d 	.word	0x08005f2d
 8005f58:	08005f2d 	.word	0x08005f2d
 8005f5c:	08005fb1 	.word	0x08005fb1
 8005f60:	08005f2d 	.word	0x08005f2d
 8005f64:	08005f2d 	.word	0x08005f2d
 8005f68:	08005f2d 	.word	0x08005f2d
 8005f6c:	08005f2d 	.word	0x08005f2d
 8005f70:	080060bd 	.word	0x080060bd
 8005f74:	08005fe1 	.word	0x08005fe1
 8005f78:	0800609f 	.word	0x0800609f
 8005f7c:	08005f2d 	.word	0x08005f2d
 8005f80:	08005f2d 	.word	0x08005f2d
 8005f84:	080060df 	.word	0x080060df
 8005f88:	08005f2d 	.word	0x08005f2d
 8005f8c:	08005fe1 	.word	0x08005fe1
 8005f90:	08005f2d 	.word	0x08005f2d
 8005f94:	08005f2d 	.word	0x08005f2d
 8005f98:	080060a7 	.word	0x080060a7
 8005f9c:	680b      	ldr	r3, [r1, #0]
 8005f9e:	1d1a      	adds	r2, r3, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	600a      	str	r2, [r1, #0]
 8005fa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0a3      	b.n	80060f8 <_printf_i+0x1f4>
 8005fb0:	6825      	ldr	r5, [r4, #0]
 8005fb2:	6808      	ldr	r0, [r1, #0]
 8005fb4:	062e      	lsls	r6, r5, #24
 8005fb6:	f100 0304 	add.w	r3, r0, #4
 8005fba:	d50a      	bpl.n	8005fd2 <_printf_i+0xce>
 8005fbc:	6805      	ldr	r5, [r0, #0]
 8005fbe:	600b      	str	r3, [r1, #0]
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	da03      	bge.n	8005fcc <_printf_i+0xc8>
 8005fc4:	232d      	movs	r3, #45	; 0x2d
 8005fc6:	426d      	negs	r5, r5
 8005fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fcc:	485e      	ldr	r0, [pc, #376]	; (8006148 <_printf_i+0x244>)
 8005fce:	230a      	movs	r3, #10
 8005fd0:	e019      	b.n	8006006 <_printf_i+0x102>
 8005fd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005fd6:	6805      	ldr	r5, [r0, #0]
 8005fd8:	600b      	str	r3, [r1, #0]
 8005fda:	bf18      	it	ne
 8005fdc:	b22d      	sxthne	r5, r5
 8005fde:	e7ef      	b.n	8005fc0 <_printf_i+0xbc>
 8005fe0:	680b      	ldr	r3, [r1, #0]
 8005fe2:	6825      	ldr	r5, [r4, #0]
 8005fe4:	1d18      	adds	r0, r3, #4
 8005fe6:	6008      	str	r0, [r1, #0]
 8005fe8:	0628      	lsls	r0, r5, #24
 8005fea:	d501      	bpl.n	8005ff0 <_printf_i+0xec>
 8005fec:	681d      	ldr	r5, [r3, #0]
 8005fee:	e002      	b.n	8005ff6 <_printf_i+0xf2>
 8005ff0:	0669      	lsls	r1, r5, #25
 8005ff2:	d5fb      	bpl.n	8005fec <_printf_i+0xe8>
 8005ff4:	881d      	ldrh	r5, [r3, #0]
 8005ff6:	4854      	ldr	r0, [pc, #336]	; (8006148 <_printf_i+0x244>)
 8005ff8:	2f6f      	cmp	r7, #111	; 0x6f
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2308      	moveq	r3, #8
 8005ffe:	230a      	movne	r3, #10
 8006000:	2100      	movs	r1, #0
 8006002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006006:	6866      	ldr	r6, [r4, #4]
 8006008:	60a6      	str	r6, [r4, #8]
 800600a:	2e00      	cmp	r6, #0
 800600c:	bfa2      	ittt	ge
 800600e:	6821      	ldrge	r1, [r4, #0]
 8006010:	f021 0104 	bicge.w	r1, r1, #4
 8006014:	6021      	strge	r1, [r4, #0]
 8006016:	b90d      	cbnz	r5, 800601c <_printf_i+0x118>
 8006018:	2e00      	cmp	r6, #0
 800601a:	d04d      	beq.n	80060b8 <_printf_i+0x1b4>
 800601c:	4616      	mov	r6, r2
 800601e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006022:	fb03 5711 	mls	r7, r3, r1, r5
 8006026:	5dc7      	ldrb	r7, [r0, r7]
 8006028:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800602c:	462f      	mov	r7, r5
 800602e:	42bb      	cmp	r3, r7
 8006030:	460d      	mov	r5, r1
 8006032:	d9f4      	bls.n	800601e <_printf_i+0x11a>
 8006034:	2b08      	cmp	r3, #8
 8006036:	d10b      	bne.n	8006050 <_printf_i+0x14c>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	07df      	lsls	r7, r3, #31
 800603c:	d508      	bpl.n	8006050 <_printf_i+0x14c>
 800603e:	6923      	ldr	r3, [r4, #16]
 8006040:	6861      	ldr	r1, [r4, #4]
 8006042:	4299      	cmp	r1, r3
 8006044:	bfde      	ittt	le
 8006046:	2330      	movle	r3, #48	; 0x30
 8006048:	f806 3c01 	strble.w	r3, [r6, #-1]
 800604c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006050:	1b92      	subs	r2, r2, r6
 8006052:	6122      	str	r2, [r4, #16]
 8006054:	f8cd a000 	str.w	sl, [sp]
 8006058:	464b      	mov	r3, r9
 800605a:	aa03      	add	r2, sp, #12
 800605c:	4621      	mov	r1, r4
 800605e:	4640      	mov	r0, r8
 8006060:	f7ff fee2 	bl	8005e28 <_printf_common>
 8006064:	3001      	adds	r0, #1
 8006066:	d14c      	bne.n	8006102 <_printf_i+0x1fe>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	b004      	add	sp, #16
 800606e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006072:	4835      	ldr	r0, [pc, #212]	; (8006148 <_printf_i+0x244>)
 8006074:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	680e      	ldr	r6, [r1, #0]
 800607c:	061f      	lsls	r7, r3, #24
 800607e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006082:	600e      	str	r6, [r1, #0]
 8006084:	d514      	bpl.n	80060b0 <_printf_i+0x1ac>
 8006086:	07d9      	lsls	r1, r3, #31
 8006088:	bf44      	itt	mi
 800608a:	f043 0320 	orrmi.w	r3, r3, #32
 800608e:	6023      	strmi	r3, [r4, #0]
 8006090:	b91d      	cbnz	r5, 800609a <_printf_i+0x196>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	f023 0320 	bic.w	r3, r3, #32
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	2310      	movs	r3, #16
 800609c:	e7b0      	b.n	8006000 <_printf_i+0xfc>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	f043 0320 	orr.w	r3, r3, #32
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	2378      	movs	r3, #120	; 0x78
 80060a8:	4828      	ldr	r0, [pc, #160]	; (800614c <_printf_i+0x248>)
 80060aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060ae:	e7e3      	b.n	8006078 <_printf_i+0x174>
 80060b0:	065e      	lsls	r6, r3, #25
 80060b2:	bf48      	it	mi
 80060b4:	b2ad      	uxthmi	r5, r5
 80060b6:	e7e6      	b.n	8006086 <_printf_i+0x182>
 80060b8:	4616      	mov	r6, r2
 80060ba:	e7bb      	b.n	8006034 <_printf_i+0x130>
 80060bc:	680b      	ldr	r3, [r1, #0]
 80060be:	6826      	ldr	r6, [r4, #0]
 80060c0:	6960      	ldr	r0, [r4, #20]
 80060c2:	1d1d      	adds	r5, r3, #4
 80060c4:	600d      	str	r5, [r1, #0]
 80060c6:	0635      	lsls	r5, r6, #24
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	d501      	bpl.n	80060d0 <_printf_i+0x1cc>
 80060cc:	6018      	str	r0, [r3, #0]
 80060ce:	e002      	b.n	80060d6 <_printf_i+0x1d2>
 80060d0:	0671      	lsls	r1, r6, #25
 80060d2:	d5fb      	bpl.n	80060cc <_printf_i+0x1c8>
 80060d4:	8018      	strh	r0, [r3, #0]
 80060d6:	2300      	movs	r3, #0
 80060d8:	6123      	str	r3, [r4, #16]
 80060da:	4616      	mov	r6, r2
 80060dc:	e7ba      	b.n	8006054 <_printf_i+0x150>
 80060de:	680b      	ldr	r3, [r1, #0]
 80060e0:	1d1a      	adds	r2, r3, #4
 80060e2:	600a      	str	r2, [r1, #0]
 80060e4:	681e      	ldr	r6, [r3, #0]
 80060e6:	6862      	ldr	r2, [r4, #4]
 80060e8:	2100      	movs	r1, #0
 80060ea:	4630      	mov	r0, r6
 80060ec:	f7fa f878 	bl	80001e0 <memchr>
 80060f0:	b108      	cbz	r0, 80060f6 <_printf_i+0x1f2>
 80060f2:	1b80      	subs	r0, r0, r6
 80060f4:	6060      	str	r0, [r4, #4]
 80060f6:	6863      	ldr	r3, [r4, #4]
 80060f8:	6123      	str	r3, [r4, #16]
 80060fa:	2300      	movs	r3, #0
 80060fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006100:	e7a8      	b.n	8006054 <_printf_i+0x150>
 8006102:	6923      	ldr	r3, [r4, #16]
 8006104:	4632      	mov	r2, r6
 8006106:	4649      	mov	r1, r9
 8006108:	4640      	mov	r0, r8
 800610a:	47d0      	blx	sl
 800610c:	3001      	adds	r0, #1
 800610e:	d0ab      	beq.n	8006068 <_printf_i+0x164>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	079b      	lsls	r3, r3, #30
 8006114:	d413      	bmi.n	800613e <_printf_i+0x23a>
 8006116:	68e0      	ldr	r0, [r4, #12]
 8006118:	9b03      	ldr	r3, [sp, #12]
 800611a:	4298      	cmp	r0, r3
 800611c:	bfb8      	it	lt
 800611e:	4618      	movlt	r0, r3
 8006120:	e7a4      	b.n	800606c <_printf_i+0x168>
 8006122:	2301      	movs	r3, #1
 8006124:	4632      	mov	r2, r6
 8006126:	4649      	mov	r1, r9
 8006128:	4640      	mov	r0, r8
 800612a:	47d0      	blx	sl
 800612c:	3001      	adds	r0, #1
 800612e:	d09b      	beq.n	8006068 <_printf_i+0x164>
 8006130:	3501      	adds	r5, #1
 8006132:	68e3      	ldr	r3, [r4, #12]
 8006134:	9903      	ldr	r1, [sp, #12]
 8006136:	1a5b      	subs	r3, r3, r1
 8006138:	42ab      	cmp	r3, r5
 800613a:	dcf2      	bgt.n	8006122 <_printf_i+0x21e>
 800613c:	e7eb      	b.n	8006116 <_printf_i+0x212>
 800613e:	2500      	movs	r5, #0
 8006140:	f104 0619 	add.w	r6, r4, #25
 8006144:	e7f5      	b.n	8006132 <_printf_i+0x22e>
 8006146:	bf00      	nop
 8006148:	0800689d 	.word	0x0800689d
 800614c:	080068ae 	.word	0x080068ae

08006150 <_sbrk_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d06      	ldr	r5, [pc, #24]	; (800616c <_sbrk_r+0x1c>)
 8006154:	2300      	movs	r3, #0
 8006156:	4604      	mov	r4, r0
 8006158:	4608      	mov	r0, r1
 800615a:	602b      	str	r3, [r5, #0]
 800615c:	f7fb fcf2 	bl	8001b44 <_sbrk>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_sbrk_r+0x1a>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_sbrk_r+0x1a>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	20000290 	.word	0x20000290

08006170 <__sread>:
 8006170:	b510      	push	{r4, lr}
 8006172:	460c      	mov	r4, r1
 8006174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006178:	f000 fab4 	bl	80066e4 <_read_r>
 800617c:	2800      	cmp	r0, #0
 800617e:	bfab      	itete	ge
 8006180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006182:	89a3      	ldrhlt	r3, [r4, #12]
 8006184:	181b      	addge	r3, r3, r0
 8006186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800618a:	bfac      	ite	ge
 800618c:	6563      	strge	r3, [r4, #84]	; 0x54
 800618e:	81a3      	strhlt	r3, [r4, #12]
 8006190:	bd10      	pop	{r4, pc}

08006192 <__swrite>:
 8006192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006196:	461f      	mov	r7, r3
 8006198:	898b      	ldrh	r3, [r1, #12]
 800619a:	05db      	lsls	r3, r3, #23
 800619c:	4605      	mov	r5, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	4616      	mov	r6, r2
 80061a2:	d505      	bpl.n	80061b0 <__swrite+0x1e>
 80061a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a8:	2302      	movs	r3, #2
 80061aa:	2200      	movs	r2, #0
 80061ac:	f000 f9c8 	bl	8006540 <_lseek_r>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	4632      	mov	r2, r6
 80061be:	463b      	mov	r3, r7
 80061c0:	4628      	mov	r0, r5
 80061c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061c6:	f000 b869 	b.w	800629c <_write_r>

080061ca <__sseek>:
 80061ca:	b510      	push	{r4, lr}
 80061cc:	460c      	mov	r4, r1
 80061ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d2:	f000 f9b5 	bl	8006540 <_lseek_r>
 80061d6:	1c43      	adds	r3, r0, #1
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	bf15      	itete	ne
 80061dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80061de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061e6:	81a3      	strheq	r3, [r4, #12]
 80061e8:	bf18      	it	ne
 80061ea:	81a3      	strhne	r3, [r4, #12]
 80061ec:	bd10      	pop	{r4, pc}

080061ee <__sclose>:
 80061ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f2:	f000 b8d3 	b.w	800639c <_close_r>
	...

080061f8 <__swbuf_r>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	460e      	mov	r6, r1
 80061fc:	4614      	mov	r4, r2
 80061fe:	4605      	mov	r5, r0
 8006200:	b118      	cbz	r0, 800620a <__swbuf_r+0x12>
 8006202:	6983      	ldr	r3, [r0, #24]
 8006204:	b90b      	cbnz	r3, 800620a <__swbuf_r+0x12>
 8006206:	f7ff fbbb 	bl	8005980 <__sinit>
 800620a:	4b21      	ldr	r3, [pc, #132]	; (8006290 <__swbuf_r+0x98>)
 800620c:	429c      	cmp	r4, r3
 800620e:	d12b      	bne.n	8006268 <__swbuf_r+0x70>
 8006210:	686c      	ldr	r4, [r5, #4]
 8006212:	69a3      	ldr	r3, [r4, #24]
 8006214:	60a3      	str	r3, [r4, #8]
 8006216:	89a3      	ldrh	r3, [r4, #12]
 8006218:	071a      	lsls	r2, r3, #28
 800621a:	d52f      	bpl.n	800627c <__swbuf_r+0x84>
 800621c:	6923      	ldr	r3, [r4, #16]
 800621e:	b36b      	cbz	r3, 800627c <__swbuf_r+0x84>
 8006220:	6923      	ldr	r3, [r4, #16]
 8006222:	6820      	ldr	r0, [r4, #0]
 8006224:	1ac0      	subs	r0, r0, r3
 8006226:	6963      	ldr	r3, [r4, #20]
 8006228:	b2f6      	uxtb	r6, r6
 800622a:	4283      	cmp	r3, r0
 800622c:	4637      	mov	r7, r6
 800622e:	dc04      	bgt.n	800623a <__swbuf_r+0x42>
 8006230:	4621      	mov	r1, r4
 8006232:	4628      	mov	r0, r5
 8006234:	f000 f948 	bl	80064c8 <_fflush_r>
 8006238:	bb30      	cbnz	r0, 8006288 <__swbuf_r+0x90>
 800623a:	68a3      	ldr	r3, [r4, #8]
 800623c:	3b01      	subs	r3, #1
 800623e:	60a3      	str	r3, [r4, #8]
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	6022      	str	r2, [r4, #0]
 8006246:	701e      	strb	r6, [r3, #0]
 8006248:	6963      	ldr	r3, [r4, #20]
 800624a:	3001      	adds	r0, #1
 800624c:	4283      	cmp	r3, r0
 800624e:	d004      	beq.n	800625a <__swbuf_r+0x62>
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	07db      	lsls	r3, r3, #31
 8006254:	d506      	bpl.n	8006264 <__swbuf_r+0x6c>
 8006256:	2e0a      	cmp	r6, #10
 8006258:	d104      	bne.n	8006264 <__swbuf_r+0x6c>
 800625a:	4621      	mov	r1, r4
 800625c:	4628      	mov	r0, r5
 800625e:	f000 f933 	bl	80064c8 <_fflush_r>
 8006262:	b988      	cbnz	r0, 8006288 <__swbuf_r+0x90>
 8006264:	4638      	mov	r0, r7
 8006266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <__swbuf_r+0x9c>)
 800626a:	429c      	cmp	r4, r3
 800626c:	d101      	bne.n	8006272 <__swbuf_r+0x7a>
 800626e:	68ac      	ldr	r4, [r5, #8]
 8006270:	e7cf      	b.n	8006212 <__swbuf_r+0x1a>
 8006272:	4b09      	ldr	r3, [pc, #36]	; (8006298 <__swbuf_r+0xa0>)
 8006274:	429c      	cmp	r4, r3
 8006276:	bf08      	it	eq
 8006278:	68ec      	ldreq	r4, [r5, #12]
 800627a:	e7ca      	b.n	8006212 <__swbuf_r+0x1a>
 800627c:	4621      	mov	r1, r4
 800627e:	4628      	mov	r0, r5
 8006280:	f000 f81e 	bl	80062c0 <__swsetup_r>
 8006284:	2800      	cmp	r0, #0
 8006286:	d0cb      	beq.n	8006220 <__swbuf_r+0x28>
 8006288:	f04f 37ff 	mov.w	r7, #4294967295
 800628c:	e7ea      	b.n	8006264 <__swbuf_r+0x6c>
 800628e:	bf00      	nop
 8006290:	0800684c 	.word	0x0800684c
 8006294:	0800686c 	.word	0x0800686c
 8006298:	0800682c 	.word	0x0800682c

0800629c <_write_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d07      	ldr	r5, [pc, #28]	; (80062bc <_write_r+0x20>)
 80062a0:	4604      	mov	r4, r0
 80062a2:	4608      	mov	r0, r1
 80062a4:	4611      	mov	r1, r2
 80062a6:	2200      	movs	r2, #0
 80062a8:	602a      	str	r2, [r5, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f7fa fc1c 	bl	8000ae8 <_write>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_write_r+0x1e>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_write_r+0x1e>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20000290 	.word	0x20000290

080062c0 <__swsetup_r>:
 80062c0:	4b32      	ldr	r3, [pc, #200]	; (800638c <__swsetup_r+0xcc>)
 80062c2:	b570      	push	{r4, r5, r6, lr}
 80062c4:	681d      	ldr	r5, [r3, #0]
 80062c6:	4606      	mov	r6, r0
 80062c8:	460c      	mov	r4, r1
 80062ca:	b125      	cbz	r5, 80062d6 <__swsetup_r+0x16>
 80062cc:	69ab      	ldr	r3, [r5, #24]
 80062ce:	b913      	cbnz	r3, 80062d6 <__swsetup_r+0x16>
 80062d0:	4628      	mov	r0, r5
 80062d2:	f7ff fb55 	bl	8005980 <__sinit>
 80062d6:	4b2e      	ldr	r3, [pc, #184]	; (8006390 <__swsetup_r+0xd0>)
 80062d8:	429c      	cmp	r4, r3
 80062da:	d10f      	bne.n	80062fc <__swsetup_r+0x3c>
 80062dc:	686c      	ldr	r4, [r5, #4]
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062e4:	0719      	lsls	r1, r3, #28
 80062e6:	d42c      	bmi.n	8006342 <__swsetup_r+0x82>
 80062e8:	06dd      	lsls	r5, r3, #27
 80062ea:	d411      	bmi.n	8006310 <__swsetup_r+0x50>
 80062ec:	2309      	movs	r3, #9
 80062ee:	6033      	str	r3, [r6, #0]
 80062f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062f4:	81a3      	strh	r3, [r4, #12]
 80062f6:	f04f 30ff 	mov.w	r0, #4294967295
 80062fa:	e03e      	b.n	800637a <__swsetup_r+0xba>
 80062fc:	4b25      	ldr	r3, [pc, #148]	; (8006394 <__swsetup_r+0xd4>)
 80062fe:	429c      	cmp	r4, r3
 8006300:	d101      	bne.n	8006306 <__swsetup_r+0x46>
 8006302:	68ac      	ldr	r4, [r5, #8]
 8006304:	e7eb      	b.n	80062de <__swsetup_r+0x1e>
 8006306:	4b24      	ldr	r3, [pc, #144]	; (8006398 <__swsetup_r+0xd8>)
 8006308:	429c      	cmp	r4, r3
 800630a:	bf08      	it	eq
 800630c:	68ec      	ldreq	r4, [r5, #12]
 800630e:	e7e6      	b.n	80062de <__swsetup_r+0x1e>
 8006310:	0758      	lsls	r0, r3, #29
 8006312:	d512      	bpl.n	800633a <__swsetup_r+0x7a>
 8006314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006316:	b141      	cbz	r1, 800632a <__swsetup_r+0x6a>
 8006318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800631c:	4299      	cmp	r1, r3
 800631e:	d002      	beq.n	8006326 <__swsetup_r+0x66>
 8006320:	4630      	mov	r0, r6
 8006322:	f000 f98f 	bl	8006644 <_free_r>
 8006326:	2300      	movs	r3, #0
 8006328:	6363      	str	r3, [r4, #52]	; 0x34
 800632a:	89a3      	ldrh	r3, [r4, #12]
 800632c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006330:	81a3      	strh	r3, [r4, #12]
 8006332:	2300      	movs	r3, #0
 8006334:	6063      	str	r3, [r4, #4]
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	f043 0308 	orr.w	r3, r3, #8
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	6923      	ldr	r3, [r4, #16]
 8006344:	b94b      	cbnz	r3, 800635a <__swsetup_r+0x9a>
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800634c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006350:	d003      	beq.n	800635a <__swsetup_r+0x9a>
 8006352:	4621      	mov	r1, r4
 8006354:	4630      	mov	r0, r6
 8006356:	f000 f929 	bl	80065ac <__smakebuf_r>
 800635a:	89a0      	ldrh	r0, [r4, #12]
 800635c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006360:	f010 0301 	ands.w	r3, r0, #1
 8006364:	d00a      	beq.n	800637c <__swsetup_r+0xbc>
 8006366:	2300      	movs	r3, #0
 8006368:	60a3      	str	r3, [r4, #8]
 800636a:	6963      	ldr	r3, [r4, #20]
 800636c:	425b      	negs	r3, r3
 800636e:	61a3      	str	r3, [r4, #24]
 8006370:	6923      	ldr	r3, [r4, #16]
 8006372:	b943      	cbnz	r3, 8006386 <__swsetup_r+0xc6>
 8006374:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006378:	d1ba      	bne.n	80062f0 <__swsetup_r+0x30>
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	0781      	lsls	r1, r0, #30
 800637e:	bf58      	it	pl
 8006380:	6963      	ldrpl	r3, [r4, #20]
 8006382:	60a3      	str	r3, [r4, #8]
 8006384:	e7f4      	b.n	8006370 <__swsetup_r+0xb0>
 8006386:	2000      	movs	r0, #0
 8006388:	e7f7      	b.n	800637a <__swsetup_r+0xba>
 800638a:	bf00      	nop
 800638c:	2000001c 	.word	0x2000001c
 8006390:	0800684c 	.word	0x0800684c
 8006394:	0800686c 	.word	0x0800686c
 8006398:	0800682c 	.word	0x0800682c

0800639c <_close_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4d06      	ldr	r5, [pc, #24]	; (80063b8 <_close_r+0x1c>)
 80063a0:	2300      	movs	r3, #0
 80063a2:	4604      	mov	r4, r0
 80063a4:	4608      	mov	r0, r1
 80063a6:	602b      	str	r3, [r5, #0]
 80063a8:	f7fb fb97 	bl	8001ada <_close>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d102      	bne.n	80063b6 <_close_r+0x1a>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	b103      	cbz	r3, 80063b6 <_close_r+0x1a>
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
 80063b8:	20000290 	.word	0x20000290

080063bc <__sflush_r>:
 80063bc:	898a      	ldrh	r2, [r1, #12]
 80063be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c2:	4605      	mov	r5, r0
 80063c4:	0710      	lsls	r0, r2, #28
 80063c6:	460c      	mov	r4, r1
 80063c8:	d458      	bmi.n	800647c <__sflush_r+0xc0>
 80063ca:	684b      	ldr	r3, [r1, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dc05      	bgt.n	80063dc <__sflush_r+0x20>
 80063d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	dc02      	bgt.n	80063dc <__sflush_r+0x20>
 80063d6:	2000      	movs	r0, #0
 80063d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063de:	2e00      	cmp	r6, #0
 80063e0:	d0f9      	beq.n	80063d6 <__sflush_r+0x1a>
 80063e2:	2300      	movs	r3, #0
 80063e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063e8:	682f      	ldr	r7, [r5, #0]
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	d032      	beq.n	8006454 <__sflush_r+0x98>
 80063ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063f0:	89a3      	ldrh	r3, [r4, #12]
 80063f2:	075a      	lsls	r2, r3, #29
 80063f4:	d505      	bpl.n	8006402 <__sflush_r+0x46>
 80063f6:	6863      	ldr	r3, [r4, #4]
 80063f8:	1ac0      	subs	r0, r0, r3
 80063fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063fc:	b10b      	cbz	r3, 8006402 <__sflush_r+0x46>
 80063fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006400:	1ac0      	subs	r0, r0, r3
 8006402:	2300      	movs	r3, #0
 8006404:	4602      	mov	r2, r0
 8006406:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006408:	6a21      	ldr	r1, [r4, #32]
 800640a:	4628      	mov	r0, r5
 800640c:	47b0      	blx	r6
 800640e:	1c43      	adds	r3, r0, #1
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	d106      	bne.n	8006422 <__sflush_r+0x66>
 8006414:	6829      	ldr	r1, [r5, #0]
 8006416:	291d      	cmp	r1, #29
 8006418:	d82c      	bhi.n	8006474 <__sflush_r+0xb8>
 800641a:	4a2a      	ldr	r2, [pc, #168]	; (80064c4 <__sflush_r+0x108>)
 800641c:	40ca      	lsrs	r2, r1
 800641e:	07d6      	lsls	r6, r2, #31
 8006420:	d528      	bpl.n	8006474 <__sflush_r+0xb8>
 8006422:	2200      	movs	r2, #0
 8006424:	6062      	str	r2, [r4, #4]
 8006426:	04d9      	lsls	r1, r3, #19
 8006428:	6922      	ldr	r2, [r4, #16]
 800642a:	6022      	str	r2, [r4, #0]
 800642c:	d504      	bpl.n	8006438 <__sflush_r+0x7c>
 800642e:	1c42      	adds	r2, r0, #1
 8006430:	d101      	bne.n	8006436 <__sflush_r+0x7a>
 8006432:	682b      	ldr	r3, [r5, #0]
 8006434:	b903      	cbnz	r3, 8006438 <__sflush_r+0x7c>
 8006436:	6560      	str	r0, [r4, #84]	; 0x54
 8006438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800643a:	602f      	str	r7, [r5, #0]
 800643c:	2900      	cmp	r1, #0
 800643e:	d0ca      	beq.n	80063d6 <__sflush_r+0x1a>
 8006440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006444:	4299      	cmp	r1, r3
 8006446:	d002      	beq.n	800644e <__sflush_r+0x92>
 8006448:	4628      	mov	r0, r5
 800644a:	f000 f8fb 	bl	8006644 <_free_r>
 800644e:	2000      	movs	r0, #0
 8006450:	6360      	str	r0, [r4, #52]	; 0x34
 8006452:	e7c1      	b.n	80063d8 <__sflush_r+0x1c>
 8006454:	6a21      	ldr	r1, [r4, #32]
 8006456:	2301      	movs	r3, #1
 8006458:	4628      	mov	r0, r5
 800645a:	47b0      	blx	r6
 800645c:	1c41      	adds	r1, r0, #1
 800645e:	d1c7      	bne.n	80063f0 <__sflush_r+0x34>
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0c4      	beq.n	80063f0 <__sflush_r+0x34>
 8006466:	2b1d      	cmp	r3, #29
 8006468:	d001      	beq.n	800646e <__sflush_r+0xb2>
 800646a:	2b16      	cmp	r3, #22
 800646c:	d101      	bne.n	8006472 <__sflush_r+0xb6>
 800646e:	602f      	str	r7, [r5, #0]
 8006470:	e7b1      	b.n	80063d6 <__sflush_r+0x1a>
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006478:	81a3      	strh	r3, [r4, #12]
 800647a:	e7ad      	b.n	80063d8 <__sflush_r+0x1c>
 800647c:	690f      	ldr	r7, [r1, #16]
 800647e:	2f00      	cmp	r7, #0
 8006480:	d0a9      	beq.n	80063d6 <__sflush_r+0x1a>
 8006482:	0793      	lsls	r3, r2, #30
 8006484:	680e      	ldr	r6, [r1, #0]
 8006486:	bf08      	it	eq
 8006488:	694b      	ldreq	r3, [r1, #20]
 800648a:	600f      	str	r7, [r1, #0]
 800648c:	bf18      	it	ne
 800648e:	2300      	movne	r3, #0
 8006490:	eba6 0807 	sub.w	r8, r6, r7
 8006494:	608b      	str	r3, [r1, #8]
 8006496:	f1b8 0f00 	cmp.w	r8, #0
 800649a:	dd9c      	ble.n	80063d6 <__sflush_r+0x1a>
 800649c:	6a21      	ldr	r1, [r4, #32]
 800649e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064a0:	4643      	mov	r3, r8
 80064a2:	463a      	mov	r2, r7
 80064a4:	4628      	mov	r0, r5
 80064a6:	47b0      	blx	r6
 80064a8:	2800      	cmp	r0, #0
 80064aa:	dc06      	bgt.n	80064ba <__sflush_r+0xfe>
 80064ac:	89a3      	ldrh	r3, [r4, #12]
 80064ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b2:	81a3      	strh	r3, [r4, #12]
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	e78e      	b.n	80063d8 <__sflush_r+0x1c>
 80064ba:	4407      	add	r7, r0
 80064bc:	eba8 0800 	sub.w	r8, r8, r0
 80064c0:	e7e9      	b.n	8006496 <__sflush_r+0xda>
 80064c2:	bf00      	nop
 80064c4:	20400001 	.word	0x20400001

080064c8 <_fflush_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	690b      	ldr	r3, [r1, #16]
 80064cc:	4605      	mov	r5, r0
 80064ce:	460c      	mov	r4, r1
 80064d0:	b913      	cbnz	r3, 80064d8 <_fflush_r+0x10>
 80064d2:	2500      	movs	r5, #0
 80064d4:	4628      	mov	r0, r5
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	b118      	cbz	r0, 80064e2 <_fflush_r+0x1a>
 80064da:	6983      	ldr	r3, [r0, #24]
 80064dc:	b90b      	cbnz	r3, 80064e2 <_fflush_r+0x1a>
 80064de:	f7ff fa4f 	bl	8005980 <__sinit>
 80064e2:	4b14      	ldr	r3, [pc, #80]	; (8006534 <_fflush_r+0x6c>)
 80064e4:	429c      	cmp	r4, r3
 80064e6:	d11b      	bne.n	8006520 <_fflush_r+0x58>
 80064e8:	686c      	ldr	r4, [r5, #4]
 80064ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0ef      	beq.n	80064d2 <_fflush_r+0xa>
 80064f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064f4:	07d0      	lsls	r0, r2, #31
 80064f6:	d404      	bmi.n	8006502 <_fflush_r+0x3a>
 80064f8:	0599      	lsls	r1, r3, #22
 80064fa:	d402      	bmi.n	8006502 <_fflush_r+0x3a>
 80064fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064fe:	f7ff fadd 	bl	8005abc <__retarget_lock_acquire_recursive>
 8006502:	4628      	mov	r0, r5
 8006504:	4621      	mov	r1, r4
 8006506:	f7ff ff59 	bl	80063bc <__sflush_r>
 800650a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800650c:	07da      	lsls	r2, r3, #31
 800650e:	4605      	mov	r5, r0
 8006510:	d4e0      	bmi.n	80064d4 <_fflush_r+0xc>
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	059b      	lsls	r3, r3, #22
 8006516:	d4dd      	bmi.n	80064d4 <_fflush_r+0xc>
 8006518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800651a:	f7ff fad0 	bl	8005abe <__retarget_lock_release_recursive>
 800651e:	e7d9      	b.n	80064d4 <_fflush_r+0xc>
 8006520:	4b05      	ldr	r3, [pc, #20]	; (8006538 <_fflush_r+0x70>)
 8006522:	429c      	cmp	r4, r3
 8006524:	d101      	bne.n	800652a <_fflush_r+0x62>
 8006526:	68ac      	ldr	r4, [r5, #8]
 8006528:	e7df      	b.n	80064ea <_fflush_r+0x22>
 800652a:	4b04      	ldr	r3, [pc, #16]	; (800653c <_fflush_r+0x74>)
 800652c:	429c      	cmp	r4, r3
 800652e:	bf08      	it	eq
 8006530:	68ec      	ldreq	r4, [r5, #12]
 8006532:	e7da      	b.n	80064ea <_fflush_r+0x22>
 8006534:	0800684c 	.word	0x0800684c
 8006538:	0800686c 	.word	0x0800686c
 800653c:	0800682c 	.word	0x0800682c

08006540 <_lseek_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4d07      	ldr	r5, [pc, #28]	; (8006560 <_lseek_r+0x20>)
 8006544:	4604      	mov	r4, r0
 8006546:	4608      	mov	r0, r1
 8006548:	4611      	mov	r1, r2
 800654a:	2200      	movs	r2, #0
 800654c:	602a      	str	r2, [r5, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	f7fb faea 	bl	8001b28 <_lseek>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d102      	bne.n	800655e <_lseek_r+0x1e>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	b103      	cbz	r3, 800655e <_lseek_r+0x1e>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	bd38      	pop	{r3, r4, r5, pc}
 8006560:	20000290 	.word	0x20000290

08006564 <__swhatbuf_r>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	460e      	mov	r6, r1
 8006568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656c:	2900      	cmp	r1, #0
 800656e:	b096      	sub	sp, #88	; 0x58
 8006570:	4614      	mov	r4, r2
 8006572:	461d      	mov	r5, r3
 8006574:	da07      	bge.n	8006586 <__swhatbuf_r+0x22>
 8006576:	2300      	movs	r3, #0
 8006578:	602b      	str	r3, [r5, #0]
 800657a:	89b3      	ldrh	r3, [r6, #12]
 800657c:	061a      	lsls	r2, r3, #24
 800657e:	d410      	bmi.n	80065a2 <__swhatbuf_r+0x3e>
 8006580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006584:	e00e      	b.n	80065a4 <__swhatbuf_r+0x40>
 8006586:	466a      	mov	r2, sp
 8006588:	f000 f8be 	bl	8006708 <_fstat_r>
 800658c:	2800      	cmp	r0, #0
 800658e:	dbf2      	blt.n	8006576 <__swhatbuf_r+0x12>
 8006590:	9a01      	ldr	r2, [sp, #4]
 8006592:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006596:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800659a:	425a      	negs	r2, r3
 800659c:	415a      	adcs	r2, r3
 800659e:	602a      	str	r2, [r5, #0]
 80065a0:	e7ee      	b.n	8006580 <__swhatbuf_r+0x1c>
 80065a2:	2340      	movs	r3, #64	; 0x40
 80065a4:	2000      	movs	r0, #0
 80065a6:	6023      	str	r3, [r4, #0]
 80065a8:	b016      	add	sp, #88	; 0x58
 80065aa:	bd70      	pop	{r4, r5, r6, pc}

080065ac <__smakebuf_r>:
 80065ac:	898b      	ldrh	r3, [r1, #12]
 80065ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065b0:	079d      	lsls	r5, r3, #30
 80065b2:	4606      	mov	r6, r0
 80065b4:	460c      	mov	r4, r1
 80065b6:	d507      	bpl.n	80065c8 <__smakebuf_r+0x1c>
 80065b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	6123      	str	r3, [r4, #16]
 80065c0:	2301      	movs	r3, #1
 80065c2:	6163      	str	r3, [r4, #20]
 80065c4:	b002      	add	sp, #8
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	ab01      	add	r3, sp, #4
 80065ca:	466a      	mov	r2, sp
 80065cc:	f7ff ffca 	bl	8006564 <__swhatbuf_r>
 80065d0:	9900      	ldr	r1, [sp, #0]
 80065d2:	4605      	mov	r5, r0
 80065d4:	4630      	mov	r0, r6
 80065d6:	f7ff fa73 	bl	8005ac0 <_malloc_r>
 80065da:	b948      	cbnz	r0, 80065f0 <__smakebuf_r+0x44>
 80065dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e0:	059a      	lsls	r2, r3, #22
 80065e2:	d4ef      	bmi.n	80065c4 <__smakebuf_r+0x18>
 80065e4:	f023 0303 	bic.w	r3, r3, #3
 80065e8:	f043 0302 	orr.w	r3, r3, #2
 80065ec:	81a3      	strh	r3, [r4, #12]
 80065ee:	e7e3      	b.n	80065b8 <__smakebuf_r+0xc>
 80065f0:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <__smakebuf_r+0x7c>)
 80065f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	6020      	str	r0, [r4, #0]
 80065f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fc:	81a3      	strh	r3, [r4, #12]
 80065fe:	9b00      	ldr	r3, [sp, #0]
 8006600:	6163      	str	r3, [r4, #20]
 8006602:	9b01      	ldr	r3, [sp, #4]
 8006604:	6120      	str	r0, [r4, #16]
 8006606:	b15b      	cbz	r3, 8006620 <__smakebuf_r+0x74>
 8006608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800660c:	4630      	mov	r0, r6
 800660e:	f000 f88d 	bl	800672c <_isatty_r>
 8006612:	b128      	cbz	r0, 8006620 <__smakebuf_r+0x74>
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f023 0303 	bic.w	r3, r3, #3
 800661a:	f043 0301 	orr.w	r3, r3, #1
 800661e:	81a3      	strh	r3, [r4, #12]
 8006620:	89a0      	ldrh	r0, [r4, #12]
 8006622:	4305      	orrs	r5, r0
 8006624:	81a5      	strh	r5, [r4, #12]
 8006626:	e7cd      	b.n	80065c4 <__smakebuf_r+0x18>
 8006628:	08005919 	.word	0x08005919

0800662c <__malloc_lock>:
 800662c:	4801      	ldr	r0, [pc, #4]	; (8006634 <__malloc_lock+0x8>)
 800662e:	f7ff ba45 	b.w	8005abc <__retarget_lock_acquire_recursive>
 8006632:	bf00      	nop
 8006634:	20000288 	.word	0x20000288

08006638 <__malloc_unlock>:
 8006638:	4801      	ldr	r0, [pc, #4]	; (8006640 <__malloc_unlock+0x8>)
 800663a:	f7ff ba40 	b.w	8005abe <__retarget_lock_release_recursive>
 800663e:	bf00      	nop
 8006640:	20000288 	.word	0x20000288

08006644 <_free_r>:
 8006644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006646:	2900      	cmp	r1, #0
 8006648:	d048      	beq.n	80066dc <_free_r+0x98>
 800664a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800664e:	9001      	str	r0, [sp, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f1a1 0404 	sub.w	r4, r1, #4
 8006656:	bfb8      	it	lt
 8006658:	18e4      	addlt	r4, r4, r3
 800665a:	f7ff ffe7 	bl	800662c <__malloc_lock>
 800665e:	4a20      	ldr	r2, [pc, #128]	; (80066e0 <_free_r+0x9c>)
 8006660:	9801      	ldr	r0, [sp, #4]
 8006662:	6813      	ldr	r3, [r2, #0]
 8006664:	4615      	mov	r5, r2
 8006666:	b933      	cbnz	r3, 8006676 <_free_r+0x32>
 8006668:	6063      	str	r3, [r4, #4]
 800666a:	6014      	str	r4, [r2, #0]
 800666c:	b003      	add	sp, #12
 800666e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006672:	f7ff bfe1 	b.w	8006638 <__malloc_unlock>
 8006676:	42a3      	cmp	r3, r4
 8006678:	d90b      	bls.n	8006692 <_free_r+0x4e>
 800667a:	6821      	ldr	r1, [r4, #0]
 800667c:	1862      	adds	r2, r4, r1
 800667e:	4293      	cmp	r3, r2
 8006680:	bf04      	itt	eq
 8006682:	681a      	ldreq	r2, [r3, #0]
 8006684:	685b      	ldreq	r3, [r3, #4]
 8006686:	6063      	str	r3, [r4, #4]
 8006688:	bf04      	itt	eq
 800668a:	1852      	addeq	r2, r2, r1
 800668c:	6022      	streq	r2, [r4, #0]
 800668e:	602c      	str	r4, [r5, #0]
 8006690:	e7ec      	b.n	800666c <_free_r+0x28>
 8006692:	461a      	mov	r2, r3
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	b10b      	cbz	r3, 800669c <_free_r+0x58>
 8006698:	42a3      	cmp	r3, r4
 800669a:	d9fa      	bls.n	8006692 <_free_r+0x4e>
 800669c:	6811      	ldr	r1, [r2, #0]
 800669e:	1855      	adds	r5, r2, r1
 80066a0:	42a5      	cmp	r5, r4
 80066a2:	d10b      	bne.n	80066bc <_free_r+0x78>
 80066a4:	6824      	ldr	r4, [r4, #0]
 80066a6:	4421      	add	r1, r4
 80066a8:	1854      	adds	r4, r2, r1
 80066aa:	42a3      	cmp	r3, r4
 80066ac:	6011      	str	r1, [r2, #0]
 80066ae:	d1dd      	bne.n	800666c <_free_r+0x28>
 80066b0:	681c      	ldr	r4, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	6053      	str	r3, [r2, #4]
 80066b6:	4421      	add	r1, r4
 80066b8:	6011      	str	r1, [r2, #0]
 80066ba:	e7d7      	b.n	800666c <_free_r+0x28>
 80066bc:	d902      	bls.n	80066c4 <_free_r+0x80>
 80066be:	230c      	movs	r3, #12
 80066c0:	6003      	str	r3, [r0, #0]
 80066c2:	e7d3      	b.n	800666c <_free_r+0x28>
 80066c4:	6825      	ldr	r5, [r4, #0]
 80066c6:	1961      	adds	r1, r4, r5
 80066c8:	428b      	cmp	r3, r1
 80066ca:	bf04      	itt	eq
 80066cc:	6819      	ldreq	r1, [r3, #0]
 80066ce:	685b      	ldreq	r3, [r3, #4]
 80066d0:	6063      	str	r3, [r4, #4]
 80066d2:	bf04      	itt	eq
 80066d4:	1949      	addeq	r1, r1, r5
 80066d6:	6021      	streq	r1, [r4, #0]
 80066d8:	6054      	str	r4, [r2, #4]
 80066da:	e7c7      	b.n	800666c <_free_r+0x28>
 80066dc:	b003      	add	sp, #12
 80066de:	bd30      	pop	{r4, r5, pc}
 80066e0:	200000bc 	.word	0x200000bc

080066e4 <_read_r>:
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	4d07      	ldr	r5, [pc, #28]	; (8006704 <_read_r+0x20>)
 80066e8:	4604      	mov	r4, r0
 80066ea:	4608      	mov	r0, r1
 80066ec:	4611      	mov	r1, r2
 80066ee:	2200      	movs	r2, #0
 80066f0:	602a      	str	r2, [r5, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	f7fb f9d4 	bl	8001aa0 <_read>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d102      	bne.n	8006702 <_read_r+0x1e>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b103      	cbz	r3, 8006702 <_read_r+0x1e>
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	20000290 	.word	0x20000290

08006708 <_fstat_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4d07      	ldr	r5, [pc, #28]	; (8006728 <_fstat_r+0x20>)
 800670c:	2300      	movs	r3, #0
 800670e:	4604      	mov	r4, r0
 8006710:	4608      	mov	r0, r1
 8006712:	4611      	mov	r1, r2
 8006714:	602b      	str	r3, [r5, #0]
 8006716:	f7fb f9ec 	bl	8001af2 <_fstat>
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	d102      	bne.n	8006724 <_fstat_r+0x1c>
 800671e:	682b      	ldr	r3, [r5, #0]
 8006720:	b103      	cbz	r3, 8006724 <_fstat_r+0x1c>
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	bd38      	pop	{r3, r4, r5, pc}
 8006726:	bf00      	nop
 8006728:	20000290 	.word	0x20000290

0800672c <_isatty_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d06      	ldr	r5, [pc, #24]	; (8006748 <_isatty_r+0x1c>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	602b      	str	r3, [r5, #0]
 8006738:	f7fb f9eb 	bl	8001b12 <_isatty>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_isatty_r+0x1a>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b103      	cbz	r3, 8006746 <_isatty_r+0x1a>
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	20000290 	.word	0x20000290

0800674c <_init>:
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	bf00      	nop
 8006750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006752:	bc08      	pop	{r3}
 8006754:	469e      	mov	lr, r3
 8006756:	4770      	bx	lr

08006758 <_fini>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr
