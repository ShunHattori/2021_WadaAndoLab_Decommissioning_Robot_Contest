// Generated by gencpp from file commissioning_robot/MechanismReport.msg
// DO NOT EDIT!


#ifndef COMMISSIONING_ROBOT_MESSAGE_MECHANISMREPORT_H
#define COMMISSIONING_ROBOT_MESSAGE_MECHANISMREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace commissioning_robot
{
template <class ContainerAllocator>
struct MechanismReport_
{
  typedef MechanismReport_<ContainerAllocator> Type;

  MechanismReport_()
    : running_phase(0)
    , running_mode()
    , state_limit()
    , state_pulse()
    , reference()
    , current()  {
    }
  MechanismReport_(const ContainerAllocator& _alloc)
    : running_phase(0)
    , running_mode(_alloc)
    , state_limit(_alloc)
    , state_pulse(_alloc)
    , reference(_alloc)
    , current(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _running_phase_type;
  _running_phase_type running_phase;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _running_mode_type;
  _running_mode_type running_mode;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _state_limit_type;
  _state_limit_type state_limit;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _state_pulse_type;
  _state_pulse_type state_pulse;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _reference_type;
  _reference_type reference;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _current_type;
  _current_type current;





  typedef boost::shared_ptr< ::commissioning_robot::MechanismReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::commissioning_robot::MechanismReport_<ContainerAllocator> const> ConstPtr;

}; // struct MechanismReport_

typedef ::commissioning_robot::MechanismReport_<std::allocator<void> > MechanismReport;

typedef boost::shared_ptr< ::commissioning_robot::MechanismReport > MechanismReportPtr;
typedef boost::shared_ptr< ::commissioning_robot::MechanismReport const> MechanismReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::commissioning_robot::MechanismReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::commissioning_robot::MechanismReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::commissioning_robot::MechanismReport_<ContainerAllocator1> & lhs, const ::commissioning_robot::MechanismReport_<ContainerAllocator2> & rhs)
{
  return lhs.running_phase == rhs.running_phase &&
    lhs.running_mode == rhs.running_mode &&
    lhs.state_limit == rhs.state_limit &&
    lhs.state_pulse == rhs.state_pulse &&
    lhs.reference == rhs.reference &&
    lhs.current == rhs.current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::commissioning_robot::MechanismReport_<ContainerAllocator1> & lhs, const ::commissioning_robot::MechanismReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace commissioning_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::commissioning_robot::MechanismReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::commissioning_robot::MechanismReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commissioning_robot::MechanismReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commissioning_robot::MechanismReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commissioning_robot::MechanismReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commissioning_robot::MechanismReport_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::commissioning_robot::MechanismReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4efe817f8f990d484fcf48fdff687678";
  }

  static const char* value(const ::commissioning_robot::MechanismReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4efe817f8f990d48ULL;
  static const uint64_t static_value2 = 0x4fcf48fdff687678ULL;
};

template<class ContainerAllocator>
struct DataType< ::commissioning_robot::MechanismReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "commissioning_robot/MechanismReport";
  }

  static const char* value(const ::commissioning_robot::MechanismReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::commissioning_robot::MechanismReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 running_phase\n"
"uint8[] running_mode\n"
"uint8[] state_limit\n"
"int64[] state_pulse\n"
"float64[] reference\n"
"float64[] current\n"
;
  }

  static const char* value(const ::commissioning_robot::MechanismReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::commissioning_robot::MechanismReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.running_phase);
      stream.next(m.running_mode);
      stream.next(m.state_limit);
      stream.next(m.state_pulse);
      stream.next(m.reference);
      stream.next(m.current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MechanismReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::commissioning_robot::MechanismReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::commissioning_robot::MechanismReport_<ContainerAllocator>& v)
  {
    s << indent << "running_phase: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.running_phase);
    s << indent << "running_mode[]" << std::endl;
    for (size_t i = 0; i < v.running_mode.size(); ++i)
    {
      s << indent << "  running_mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.running_mode[i]);
    }
    s << indent << "state_limit[]" << std::endl;
    for (size_t i = 0; i < v.state_limit.size(); ++i)
    {
      s << indent << "  state_limit[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.state_limit[i]);
    }
    s << indent << "state_pulse[]" << std::endl;
    for (size_t i = 0; i < v.state_pulse.size(); ++i)
    {
      s << indent << "  state_pulse[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.state_pulse[i]);
    }
    s << indent << "reference[]" << std::endl;
    for (size_t i = 0; i < v.reference.size(); ++i)
    {
      s << indent << "  reference[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.reference[i]);
    }
    s << indent << "current[]" << std::endl;
    for (size_t i = 0; i < v.current.size(); ++i)
    {
      s << indent << "  current[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.current[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMISSIONING_ROBOT_MESSAGE_MECHANISMREPORT_H
