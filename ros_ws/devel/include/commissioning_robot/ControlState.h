// Generated by gencpp from file commissioning_robot/ControlState.msg
// DO NOT EDIT!


#ifndef COMMISSIONING_ROBOT_MESSAGE_CONTROLSTATE_H
#define COMMISSIONING_ROBOT_MESSAGE_CONTROLSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace commissioning_robot
{
template <class ContainerAllocator>
struct ControlState_
{
  typedef ControlState_<ContainerAllocator> Type;

  ControlState_()
    : mode()
    , reference()
    , manual()
    , offset()  {
    }
  ControlState_(const ContainerAllocator& _alloc)
    : mode(_alloc)
    , reference(_alloc)
    , manual(_alloc)
    , offset(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _mode_type;
  _mode_type mode;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _reference_type;
  _reference_type reference;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _manual_type;
  _manual_type manual;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _offset_type;
  _offset_type offset;





  typedef boost::shared_ptr< ::commissioning_robot::ControlState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::commissioning_robot::ControlState_<ContainerAllocator> const> ConstPtr;

}; // struct ControlState_

typedef ::commissioning_robot::ControlState_<std::allocator<void> > ControlState;

typedef boost::shared_ptr< ::commissioning_robot::ControlState > ControlStatePtr;
typedef boost::shared_ptr< ::commissioning_robot::ControlState const> ControlStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::commissioning_robot::ControlState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::commissioning_robot::ControlState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::commissioning_robot::ControlState_<ContainerAllocator1> & lhs, const ::commissioning_robot::ControlState_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.reference == rhs.reference &&
    lhs.manual == rhs.manual &&
    lhs.offset == rhs.offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::commissioning_robot::ControlState_<ContainerAllocator1> & lhs, const ::commissioning_robot::ControlState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace commissioning_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::commissioning_robot::ControlState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::commissioning_robot::ControlState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commissioning_robot::ControlState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commissioning_robot::ControlState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commissioning_robot::ControlState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commissioning_robot::ControlState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::commissioning_robot::ControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37618245187afeac8a81955f76bd2d07";
  }

  static const char* value(const ::commissioning_robot::ControlState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37618245187afeacULL;
  static const uint64_t static_value2 = 0x8a81955f76bd2d07ULL;
};

template<class ContainerAllocator>
struct DataType< ::commissioning_robot::ControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "commissioning_robot/ControlState";
  }

  static const char* value(const ::commissioning_robot::ControlState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::commissioning_robot::ControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] mode\n"
"float64[] reference\n"
"float64[] manual\n"
"float64[] offset\n"
"\n"
;
  }

  static const char* value(const ::commissioning_robot::ControlState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::commissioning_robot::ControlState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.reference);
      stream.next(m.manual);
      stream.next(m.offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::commissioning_robot::ControlState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::commissioning_robot::ControlState_<ContainerAllocator>& v)
  {
    s << indent << "mode[]" << std::endl;
    for (size_t i = 0; i < v.mode.size(); ++i)
    {
      s << indent << "  mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.mode[i]);
    }
    s << indent << "reference[]" << std::endl;
    for (size_t i = 0; i < v.reference.size(); ++i)
    {
      s << indent << "  reference[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.reference[i]);
    }
    s << indent << "manual[]" << std::endl;
    for (size_t i = 0; i < v.manual.size(); ++i)
    {
      s << indent << "  manual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.manual[i]);
    }
    s << indent << "offset[]" << std::endl;
    for (size_t i = 0; i < v.offset.size(); ++i)
    {
      s << indent << "  offset[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.offset[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMISSIONING_ROBOT_MESSAGE_CONTROLSTATE_H
