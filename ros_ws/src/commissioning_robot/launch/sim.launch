<launch>
  <!-- 時間周りがずれていて実際とGAZEBOを共存させるのは難しそう？ -->
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!-- <arg name="world_name" value="$(find rrbot_gazebo)/worlds/rrbot.world"/> -->
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="world_name" value="main_world.world" />
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <arg name="model" default="$(find commissioning_robot)/xacro/robot.xacro"/>   
  <param name="robot_description" command="$(find xacro)/xacro $(arg model)"/>

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find commissioning_robot)/config/control_allvelocity.yaml" command="load"/>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model comrobot -param robot_description"/>

  <!-- launch gazebo_ros joint controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" ns="/commissioning_robot" 
    args="joint_state_controller
     lift1_velocity_controller lift2_velocity_controller lift3_velocity_controller lift4_velocity_controller
     wheel1_velocity_controller wheel2_velocity_controller wheel3_velocity_controller wheel4_velocity_controller
     bottom_unit_link_velocity_controller second_unit_link_velocity_controller third_unit_link_velocity_controller top_unit_link_velocity_controller
     arm_unit_y_link_velocity_controller arm_unit_x_link_velocity_controller"/>

  <!-- convert joint states to TF transforms for rviz -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false">
    <remap from="/joint_states" to="/commissioning_robot/joint_states" />
  </node>
  
  <!-- launch rviz with specified configration -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find commissioning_robot)/config/sim_SETTING.rviz"/>


  <!-- launching user nodes -->
  <node pkg="ds4_driver" name="ds4_Interface" type="ds4_driver_node.py"/>
  <node pkg="commissioning_robot" name="sim_bridge" type="sim_bridge" />

  <node pkg="commissioning_robot" name="drive_inverse_kinematics" type="drive_inverse_kinematics"/>
  <node pkg="commissioning_robot" name="pose_controller" type="pose_controller"/>
  <node pkg="commissioning_robot" name="drive_wheel_controller" type="drive_wheel_controller" />
  <node pkg="commissioning_robot" name="main_lift_controller" type="main_lift_controller"/>
  <node pkg="commissioning_robot" name="drive_lift_controller" type="drive_lift_controller"/>
  <node pkg="commissioning_robot" name="arm_controller" type="arm_controller" output="screen"/>
  <node pkg="commissioning_robot" name="cable_manager_controller" type="cable_manager_controller"/>
  <node pkg="commissioning_robot" name="ROBOT_CORE" type="robot_core"/>

</launch>